
GPIO_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005fc0  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005fc0  00005fc0  0000dfc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000910  20000000  00005fc8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000f0  20000910  000068d8  00010910  2**2
                  ALLOC
  4 .stack        00001000  20000a00  000069c8  00010910  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00010910  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  0001093a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002e078  00000000  00000000  000109ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007f4f  00000000  00000000  0003ea23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000e12b  00000000  00000000  00046972  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001228  00000000  00000000  00054aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f08  00000000  00000000  00055cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00031da2  00000000  00000000  00056bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001b12b  00000000  00000000  00088972  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000e4a5e  00000000  00000000  000a3a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002684  00000000  00000000  001884fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20001a00 	.word	0x20001a00
       4:	000027b1 	.word	0x000027b1
       8:	000027ad 	.word	0x000027ad
       c:	000027ad 	.word	0x000027ad
      10:	000027ad 	.word	0x000027ad
      14:	000027ad 	.word	0x000027ad
      18:	000027ad 	.word	0x000027ad
	...
      2c:	000027ad 	.word	0x000027ad
      30:	000027ad 	.word	0x000027ad
      34:	00000000 	.word	0x00000000
      38:	000027ad 	.word	0x000027ad
      3c:	000027ad 	.word	0x000027ad
      40:	000027ad 	.word	0x000027ad
      44:	00002355 	.word	0x00002355
      48:	00002369 	.word	0x00002369
      4c:	0000237d 	.word	0x0000237d
      50:	00002391 	.word	0x00002391
      54:	000023a5 	.word	0x000023a5
      58:	000023b9 	.word	0x000023b9
      5c:	000023cd 	.word	0x000023cd
      60:	000023e1 	.word	0x000023e1
      64:	000023f5 	.word	0x000023f5
      68:	00002409 	.word	0x00002409
      6c:	0000241d 	.word	0x0000241d
      70:	00002431 	.word	0x00002431
      74:	00002445 	.word	0x00002445
      78:	00002459 	.word	0x00002459
      7c:	0000246d 	.word	0x0000246d
      80:	00002481 	.word	0x00002481
      84:	000027ad 	.word	0x000027ad
      88:	000027ad 	.word	0x000027ad
      8c:	000027ad 	.word	0x000027ad
      90:	000027ad 	.word	0x000027ad
      94:	000027ad 	.word	0x000027ad
      98:	000027ad 	.word	0x000027ad
      9c:	000027ad 	.word	0x000027ad
      a0:	000027ad 	.word	0x000027ad
      a4:	000021bd 	.word	0x000021bd
      a8:	000021d5 	.word	0x000021d5
      ac:	000021ed 	.word	0x000021ed
      b0:	00002205 	.word	0x00002205
      b4:	0000221d 	.word	0x0000221d
      b8:	00002235 	.word	0x00002235
      bc:	0000224d 	.word	0x0000224d
      c0:	00002265 	.word	0x00002265
      c4:	0000227d 	.word	0x0000227d
      c8:	00002295 	.word	0x00002295
      cc:	000022ad 	.word	0x000022ad
      d0:	000022c5 	.word	0x000022c5
      d4:	000027ad 	.word	0x000027ad
      d8:	000027ad 	.word	0x000027ad
      dc:	000027ad 	.word	0x000027ad
      e0:	000027ad 	.word	0x000027ad
      e4:	000027ad 	.word	0x000027ad
      e8:	000027ad 	.word	0x000027ad
      ec:	000027ad 	.word	0x000027ad
      f0:	000027ad 	.word	0x000027ad
      f4:	000027ad 	.word	0x000027ad
      f8:	000027ad 	.word	0x000027ad
      fc:	000027ad 	.word	0x000027ad
     100:	000027ad 	.word	0x000027ad
     104:	000027ad 	.word	0x000027ad
     108:	000027ad 	.word	0x000027ad
     10c:	000027ad 	.word	0x000027ad
     110:	000027ad 	.word	0x000027ad
     114:	000027ad 	.word	0x000027ad
     118:	000027ad 	.word	0x000027ad
     11c:	000027ad 	.word	0x000027ad
     120:	000027ad 	.word	0x000027ad
     124:	000027ad 	.word	0x000027ad
     128:	000027ad 	.word	0x000027ad
     12c:	000027ad 	.word	0x000027ad
     130:	000027ad 	.word	0x000027ad
     134:	000027ad 	.word	0x000027ad
     138:	000027ad 	.word	0x000027ad
     13c:	000027ad 	.word	0x000027ad
     140:	000027ad 	.word	0x000027ad
     144:	000027ad 	.word	0x000027ad
     148:	000027ad 	.word	0x000027ad
     14c:	000027ad 	.word	0x000027ad
     150:	000027ad 	.word	0x000027ad
     154:	000027ad 	.word	0x000027ad
     158:	000027ad 	.word	0x000027ad
     15c:	000027ad 	.word	0x000027ad
     160:	000027ad 	.word	0x000027ad
     164:	000027ad 	.word	0x000027ad
     168:	000027ad 	.word	0x000027ad
     16c:	000027ad 	.word	0x000027ad
     170:	000027ad 	.word	0x000027ad
     174:	000027ad 	.word	0x000027ad
     178:	000027ad 	.word	0x000027ad
     17c:	000027ad 	.word	0x000027ad

00000180 <deregister_tm_clones>:
     180:	b508      	push	{r3, lr}
     182:	4805      	ldr	r0, [pc, #20]	; (198 <deregister_tm_clones+0x18>)
     184:	4b05      	ldr	r3, [pc, #20]	; (19c <deregister_tm_clones+0x1c>)
     186:	1a19      	subs	r1, r3, r0
     188:	2906      	cmp	r1, #6
     18a:	d800      	bhi.n	18e <deregister_tm_clones+0xe>
     18c:	bd08      	pop	{r3, pc}
     18e:	4a04      	ldr	r2, [pc, #16]	; (1a0 <deregister_tm_clones+0x20>)
     190:	2a00      	cmp	r2, #0
     192:	d0fb      	beq.n	18c <deregister_tm_clones+0xc>
     194:	4790      	blx	r2
     196:	e7f9      	b.n	18c <deregister_tm_clones+0xc>
     198:	00005fc8 	.word	0x00005fc8
     19c:	00005fcb 	.word	0x00005fcb
     1a0:	00000000 	.word	0x00000000

000001a4 <register_tm_clones>:
     1a4:	b508      	push	{r3, lr}
     1a6:	4807      	ldr	r0, [pc, #28]	; (1c4 <register_tm_clones+0x20>)
     1a8:	4b07      	ldr	r3, [pc, #28]	; (1c8 <register_tm_clones+0x24>)
     1aa:	1a19      	subs	r1, r3, r0
     1ac:	108a      	asrs	r2, r1, #2
     1ae:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
     1b2:	1059      	asrs	r1, r3, #1
     1b4:	d100      	bne.n	1b8 <register_tm_clones+0x14>
     1b6:	bd08      	pop	{r3, pc}
     1b8:	4a04      	ldr	r2, [pc, #16]	; (1cc <register_tm_clones+0x28>)
     1ba:	2a00      	cmp	r2, #0
     1bc:	d0fb      	beq.n	1b6 <register_tm_clones+0x12>
     1be:	4790      	blx	r2
     1c0:	e7f9      	b.n	1b6 <register_tm_clones+0x12>
     1c2:	bf00      	nop
     1c4:	00005fc8 	.word	0x00005fc8
     1c8:	00005fc8 	.word	0x00005fc8
     1cc:	00000000 	.word	0x00000000

000001d0 <__do_global_dtors_aux>:
     1d0:	b510      	push	{r4, lr}
     1d2:	4c06      	ldr	r4, [pc, #24]	; (1ec <__do_global_dtors_aux+0x1c>)
     1d4:	7823      	ldrb	r3, [r4, #0]
     1d6:	b943      	cbnz	r3, 1ea <__do_global_dtors_aux+0x1a>
     1d8:	f7ff ffd2 	bl	180 <deregister_tm_clones>
     1dc:	4804      	ldr	r0, [pc, #16]	; (1f0 <__do_global_dtors_aux+0x20>)
     1de:	b110      	cbz	r0, 1e6 <__do_global_dtors_aux+0x16>
     1e0:	4804      	ldr	r0, [pc, #16]	; (1f4 <__do_global_dtors_aux+0x24>)
     1e2:	f3af 8000 	nop.w
     1e6:	2101      	movs	r1, #1
     1e8:	7021      	strb	r1, [r4, #0]
     1ea:	bd10      	pop	{r4, pc}
     1ec:	20000910 	.word	0x20000910
     1f0:	00000000 	.word	0x00000000
     1f4:	00005fc8 	.word	0x00005fc8

000001f8 <frame_dummy>:
     1f8:	b508      	push	{r3, lr}
     1fa:	4b08      	ldr	r3, [pc, #32]	; (21c <frame_dummy+0x24>)
     1fc:	b11b      	cbz	r3, 206 <frame_dummy+0xe>
     1fe:	4808      	ldr	r0, [pc, #32]	; (220 <frame_dummy+0x28>)
     200:	4908      	ldr	r1, [pc, #32]	; (224 <frame_dummy+0x2c>)
     202:	f3af 8000 	nop.w
     206:	4808      	ldr	r0, [pc, #32]	; (228 <frame_dummy+0x30>)
     208:	6801      	ldr	r1, [r0, #0]
     20a:	b111      	cbz	r1, 212 <frame_dummy+0x1a>
     20c:	4a07      	ldr	r2, [pc, #28]	; (22c <frame_dummy+0x34>)
     20e:	b102      	cbz	r2, 212 <frame_dummy+0x1a>
     210:	4790      	blx	r2
     212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     216:	f7ff bfc5 	b.w	1a4 <register_tm_clones>
     21a:	bf00      	nop
     21c:	00000000 	.word	0x00000000
     220:	00005fc8 	.word	0x00005fc8
     224:	20000914 	.word	0x20000914
     228:	00005fc8 	.word	0x00005fc8
     22c:	00000000 	.word	0x00000000

00000230 <servo_set_duty_cycle>:
	/* PWM End */
		
	servo_magnet_set(0);
}

void servo_set_duty_cycle(int pwm_dc, int servo){
     230:	b538      	push	{r3, r4, r5, lr}
     232:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
     236:	2863      	cmp	r0, #99	; 0x63
     238:	bfb4      	ite	lt
     23a:	4604      	movlt	r4, r0
     23c:	2463      	movge	r4, #99	; 0x63
	
	if(pwm_dc >= 100) pwm_dc = 99;
	else if(pwm_dc<0) pwm_dc = 0;
	
	switch (servo)
     23e:	b111      	cbz	r1, 246 <servo_set_duty_cycle+0x16>
     240:	2901      	cmp	r1, #1
     242:	d15d      	bne.n	300 <servo_set_duty_cycle+0xd0>
     244:	e02e      	b.n	2a4 <servo_set_duty_cycle+0x74>
	{
		case SERVO_MAGNET:
		tc_write_ra(TC, TC_CHANNEL_WAVEFORM, ((int)((100-pwm_dc)*tc_read_rc(TC, TC_CHANNEL_WAVEFORM)) /100.0));
     246:	f04f 0500 	mov.w	r5, #0
     24a:	f2c4 0501 	movt	r5, #16385	; 0x4001
     24e:	4628      	mov	r0, r5
     250:	f04f 0100 	mov.w	r1, #0
     254:	f240 32f1 	movw	r2, #1009	; 0x3f1
     258:	f2c0 0200 	movt	r2, #0
     25c:	4790      	blx	r2
     25e:	f1c4 0464 	rsb	r4, r4, #100	; 0x64
     262:	fb04 f000 	mul.w	r0, r4, r0
     266:	f243 11cd 	movw	r1, #12749	; 0x31cd
     26a:	f2c0 0100 	movt	r1, #0
     26e:	4788      	blx	r1
     270:	f04f 0200 	mov.w	r2, #0
     274:	f04f 0300 	mov.w	r3, #0
     278:	f2c4 0359 	movt	r3, #16473	; 0x4059
     27c:	f243 44ed 	movw	r4, #13549	; 0x34ed
     280:	f2c0 0400 	movt	r4, #0
     284:	47a0      	blx	r4
     286:	f243 63bd 	movw	r3, #14013	; 0x36bd
     28a:	f2c0 0300 	movt	r3, #0
     28e:	4798      	blx	r3
     290:	4602      	mov	r2, r0
     292:	4628      	mov	r0, r5
     294:	f04f 0100 	mov.w	r1, #0
     298:	f240 33f9 	movw	r3, #1017	; 0x3f9
     29c:	f2c0 0300 	movt	r3, #0
     2a0:	4798      	blx	r3
		
		break;
     2a2:	bd38      	pop	{r3, r4, r5, pc}
		
		case SERVO_SLAPPER:
		tc_write_rb(TC, TC_CHANNEL_WAVEFORM, ((int)((100-pwm_dc)*tc_read_rc(TC, TC_CHANNEL_WAVEFORM))/100.0));
     2a4:	f04f 0500 	mov.w	r5, #0
     2a8:	f2c4 0501 	movt	r5, #16385	; 0x4001
     2ac:	4628      	mov	r0, r5
     2ae:	f04f 0100 	mov.w	r1, #0
     2b2:	f240 32f1 	movw	r2, #1009	; 0x3f1
     2b6:	f2c0 0200 	movt	r2, #0
     2ba:	4790      	blx	r2
     2bc:	f1c4 0464 	rsb	r4, r4, #100	; 0x64
     2c0:	fb04 f000 	mul.w	r0, r4, r0
     2c4:	f243 11cd 	movw	r1, #12749	; 0x31cd
     2c8:	f2c0 0100 	movt	r1, #0
     2cc:	4788      	blx	r1
     2ce:	f04f 0200 	mov.w	r2, #0
     2d2:	f04f 0300 	mov.w	r3, #0
     2d6:	f2c4 0359 	movt	r3, #16473	; 0x4059
     2da:	f243 44ed 	movw	r4, #13549	; 0x34ed
     2de:	f2c0 0400 	movt	r4, #0
     2e2:	47a0      	blx	r4
     2e4:	f243 63bd 	movw	r3, #14013	; 0x36bd
     2e8:	f2c0 0300 	movt	r3, #0
     2ec:	4798      	blx	r3
     2ee:	4602      	mov	r2, r0
     2f0:	4628      	mov	r0, r5
     2f2:	f04f 0100 	mov.w	r1, #0
     2f6:	f240 4301 	movw	r3, #1025	; 0x401
     2fa:	f2c0 0300 	movt	r3, #0
     2fe:	4798      	blx	r3
     300:	bd38      	pop	{r3, r4, r5, pc}
     302:	bf00      	nop

00000304 <servo_magnet_set>:
		break;
	}
	
}

void servo_magnet_set(int status){
     304:	b508      	push	{r3, lr}

		if(status){
     306:	b148      	cbz	r0, 31c <servo_magnet_set+0x18>
			servo_set_duty_cycle(5, SERVO_MAGNET); /* magnet up */
     308:	f04f 0005 	mov.w	r0, #5
     30c:	f04f 0100 	mov.w	r1, #0
     310:	f240 2231 	movw	r2, #561	; 0x231
     314:	f2c0 0200 	movt	r2, #0
     318:	4790      	blx	r2
     31a:	bd08      	pop	{r3, pc}
		}else{
			servo_set_duty_cycle(8, SERVO_MAGNET); /* magnet down */
     31c:	f04f 0008 	mov.w	r0, #8
     320:	f04f 0100 	mov.w	r1, #0
     324:	f240 2331 	movw	r3, #561	; 0x231
     328:	f2c0 0300 	movt	r3, #0
     32c:	4798      	blx	r3
     32e:	bd08      	pop	{r3, pc}

00000330 <servo_init>:
#define TC_CHANNEL_WAVEFORM 0

#define SERVO_MAGNET 0
#define SERVO_SLAPPER 1

void servo_init(void){
     330:	b510      	push	{r4, lr}
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
     332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     336:	f2c4 030e 	movt	r3, #16398	; 0x400e
     33a:	f44f 7280 	mov.w	r2, #256	; 0x100
     33e:	679a      	str	r2, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     344:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     348:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
     34c:	615a      	str	r2, [r3, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
     34e:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     350:	639a      	str	r2, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
     352:	609a      	str	r2, [r3, #8]
	

	uint32_t ra, rb, rc;

	/* Configure the PMC to enable the TC module. */
	sysclk_enable_peripheral_clock(TC0);
     354:	f04f 0400 	mov.w	r4, #0
     358:	f2c4 0401 	movt	r4, #16385	; 0x4001
     35c:	4620      	mov	r0, r4
     35e:	f640 6101 	movw	r1, #3585	; 0xe01
     362:	f2c0 0100 	movt	r1, #0
     366:	4788      	blx	r1

	/* Init TC to waveform mode. */
	tc_init(TC, TC_CHANNEL_WAVEFORM,
     368:	4620      	mov	r0, r4
     36a:	f04f 0100 	mov.w	r1, #0
     36e:	f24c 4202 	movw	r2, #50178	; 0xc402
     372:	f6c0 1209 	movt	r2, #2313	; 0x909
     376:	f240 33c9 	movw	r3, #969	; 0x3c9
     37a:	f2c0 0300 	movt	r3, #0
     37e:	4798      	blx	r3
	/*  PBA = 6 MHz, DIV = 8, freq = 500 Hz, rc = PBA/DIV/freq */
	rc = 30000;
	ra = rc;

	
	tc_write_rc(TC, TC_CHANNEL_WAVEFORM, rc);
     380:	4620      	mov	r0, r4
     382:	f04f 0100 	mov.w	r1, #0
     386:	f247 5230 	movw	r2, #30000	; 0x7530
     38a:	f240 4309 	movw	r3, #1033	; 0x409
     38e:	f2c0 0300 	movt	r3, #0
     392:	4798      	blx	r3
	

	tc_write_ra(TC, TC_CHANNEL_WAVEFORM, ra);
     394:	4620      	mov	r0, r4
     396:	f04f 0100 	mov.w	r1, #0
     39a:	f247 5230 	movw	r2, #30000	; 0x7530
     39e:	f240 33f9 	movw	r3, #1017	; 0x3f9
     3a2:	f2c0 0300 	movt	r3, #0
     3a6:	4798      	blx	r3
	//tc_write_rb(TC, TC_CHANNEL_WAVEFORM, rb);

	/* Enable TC TC_CHANNEL_WAVEFORM. */
	tc_start(TC, TC_CHANNEL_WAVEFORM);
     3a8:	4620      	mov	r0, r4
     3aa:	f04f 0100 	mov.w	r1, #0
     3ae:	f240 32e5 	movw	r2, #997	; 0x3e5
     3b2:	f2c0 0200 	movt	r2, #0
     3b6:	4790      	blx	r2
	
	/* PWM End */
		
	servo_magnet_set(0);
     3b8:	f04f 0000 	mov.w	r0, #0
     3bc:	f240 3105 	movw	r1, #773	; 0x305
     3c0:	f2c0 0100 	movt	r1, #0
     3c4:	4788      	blx	r1
     3c6:	bd10      	pop	{r4, pc}

000003c8 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
     3c8:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
     3ca:	ea4f 1181 	mov.w	r1, r1, lsl #6
     3ce:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
     3d0:	f04f 0402 	mov.w	r4, #2
     3d4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
     3d6:	f04f 30ff 	mov.w	r0, #4294967295
     3da:	6298      	str	r0, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
     3dc:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
     3de:	605a      	str	r2, [r3, #4]
}
     3e0:	bc10      	pop	{r4}
     3e2:	4770      	bx	lr

000003e4 <tc_start>:
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
     3e4:	ea4f 1181 	mov.w	r1, r1, lsl #6
     3e8:	f04f 0305 	mov.w	r3, #5
     3ec:	5043      	str	r3, [r0, r1]
     3ee:	4770      	bx	lr

000003f0 <tc_read_rc>:
uint32_t tc_read_rc(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_RC;
     3f0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
     3f4:	69c8      	ldr	r0, [r1, #28]
}
     3f6:	4770      	bx	lr

000003f8 <tc_write_ra>:
		uint32_t ul_value)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
     3f8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
     3fc:	614a      	str	r2, [r1, #20]
     3fe:	4770      	bx	lr

00000400 <tc_write_rb>:
		uint32_t ul_value)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RB = ul_value;
     400:	eb00 1181 	add.w	r1, r0, r1, lsl #6
     404:	618a      	str	r2, [r1, #24]
     406:	4770      	bx	lr

00000408 <tc_write_rc>:
		uint32_t ul_value)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
     408:	eb00 1181 	add.w	r1, r0, r1, lsl #6
     40c:	61ca      	str	r2, [r1, #28]
     40e:	4770      	bx	lr

00000410 <controller_set_position>:
	}	
	
}


void controller_set_position(int pos, ms_motor_t axis){
     410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     414:	4606      	mov	r6, r0
	
	int current_pos, dir, speed;
	
	switch (axis)
     416:	460c      	mov	r4, r1
     418:	b111      	cbz	r1, 420 <controller_set_position+0x10>
     41a:	2901      	cmp	r1, #1
     41c:	d10d      	bne.n	43a <controller_set_position+0x2a>
     41e:	e006      	b.n	42e <controller_set_position+0x1e>
	{
		case MOTOR_1_X:
		current_pos = encoder_read_x_pos();
     420:	f642 10b9 	movw	r0, #10681	; 0x29b9
     424:	f2c0 0000 	movt	r0, #0
     428:	4780      	blx	r0
     42a:	4605      	mov	r5, r0
		break;
     42c:	e005      	b.n	43a <controller_set_position+0x2a>
		
		case MOTOR_2_Y:
		current_pos = encoder_read_y_pos();
     42e:	f642 13c5 	movw	r3, #10693	; 0x29c5
     432:	f2c0 0300 	movt	r3, #0
     436:	4798      	blx	r3
     438:	4605      	mov	r5, r0
	
	dir = pos > current_pos ? 1 : 0; //if pos > current_pos, dir = 1;	
	speed = 40;

	
	ms_set_duty_cycle(speed, axis);
     43a:	f04f 0028 	mov.w	r0, #40	; 0x28
     43e:	4621      	mov	r1, r4
     440:	f240 620d 	movw	r2, #1549	; 0x60d
     444:	f2c0 0200 	movt	r2, #0
     448:	4790      	blx	r2
	
	while(abs(pos-current_pos)>5){
     44a:	1b71      	subs	r1, r6, r5
     44c:	2900      	cmp	r1, #0
     44e:	bfb8      	it	lt
     450:	4249      	neglt	r1, r1
     452:	2905      	cmp	r1, #5
     454:	dd20      	ble.n	498 <controller_set_position+0x88>
			case MOTOR_1_X:
			current_pos = encoder_read_x_pos();
			break;
			
			case MOTOR_2_Y:
			current_pos = encoder_read_y_pos();
     456:	f642 19c5 	movw	r9, #10693	; 0x29c5
     45a:	f2c0 0900 	movt	r9, #0
	while(abs(pos-current_pos)>5){
		
		switch (axis)
		{
			case MOTOR_1_X:
			current_pos = encoder_read_x_pos();
     45e:	f642 18b9 	movw	r8, #10681	; 0x29b9
     462:	f2c0 0800 	movt	r8, #0
		}
	
		
		dir = pos > current_pos ? 1 : 0; //if pos > current_pos, dir = 1;
		
		ms_set_dir(dir, axis);
     466:	f240 77d9 	movw	r7, #2009	; 0x7d9
     46a:	f2c0 0700 	movt	r7, #0
	
	ms_set_duty_cycle(speed, axis);
	
	while(abs(pos-current_pos)>5){
		
		switch (axis)
     46e:	b114      	cbz	r4, 476 <controller_set_position+0x66>
     470:	2c01      	cmp	r4, #1
     472:	d105      	bne.n	480 <controller_set_position+0x70>
     474:	e002      	b.n	47c <controller_set_position+0x6c>
		{
			case MOTOR_1_X:
			current_pos = encoder_read_x_pos();
     476:	47c0      	blx	r8
     478:	4605      	mov	r5, r0
			break;
     47a:	e001      	b.n	480 <controller_set_position+0x70>
			
			case MOTOR_2_Y:
			current_pos = encoder_read_y_pos();
     47c:	47c8      	blx	r9
     47e:	4605      	mov	r5, r0
		}
	
		
		dir = pos > current_pos ? 1 : 0; //if pos > current_pos, dir = 1;
		
		ms_set_dir(dir, axis);
     480:	42ae      	cmp	r6, r5
     482:	bfd4      	ite	le
     484:	2000      	movle	r0, #0
     486:	2001      	movgt	r0, #1
     488:	4621      	mov	r1, r4
     48a:	47b8      	blx	r7
	speed = 40;

	
	ms_set_duty_cycle(speed, axis);
	
	while(abs(pos-current_pos)>5){
     48c:	1b73      	subs	r3, r6, r5
     48e:	2b00      	cmp	r3, #0
     490:	bfb8      	it	lt
     492:	425b      	neglt	r3, r3
     494:	2b05      	cmp	r3, #5
     496:	dcea      	bgt.n	46e <controller_set_position+0x5e>
		
		
	}
	
	
	ms_set_duty_cycle(0, axis);
     498:	f04f 0000 	mov.w	r0, #0
     49c:	4621      	mov	r1, r4
     49e:	f240 620d 	movw	r2, #1549	; 0x60d
     4a2:	f2c0 0200 	movt	r2, #0
     4a6:	4790      	blx	r2
     4a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000004ac <controller_reset_position>:
	controller_set_position(x_end, MOTOR_1_X);
	controller_set_position(y_end, MOTOR_2_Y);
	
}

void controller_reset_position(ms_motor_t motor){
     4ac:	b538      	push	{r3, r4, r5, lr}
     4ae:	4604      	mov	r4, r0
	
	controller_set_position(5, motor);
     4b0:	f04f 0005 	mov.w	r0, #5
     4b4:	4621      	mov	r1, r4
     4b6:	f240 4311 	movw	r3, #1041	; 0x411
     4ba:	f2c0 0300 	movt	r3, #0
     4be:	4798      	blx	r3
	ms_set_dir(0, motor); //towards origo
     4c0:	f04f 0000 	mov.w	r0, #0
     4c4:	4621      	mov	r1, r4
     4c6:	f240 72d9 	movw	r2, #2009	; 0x7d9
     4ca:	f2c0 0200 	movt	r2, #0
     4ce:	4790      	blx	r2
	
	//when in origo, drive the motor towards the stop
	ms_set_duty_cycle(20, motor);
     4d0:	f04f 0014 	mov.w	r0, #20
     4d4:	4621      	mov	r1, r4
     4d6:	f240 650d 	movw	r5, #1549	; 0x60d
     4da:	f2c0 0500 	movt	r5, #0
     4de:	47a8      	blx	r5
	delay_ms(500);
     4e0:	f648 201c 	movw	r0, #35356	; 0x8a1c
     4e4:	f2c0 0006 	movt	r0, #6
     4e8:	f240 0101 	movw	r1, #1
     4ec:	f2c2 0100 	movt	r1, #8192	; 0x2000
     4f0:	4788      	blx	r1
	ms_set_duty_cycle(0, motor);
     4f2:	f04f 0000 	mov.w	r0, #0
     4f6:	4621      	mov	r1, r4
     4f8:	47a8      	blx	r5
	
	switch (motor)
     4fa:	b114      	cbz	r4, 502 <controller_reset_position+0x56>
     4fc:	2c01      	cmp	r4, #1
     4fe:	d10b      	bne.n	518 <controller_reset_position+0x6c>
     500:	e005      	b.n	50e <controller_reset_position+0x62>
	{
		case MOTOR_1_X:
		encoder_reset_pos_x();
     502:	f642 13d1 	movw	r3, #10705	; 0x29d1
     506:	f2c0 0300 	movt	r3, #0
     50a:	4798      	blx	r3
		break;
     50c:	bd38      	pop	{r3, r4, r5, pc}
		
		case MOTOR_2_Y:
		encoder_reset_pos_y();
     50e:	f642 10e1 	movw	r0, #10721	; 0x29e1
     512:	f2c0 0000 	movt	r0, #0
     516:	4780      	blx	r0
     518:	bd38      	pop	{r3, r4, r5, pc}
     51a:	bf00      	nop

0000051c <controller_move_piece>:
/* CM_PER_SQUARE 2.625 */
#define CHESS_SQUARE_WIDTH 155 /* POINTS_PER_CM*CM_PER_SQUARE */


/* piece_(x/y) = {0,1,2,3,4,5,6,7} */
void controller_move_piece(int piece_x_start, int piece_y_start, int piece_x_end, int piece_y_end){
     51c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     520:	460d      	mov	r5, r1
     522:	4693      	mov	fp, r2
     524:	469a      	mov	sl, r3
	
	/* Because the chess piece lags behind the magnet */
	int magnet_offset = CHESS_SQUARE_WIDTH/3;
	
	/* Move wagon under chess piece */
	controller_set_position(center_offset + piece_x_start*CHESS_SQUARE_WIDTH, MOTOR_1_X);
     526:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     52a:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
     52e:	f100 004d 	add.w	r0, r0, #77	; 0x4d
     532:	f04f 0100 	mov.w	r1, #0
     536:	f240 4411 	movw	r4, #1041	; 0x411
     53a:	f2c0 0400 	movt	r4, #0
     53e:	47a0      	blx	r4
	controller_set_position(center_offset + piece_y_start*CHESS_SQUARE_WIDTH, MOTOR_2_Y);
     540:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     544:	ebc1 1041 	rsb	r0, r1, r1, lsl #5
     548:	f100 004d 	add.w	r0, r0, #77	; 0x4d
     54c:	f04f 0101 	mov.w	r1, #1
     550:	47a0      	blx	r4
	
	printf("x=%d, y=%d \n", encoder_read_x_pos(), encoder_read_y_pos());
     552:	f642 13b9 	movw	r3, #10681	; 0x29b9
     556:	f2c0 0300 	movt	r3, #0
     55a:	4798      	blx	r3
     55c:	4606      	mov	r6, r0
     55e:	f642 12c5 	movw	r2, #10693	; 0x29c5
     562:	f2c0 0200 	movt	r2, #0
     566:	4790      	blx	r2
     568:	4602      	mov	r2, r0
     56a:	f645 6784 	movw	r7, #24196	; 0x5e84
     56e:	f2c0 0700 	movt	r7, #0
     572:	4638      	mov	r0, r7
     574:	4631      	mov	r1, r6
     576:	f643 0611 	movw	r6, #14353	; 0x3811
     57a:	f2c0 0600 	movt	r6, #0
     57e:	47b0      	blx	r6
	
	/* Move magnet into position */
	servo_magnet_set(1);
     580:	f04f 0001 	mov.w	r0, #1
     584:	f240 3505 	movw	r5, #773	; 0x305
     588:	46a9      	mov	r9, r5
     58a:	f2c0 0900 	movt	r9, #0
     58e:	47c8      	blx	r9
	delay_ms(400);
     590:	f643 354a 	movw	r5, #15178	; 0x3b4a
     594:	f2c0 0505 	movt	r5, #5
     598:	4628      	mov	r0, r5
     59a:	f240 0101 	movw	r1, #1
     59e:	4688      	mov	r8, r1
     5a0:	f2c2 0800 	movt	r8, #8192	; 0x2000
     5a4:	47c0      	blx	r8
	
	/* Move chess piece */
	controller_set_position(center_offset + magnet_offset + piece_x_end*CHESS_SQUARE_WIDTH, MOTOR_1_X);
     5a6:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
     5aa:	ebcb 104b 	rsb	r0, fp, fp, lsl #5
     5ae:	f100 0080 	add.w	r0, r0, #128	; 0x80
     5b2:	f04f 0100 	mov.w	r1, #0
     5b6:	47a0      	blx	r4
	controller_set_position(center_offset + magnet_offset + piece_y_end*CHESS_SQUARE_WIDTH, MOTOR_2_Y);	
     5b8:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
     5bc:	ebca 104a 	rsb	r0, sl, sl, lsl #5
     5c0:	f100 0080 	add.w	r0, r0, #128	; 0x80
     5c4:	f04f 0101 	mov.w	r1, #1
     5c8:	47a0      	blx	r4
	
	printf("x=%d, y=%d \n", encoder_read_x_pos(), encoder_read_y_pos());
     5ca:	f642 10b9 	movw	r0, #10681	; 0x29b9
     5ce:	f2c0 0000 	movt	r0, #0
     5d2:	4780      	blx	r0
     5d4:	4604      	mov	r4, r0
     5d6:	f642 13c5 	movw	r3, #10693	; 0x29c5
     5da:	f2c0 0300 	movt	r3, #0
     5de:	4798      	blx	r3
     5e0:	4602      	mov	r2, r0
     5e2:	4638      	mov	r0, r7
     5e4:	4621      	mov	r1, r4
     5e6:	47b0      	blx	r6
	
	/* Remove magnet */
	servo_magnet_set(0);
     5e8:	f04f 0000 	mov.w	r0, #0
     5ec:	47c8      	blx	r9
	delay_ms(400);
     5ee:	4628      	mov	r0, r5
     5f0:	47c0      	blx	r8
	
	/* Reset position */
	
	controller_reset_position(MOTOR_1_X);
     5f2:	f04f 0000 	mov.w	r0, #0
     5f6:	f240 44ad 	movw	r4, #1197	; 0x4ad
     5fa:	f2c0 0400 	movt	r4, #0
     5fe:	47a0      	blx	r4
	controller_reset_position(MOTOR_2_Y);
     600:	f04f 0001 	mov.w	r0, #1
     604:	47a0      	blx	r4
     606:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     60a:	bf00      	nop

0000060c <ms_set_duty_cycle>:

#define TC             TC1
#define TC_CHANNEL_WAVEFORM  2


void ms_set_duty_cycle(int pwm_dc, ms_motor_t motor_nr){
     60c:	b538      	push	{r3, r4, r5, lr}
     60e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
     612:	2863      	cmp	r0, #99	; 0x63
     614:	bfb4      	ite	lt
     616:	4604      	movlt	r4, r0
     618:	2463      	movge	r4, #99	; 0x63
	
	if(pwm_dc >= 100) pwm_dc = 99;
	else if(pwm_dc<0) pwm_dc = 0;
	
	switch (motor_nr)
     61a:	b111      	cbz	r1, 622 <ms_set_duty_cycle+0x16>
     61c:	2901      	cmp	r1, #1
     61e:	d15d      	bne.n	6dc <ms_set_duty_cycle+0xd0>
     620:	e02e      	b.n	680 <ms_set_duty_cycle+0x74>
	{
		case MOTOR_1_X:
			tc_write_rb(TC, TC_CHANNEL_WAVEFORM, ((int)((100-pwm_dc)*tc_read_rc(TC, TC_CHANNEL_WAVEFORM))/100.0));
     622:	f44f 4580 	mov.w	r5, #16384	; 0x4000
     626:	f2c4 0501 	movt	r5, #16385	; 0x4001
     62a:	4628      	mov	r0, r5
     62c:	f04f 0102 	mov.w	r1, #2
     630:	f240 32f1 	movw	r2, #1009	; 0x3f1
     634:	f2c0 0200 	movt	r2, #0
     638:	4790      	blx	r2
     63a:	f1c4 0464 	rsb	r4, r4, #100	; 0x64
     63e:	fb04 f000 	mul.w	r0, r4, r0
     642:	f243 11cd 	movw	r1, #12749	; 0x31cd
     646:	f2c0 0100 	movt	r1, #0
     64a:	4788      	blx	r1
     64c:	f04f 0200 	mov.w	r2, #0
     650:	f04f 0300 	mov.w	r3, #0
     654:	f2c4 0359 	movt	r3, #16473	; 0x4059
     658:	f243 44ed 	movw	r4, #13549	; 0x34ed
     65c:	f2c0 0400 	movt	r4, #0
     660:	47a0      	blx	r4
     662:	f243 63bd 	movw	r3, #14013	; 0x36bd
     666:	f2c0 0300 	movt	r3, #0
     66a:	4798      	blx	r3
     66c:	4602      	mov	r2, r0
     66e:	4628      	mov	r0, r5
     670:	f04f 0102 	mov.w	r1, #2
     674:	f240 4301 	movw	r3, #1025	; 0x401
     678:	f2c0 0300 	movt	r3, #0
     67c:	4798      	blx	r3
		break;
     67e:	bd38      	pop	{r3, r4, r5, pc}
		
		case MOTOR_2_Y:
			tc_write_ra(TC, TC_CHANNEL_WAVEFORM, ((int)((100-pwm_dc)*tc_read_rc(TC, TC_CHANNEL_WAVEFORM)) /100.0));
     680:	f44f 4580 	mov.w	r5, #16384	; 0x4000
     684:	f2c4 0501 	movt	r5, #16385	; 0x4001
     688:	4628      	mov	r0, r5
     68a:	f04f 0102 	mov.w	r1, #2
     68e:	f240 32f1 	movw	r2, #1009	; 0x3f1
     692:	f2c0 0200 	movt	r2, #0
     696:	4790      	blx	r2
     698:	f1c4 0464 	rsb	r4, r4, #100	; 0x64
     69c:	fb04 f000 	mul.w	r0, r4, r0
     6a0:	f243 11cd 	movw	r1, #12749	; 0x31cd
     6a4:	f2c0 0100 	movt	r1, #0
     6a8:	4788      	blx	r1
     6aa:	f04f 0200 	mov.w	r2, #0
     6ae:	f04f 0300 	mov.w	r3, #0
     6b2:	f2c4 0359 	movt	r3, #16473	; 0x4059
     6b6:	f243 44ed 	movw	r4, #13549	; 0x34ed
     6ba:	f2c0 0400 	movt	r4, #0
     6be:	47a0      	blx	r4
     6c0:	f243 63bd 	movw	r3, #14013	; 0x36bd
     6c4:	f2c0 0300 	movt	r3, #0
     6c8:	4798      	blx	r3
     6ca:	4602      	mov	r2, r0
     6cc:	4628      	mov	r0, r5
     6ce:	f04f 0102 	mov.w	r1, #2
     6d2:	f240 33f9 	movw	r3, #1017	; 0x3f9
     6d6:	f2c0 0300 	movt	r3, #0
     6da:	4798      	blx	r3
     6dc:	bd38      	pop	{r3, r4, r5, pc}
     6de:	bf00      	nop

000006e0 <ms_init>:
		break;
	}
	
}

void ms_init(){
     6e0:	b538      	push	{r3, r4, r5, lr}
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
     6e2:	f44f 54a0 	mov.w	r4, #5120	; 0x1400
     6e6:	f2c4 040e 	movt	r4, #16398	; 0x400e
     6ea:	f04f 0210 	mov.w	r2, #16
     6ee:	67a2      	str	r2, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     6f0:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     6f4:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     6f8:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
     6fc:	6162      	str	r2, [r4, #20]
	} else {
		base->GPIO_PMR0C = mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
     6fe:	6262      	str	r2, [r4, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     700:	63a2      	str	r2, [r4, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
     702:	f04f 0320 	mov.w	r3, #32
     706:	67a3      	str	r3, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     708:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     70c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     710:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
     714:	6163      	str	r3, [r4, #20]
	} else {
		base->GPIO_PMR0C = mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
     716:	6263      	str	r3, [r4, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     718:	63a3      	str	r3, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
     71a:	60a2      	str	r2, [r4, #8]
     71c:	60a3      	str	r3, [r4, #8]
	

	uint32_t ra, rb, rc;

	/* Configure the PMC to enable the TC module. */
	sysclk_enable_peripheral_clock(TC1);
     71e:	f44f 4580 	mov.w	r5, #16384	; 0x4000
     722:	f2c4 0501 	movt	r5, #16385	; 0x4001
     726:	4628      	mov	r0, r5
     728:	f640 6101 	movw	r1, #3585	; 0xe01
     72c:	f2c0 0100 	movt	r1, #0
     730:	4788      	blx	r1

	/* Init TC to waveform mode. */
	tc_init(TC, TC_CHANNEL_WAVEFORM,
     732:	4628      	mov	r0, r5
     734:	f04f 0102 	mov.w	r1, #2
     738:	f24c 4201 	movw	r2, #50177	; 0xc401
     73c:	f6c0 1209 	movt	r2, #2313	; 0x909
     740:	f240 33c9 	movw	r3, #969	; 0x3c9
     744:	f2c0 0300 	movt	r3, #0
     748:	4798      	blx	r3
	/*  PBA = 6 MHz, DIV = 8, freq = 500 Hz, rc = PBA/DIV/freq */
	rc = 30000;
	ra = rc;
	rb = rc;
			
	tc_write_rc(TC, TC_CHANNEL_WAVEFORM, rc);
     74a:	4628      	mov	r0, r5
     74c:	f04f 0102 	mov.w	r1, #2
     750:	f247 5230 	movw	r2, #30000	; 0x7530
     754:	f240 4309 	movw	r3, #1033	; 0x409
     758:	f2c0 0300 	movt	r3, #0
     75c:	4798      	blx	r3
	

	tc_write_ra(TC, TC_CHANNEL_WAVEFORM, ra);
     75e:	4628      	mov	r0, r5
     760:	f04f 0102 	mov.w	r1, #2
     764:	f247 5230 	movw	r2, #30000	; 0x7530
     768:	f240 33f9 	movw	r3, #1017	; 0x3f9
     76c:	f2c0 0300 	movt	r3, #0
     770:	4798      	blx	r3
	tc_write_rb(TC, TC_CHANNEL_WAVEFORM, rb);
     772:	4628      	mov	r0, r5
     774:	f04f 0102 	mov.w	r1, #2
     778:	f247 5230 	movw	r2, #30000	; 0x7530
     77c:	f240 4301 	movw	r3, #1025	; 0x401
     780:	f2c0 0300 	movt	r3, #0
     784:	4798      	blx	r3

	/* Enable TC TC_CHANNEL_WAVEFORM. */
	tc_start(TC, TC_CHANNEL_WAVEFORM);
     786:	4628      	mov	r0, r5
     788:	f04f 0102 	mov.w	r1, #2
     78c:	f240 32e5 	movw	r2, #997	; 0x3e5
     790:	f2c0 0200 	movt	r2, #0
     794:	4790      	blx	r2

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     796:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     79a:	f2c4 000e 	movt	r0, #16398	; 0x400e
     79e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
     7a2:	6441      	str	r1, [r0, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     7a4:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     7a8:	6581      	str	r1, [r0, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     7aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ae:	6463      	str	r3, [r4, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     7b0:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     7b4:	65a3      	str	r3, [r4, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     7b6:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     7ba:	f2c4 020e 	movt	r2, #16398	; 0x400e
     7be:	f44f 6100 	mov.w	r1, #2048	; 0x800
     7c2:	6451      	str	r1, [r2, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     7c4:	f8c2 1168 	str.w	r1, [r2, #360]	; 0x168
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     7c8:	6591      	str	r1, [r2, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     7ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
     7ce:	6443      	str	r3, [r0, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     7d0:	f8c0 3168 	str.w	r3, [r0, #360]	; 0x168
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     7d4:	6583      	str	r3, [r0, #88]	; 0x58
     7d6:	bd38      	pop	{r3, r4, r5, pc}

000007d8 <ms_set_dir>:
}

/* dir = {0, 1} */
void ms_set_dir(int dir, ms_motor_t motor_nr){
	
	switch (motor_nr)
     7d8:	b111      	cbz	r1, 7e0 <ms_set_dir+0x8>
     7da:	2901      	cmp	r1, #1
     7dc:	d13d      	bne.n	85a <ms_set_dir+0x82>
     7de:	e01e      	b.n	81e <ms_set_dir+0x46>
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
     7e0:	b170      	cbz	r0, 800 <ms_set_dir+0x28>
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     7e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     7e6:	f2c4 000e 	movt	r0, #16398	; 0x400e
     7ea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     7ee:	6542      	str	r2, [r0, #84]	; 0x54
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     7f0:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
     7f4:	f2c4 010e 	movt	r1, #16398	; 0x400e
     7f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7fc:	658b      	str	r3, [r1, #88]	; 0x58
     7fe:	4770      	bx	lr
     800:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     804:	f2c4 000e 	movt	r0, #16398	; 0x400e
     808:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     80c:	6582      	str	r2, [r0, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     80e:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
     812:	f2c4 010e 	movt	r1, #16398	; 0x400e
     816:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     81a:	654b      	str	r3, [r1, #84]	; 0x54
     81c:	4770      	bx	lr
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
     81e:	b170      	cbz	r0, 83e <ms_set_dir+0x66>
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     820:	f44f 5090 	mov.w	r0, #4608	; 0x1200
     824:	f2c4 000e 	movt	r0, #16398	; 0x400e
     828:	f44f 6200 	mov.w	r2, #2048	; 0x800
     82c:	6542      	str	r2, [r0, #84]	; 0x54
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     82e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     832:	f2c4 010e 	movt	r1, #16398	; 0x400e
     836:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
     83a:	658b      	str	r3, [r1, #88]	; 0x58
     83c:	4770      	bx	lr
     83e:	f44f 5090 	mov.w	r0, #4608	; 0x1200
     842:	f2c4 000e 	movt	r0, #16398	; 0x400e
     846:	f44f 6200 	mov.w	r2, #2048	; 0x800
     84a:	6582      	str	r2, [r0, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     84c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     850:	f2c4 010e 	movt	r1, #16398	; 0x400e
     854:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
     858:	654b      	str	r3, [r1, #84]	; 0x54
     85a:	4770      	bx	lr

0000085c <osc_priv_enable_rcfast>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     85c:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     860:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     862:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     866:	f240 0344 	movw	r3, #68	; 0x44
     86a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     86e:	f04f 0200 	mov.w	r2, #0
     872:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
	// Let FCD and calibration value by default
	temp = SCIF->SCIF_RCFASTCFG;
     874:	f44f 6300 	mov.w	r3, #2048	; 0x800
     878:	f2c4 030e 	movt	r3, #16398	; 0x400e
     87c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
	// Clear previous FRANGE value
	temp &= ~SCIF_RCFASTCFG_FRANGE_Msk;

	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
     87e:	f04f 0148 	mov.w	r1, #72	; 0x48
     882:	f6ca 2100 	movt	r1, #43520	; 0xaa00
     886:	6199      	str	r1, [r3, #24]

	flags = cpu_irq_save();
	// Let FCD and calibration value by default
	temp = SCIF->SCIF_RCFASTCFG;
	// Clear previous FRANGE value
	temp &= ~SCIF_RCFASTCFG_FRANGE_Msk;
     888:	f422 7240 	bic.w	r2, r2, #768	; 0x300

	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_RCFASTCFG - (uint32_t)SCIF);
	SCIF->SCIF_RCFASTCFG = temp | SCIF_RCFASTCFG_EN
		| SCIF_RCFASTCFG_FRANGE(CONFIG_RCFAST_FRANGE);
     88c:	f442 7100 	orr.w	r1, r2, #512	; 0x200
     890:	f041 0201 	orr.w	r2, r1, #1
	// Clear previous FRANGE value
	temp &= ~SCIF_RCFASTCFG_FRANGE_Msk;

	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_RCFASTCFG - (uint32_t)SCIF);
	SCIF->SCIF_RCFASTCFG = temp | SCIF_RCFASTCFG_EN
     894:	649a      	str	r2, [r3, #72]	; 0x48
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     896:	b948      	cbnz	r0, 8ac <osc_priv_enable_rcfast+0x50>
		cpu_irq_enable();
     898:	f240 0044 	movw	r0, #68	; 0x44
     89c:	f2c2 0000 	movt	r0, #8192	; 0x2000
     8a0:	f04f 0301 	mov.w	r3, #1
     8a4:	7003      	strb	r3, [r0, #0]
     8a6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     8aa:	b662      	cpsie	i
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
     8b0:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     8b2:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     8b6:	b672      	cpsid	i
     8b8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     8bc:	f240 0344 	movw	r3, #68	; 0x44
     8c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     8c4:	f04f 0200 	mov.w	r2, #0
     8c8:	701a      	strb	r2, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
     8ca:	f04f 0320 	mov.w	r3, #32
     8ce:	f2c4 030e 	movt	r3, #16398	; 0x400e
     8d2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	mask |= 1U << module_index;
     8d6:	f04f 0501 	mov.w	r5, #1
     8da:	fa05 f101 	lsl.w	r1, r5, r1
     8de:	4311      	orrs	r1, r2
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
     8e0:	f100 0208 	add.w	r2, r0, #8
     8e4:	ea4f 6502 	mov.w	r5, r2, lsl #24
     8e8:	ea4f 5295 	mov.w	r2, r5, lsr #22
	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask |= 1U << module_index;
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
     8ec:	f042 452a 	orr.w	r5, r2, #2852126720	; 0xaa000000
     8f0:	f04f 0200 	mov.w	r2, #0
     8f4:	f2c4 020e 	movt	r2, #16398	; 0x400e
     8f8:	6595      	str	r5, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
     8fa:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     8fe:	b94c      	cbnz	r4, 914 <sysclk_priv_enable_module+0x64>
		cpu_irq_enable();
     900:	f240 0044 	movw	r0, #68	; 0x44
     904:	f2c2 0000 	movt	r0, #8192	; 0x2000
     908:	f04f 0301 	mov.w	r3, #1
     90c:	7003      	strb	r3, [r0, #0]
     90e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     912:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
     914:	bc30      	pop	{r4, r5}
     916:	4770      	bx	lr

00000918 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(uint32_t bus_id, uint32_t module_index)
{
     918:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     91a:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     91e:	b672      	cpsid	i
     920:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     924:	f240 0344 	movw	r3, #68	; 0x44
     928:	f2c2 0300 	movt	r3, #8192	; 0x2000
     92c:	f04f 0200 	mov.w	r2, #0
     930:	701a      	strb	r2, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
     932:	f04f 0320 	mov.w	r3, #32
     936:	f2c4 030e 	movt	r3, #16398	; 0x400e
     93a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	mask &= ~(1U << module_index);
     93e:	f04f 0501 	mov.w	r5, #1
     942:	fa05 f101 	lsl.w	r1, r5, r1
     946:	ea22 0101 	bic.w	r1, r2, r1
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
     94a:	f100 0208 	add.w	r2, r0, #8
     94e:	ea4f 6502 	mov.w	r5, r2, lsl #24
     952:	ea4f 5295 	mov.w	r2, r5, lsr #22
	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask &= ~(1U << module_index);
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
     956:	f042 452a 	orr.w	r5, r2, #2852126720	; 0xaa000000
     95a:	f04f 0200 	mov.w	r2, #0
     95e:	f2c4 020e 	movt	r2, #16398	; 0x400e
     962:	6595      	str	r5, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
     964:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     968:	b94c      	cbnz	r4, 97e <sysclk_priv_disable_module+0x66>
		cpu_irq_enable();
     96a:	f240 0044 	movw	r0, #68	; 0x44
     96e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     972:	f04f 0301 	mov.w	r3, #1
     976:	7003      	strb	r3, [r0, #0]
     978:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     97c:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
     97e:	bc30      	pop	{r4, r5}
     980:	4770      	bx	lr
     982:	bf00      	nop

00000984 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
     984:	b538      	push	{r3, r4, r5, lr}
     986:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     988:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     98c:	b672      	cpsid	i
     98e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     992:	f240 0344 	movw	r3, #68	; 0x44
     996:	f2c2 0300 	movt	r3, #8192	; 0x2000
     99a:	f04f 0200 	mov.w	r2, #0
     99e:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
     9a0:	4610      	mov	r0, r2
     9a2:	f2c4 000e 	movt	r0, #16398	; 0x400e
     9a6:	6a81      	ldr	r1, [r0, #40]	; 0x28
     9a8:	b941      	cbnz	r1, 9bc <sysclk_enable_pba_module+0x38>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     9aa:	f04f 0001 	mov.w	r0, #1
     9ae:	f04f 0105 	mov.w	r1, #5
     9b2:	f640 03b1 	movw	r3, #2225	; 0x8b1
     9b6:	f2c0 0300 	movt	r3, #0
     9ba:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     9bc:	b94d      	cbnz	r5, 9d2 <sysclk_enable_pba_module+0x4e>
		cpu_irq_enable();
     9be:	f240 0044 	movw	r0, #68	; 0x44
     9c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
     9c6:	f04f 0201 	mov.w	r2, #1
     9ca:	7002      	strb	r2, [r0, #0]
     9cc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     9d0:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
     9d2:	f04f 0002 	mov.w	r0, #2
     9d6:	4621      	mov	r1, r4
     9d8:	f640 03b1 	movw	r3, #2225	; 0x8b1
     9dc:	f2c0 0300 	movt	r3, #0
     9e0:	4798      	blx	r3
     9e2:	bd38      	pop	{r3, r4, r5, pc}

000009e4 <sysclk_disable_pba_module>:
/**
 * \brief Disable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_disable_pba_module(uint32_t module_index)
{
     9e4:	b510      	push	{r4, lr}
     9e6:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBA, module_index);
     9e8:	f04f 0002 	mov.w	r0, #2
     9ec:	f640 1319 	movw	r3, #2329	; 0x919
     9f0:	f2c0 0300 	movt	r3, #0
     9f4:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     9f6:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     9fa:	b672      	cpsid	i
     9fc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     a00:	f240 0044 	movw	r0, #68	; 0x44
     a04:	f2c2 0000 	movt	r0, #8192	; 0x2000
     a08:	f04f 0200 	mov.w	r2, #0
     a0c:	7002      	strb	r2, [r0, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
     a0e:	4611      	mov	r1, r2
     a10:	f2c4 010e 	movt	r1, #16398	; 0x400e
     a14:	6a8b      	ldr	r3, [r1, #40]	; 0x28
     a16:	b943      	cbnz	r3, a2a <sysclk_disable_pba_module+0x46>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
     a18:	f04f 0001 	mov.w	r0, #1
     a1c:	f04f 0105 	mov.w	r1, #5
     a20:	f640 1219 	movw	r2, #2329	; 0x919
     a24:	f2c0 0200 	movt	r2, #0
     a28:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     a2a:	b94c      	cbnz	r4, a40 <sysclk_disable_pba_module+0x5c>
		cpu_irq_enable();
     a2c:	f240 0044 	movw	r0, #68	; 0x44
     a30:	f2c2 0000 	movt	r0, #8192	; 0x2000
     a34:	f04f 0101 	mov.w	r1, #1
     a38:	7001      	strb	r1, [r0, #0]
     a3a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     a3e:	b662      	cpsie	i
     a40:	bd10      	pop	{r4, pc}
     a42:	bf00      	nop

00000a44 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
     a44:	b538      	push	{r3, r4, r5, lr}
     a46:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     a48:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     a4c:	b672      	cpsid	i
     a4e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     a52:	f240 0344 	movw	r3, #68	; 0x44
     a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a5a:	f04f 0200 	mov.w	r2, #0
     a5e:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
     a60:	4610      	mov	r0, r2
     a62:	f2c4 000e 	movt	r0, #16398	; 0x400e
     a66:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
     a68:	b941      	cbnz	r1, a7c <sysclk_enable_pbb_module+0x38>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     a6a:	f04f 0001 	mov.w	r0, #1
     a6e:	f04f 0106 	mov.w	r1, #6
     a72:	f640 03b1 	movw	r3, #2225	; 0x8b1
     a76:	f2c0 0300 	movt	r3, #0
     a7a:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     a7c:	b94d      	cbnz	r5, a92 <sysclk_enable_pbb_module+0x4e>
		cpu_irq_enable();
     a7e:	f240 0044 	movw	r0, #68	; 0x44
     a82:	f2c2 0000 	movt	r0, #8192	; 0x2000
     a86:	f04f 0201 	mov.w	r2, #1
     a8a:	7002      	strb	r2, [r0, #0]
     a8c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     a90:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
     a92:	f04f 0003 	mov.w	r0, #3
     a96:	4621      	mov	r1, r4
     a98:	f640 03b1 	movw	r3, #2225	; 0x8b1
     a9c:	f2c0 0300 	movt	r3, #0
     aa0:	4798      	blx	r3
     aa2:	bd38      	pop	{r3, r4, r5, pc}

00000aa4 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(uint32_t module_index)
{
     aa4:	b510      	push	{r4, lr}
     aa6:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBB, module_index);
     aa8:	f04f 0003 	mov.w	r0, #3
     aac:	f640 1319 	movw	r3, #2329	; 0x919
     ab0:	f2c0 0300 	movt	r3, #0
     ab4:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     ab6:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     aba:	b672      	cpsid	i
     abc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     ac0:	f240 0044 	movw	r0, #68	; 0x44
     ac4:	f2c2 0000 	movt	r0, #8192	; 0x2000
     ac8:	f04f 0200 	mov.w	r2, #0
     acc:	7002      	strb	r2, [r0, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
     ace:	4611      	mov	r1, r2
     ad0:	f2c4 010e 	movt	r1, #16398	; 0x400e
     ad4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     ad6:	b943      	cbnz	r3, aea <sysclk_disable_pbb_module+0x46>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
     ad8:	f04f 0001 	mov.w	r0, #1
     adc:	f04f 0106 	mov.w	r1, #6
     ae0:	f640 1219 	movw	r2, #2329	; 0x919
     ae4:	f2c0 0200 	movt	r2, #0
     ae8:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     aea:	b94c      	cbnz	r4, b00 <sysclk_disable_pbb_module+0x5c>
		cpu_irq_enable();
     aec:	f240 0044 	movw	r0, #68	; 0x44
     af0:	f2c2 0000 	movt	r0, #8192	; 0x2000
     af4:	f04f 0101 	mov.w	r1, #1
     af8:	7001      	strb	r1, [r0, #0]
     afa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     afe:	b662      	cpsie	i
     b00:	bd10      	pop	{r4, pc}
     b02:	bf00      	nop

00000b04 <sysclk_get_peripheral_bus_hz>:
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
	/* Fallthroughs intended for modules sharing the same peripheral bus. */
	switch ((uintptr_t)module) {
     b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     b08:	f2c4 0307 	movt	r3, #16391	; 0x4007
     b0c:	4298      	cmp	r0, r3
     b0e:	f000 816f 	beq.w	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     b12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     b16:	f2c4 0107 	movt	r1, #16391	; 0x4007
     b1a:	4288      	cmp	r0, r1
     b1c:	f200 80bb 	bhi.w	c96 <sysclk_get_peripheral_bus_hz+0x192>
     b20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     b24:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b28:	4290      	cmp	r0, r2
     b2a:	f000 8161 	beq.w	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     b32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b36:	4298      	cmp	r0, r3
     b38:	d851      	bhi.n	bde <sysclk_get_peripheral_bus_hz+0xda>
     b3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     b3e:	f2c4 0101 	movt	r1, #16385	; 0x4001
     b42:	4288      	cmp	r0, r1
     b44:	f000 8154 	beq.w	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     b48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     b4c:	f2c4 0201 	movt	r2, #16385	; 0x4001
     b50:	4290      	cmp	r0, r2
     b52:	d820      	bhi.n	b96 <sysclk_get_peripheral_bus_hz+0x92>
     b54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     b58:	f2c4 0300 	movt	r3, #16384	; 0x4000
     b5c:	4298      	cmp	r0, r3
     b5e:	f000 8147 	beq.w	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     b62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     b66:	f2c4 0100 	movt	r1, #16384	; 0x4000
     b6a:	4288      	cmp	r0, r1
     b6c:	d804      	bhi.n	b78 <sysclk_get_peripheral_bus_hz+0x74>
     b6e:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
     b72:	f040 8142 	bne.w	dfa <sysclk_get_peripheral_bus_hz+0x2f6>
     b76:	e13b      	b.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     b78:	f04f 0200 	mov.w	r2, #0
     b7c:	f2c4 0201 	movt	r2, #16385	; 0x4001
     b80:	4290      	cmp	r0, r2
     b82:	f000 8135 	beq.w	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     b86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
     b8a:	f2c4 0301 	movt	r3, #16385	; 0x4001
     b8e:	4298      	cmp	r0, r3
     b90:	f040 8133 	bne.w	dfa <sysclk_get_peripheral_bus_hz+0x2f6>
     b94:	e12c      	b.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     b96:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     b9a:	f2c4 0101 	movt	r1, #16385	; 0x4001
     b9e:	4288      	cmp	r0, r1
     ba0:	f000 8126 	beq.w	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     ba4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
     ba8:	f2c4 0201 	movt	r2, #16385	; 0x4001
     bac:	4290      	cmp	r0, r2
     bae:	d807      	bhi.n	bc0 <sysclk_get_peripheral_bus_hz+0xbc>
     bb0:	f44f 4304 	mov.w	r3, #33792	; 0x8400
     bb4:	f2c4 0301 	movt	r3, #16385	; 0x4001
     bb8:	4298      	cmp	r0, r3
     bba:	f040 811e 	bne.w	dfa <sysclk_get_peripheral_bus_hz+0x2f6>
     bbe:	e117      	b.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     bc0:	f44f 4144 	mov.w	r1, #50176	; 0xc400
     bc4:	f2c4 0101 	movt	r1, #16385	; 0x4001
     bc8:	4288      	cmp	r0, r1
     bca:	f000 8111 	beq.w	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     bce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     bd2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     bd6:	4290      	cmp	r0, r2
     bd8:	f040 810f 	bne.w	dfa <sysclk_get_peripheral_bus_hz+0x2f6>
     bdc:	e108      	b.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     bde:	f04f 0300 	mov.w	r3, #0
     be2:	f2c4 0304 	movt	r3, #16388	; 0x4004
     be6:	4298      	cmp	r0, r3
     be8:	f000 8102 	beq.w	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     bec:	f04f 0100 	mov.w	r1, #0
     bf0:	f2c4 0104 	movt	r1, #16388	; 0x4004
     bf4:	4288      	cmp	r0, r1
     bf6:	d823      	bhi.n	c40 <sysclk_get_peripheral_bus_hz+0x13c>
     bf8:	f04f 0200 	mov.w	r2, #0
     bfc:	f2c4 0203 	movt	r2, #16387	; 0x4003
     c00:	4290      	cmp	r0, r2
     c02:	f000 80f5 	beq.w	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     c06:	f04f 0300 	mov.w	r3, #0
     c0a:	f2c4 0303 	movt	r3, #16387	; 0x4003
     c0e:	4298      	cmp	r0, r3
     c10:	d807      	bhi.n	c22 <sysclk_get_peripheral_bus_hz+0x11e>
     c12:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     c16:	f2c4 0102 	movt	r1, #16386	; 0x4002
     c1a:	4288      	cmp	r0, r1
     c1c:	f040 80ed 	bne.w	dfa <sysclk_get_peripheral_bus_hz+0x2f6>
     c20:	e0e6      	b.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     c22:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     c26:	f2c4 0203 	movt	r2, #16387	; 0x4003
     c2a:	4290      	cmp	r0, r2
     c2c:	f000 80e0 	beq.w	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     c30:	f44f 4340 	mov.w	r3, #49152	; 0xc000
     c34:	f2c4 0303 	movt	r3, #16387	; 0x4003
     c38:	4298      	cmp	r0, r3
     c3a:	f040 80de 	bne.w	dfa <sysclk_get_peripheral_bus_hz+0x2f6>
     c3e:	e0d7      	b.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     c40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     c44:	f2c4 0106 	movt	r1, #16390	; 0x4006
     c48:	4288      	cmp	r0, r1
     c4a:	f000 80d1 	beq.w	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     c4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     c52:	f2c4 0206 	movt	r2, #16390	; 0x4006
     c56:	4290      	cmp	r0, r2
     c58:	d80e      	bhi.n	c78 <sysclk_get_peripheral_bus_hz+0x174>
     c5a:	f04f 0300 	mov.w	r3, #0
     c5e:	f2c4 0306 	movt	r3, #16390	; 0x4006
     c62:	4298      	cmp	r0, r3
     c64:	f000 80c4 	beq.w	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     c68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     c6c:	f2c4 0106 	movt	r1, #16390	; 0x4006
     c70:	4288      	cmp	r0, r1
     c72:	f040 80c2 	bne.w	dfa <sysclk_get_peripheral_bus_hz+0x2f6>
     c76:	e0bb      	b.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     c78:	f44f 4240 	mov.w	r2, #49152	; 0xc000
     c7c:	f2c4 0206 	movt	r2, #16390	; 0x4006
     c80:	4290      	cmp	r0, r2
     c82:	f000 80b5 	beq.w	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     c86:	f04f 0300 	mov.w	r3, #0
     c8a:	f2c4 0307 	movt	r3, #16391	; 0x4007
     c8e:	4298      	cmp	r0, r3
     c90:	f040 80b3 	bne.w	dfa <sysclk_get_peripheral_bus_hz+0x2f6>
     c94:	e0ac      	b.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     c96:	f04f 0100 	mov.w	r1, #0
     c9a:	f2c4 010e 	movt	r1, #16398	; 0x400e
     c9e:	4288      	cmp	r0, r1
     ca0:	f000 80a6 	beq.w	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     ca4:	f04f 0200 	mov.w	r2, #0
     ca8:	f2c4 020e 	movt	r2, #16398	; 0x400e
     cac:	4290      	cmp	r0, r2
     cae:	d84e      	bhi.n	d4e <sysclk_get_peripheral_bus_hz+0x24a>
     cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cb4:	f2c4 030a 	movt	r3, #16394	; 0x400a
     cb8:	4298      	cmp	r0, r3
     cba:	f000 8099 	beq.w	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     cbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     cc2:	f2c4 010a 	movt	r1, #16394	; 0x400a
     cc6:	4288      	cmp	r0, r1
     cc8:	d821      	bhi.n	d0e <sysclk_get_peripheral_bus_hz+0x20a>
     cca:	f04f 0200 	mov.w	r2, #0
     cce:	f2c4 0208 	movt	r2, #16392	; 0x4008
     cd2:	4290      	cmp	r0, r2
     cd4:	f000 808c 	beq.w	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     cd8:	f04f 0300 	mov.w	r3, #0
     cdc:	f2c4 0308 	movt	r3, #16392	; 0x4008
     ce0:	4298      	cmp	r0, r3
     ce2:	d807      	bhi.n	cf4 <sysclk_get_peripheral_bus_hz+0x1f0>
     ce4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     ce8:	f2c4 0107 	movt	r1, #16391	; 0x4007
     cec:	4288      	cmp	r0, r1
     cee:	f040 8084 	bne.w	dfa <sysclk_get_peripheral_bus_hz+0x2f6>
     cf2:	e07d      	b.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     cf4:	f04f 0200 	mov.w	r2, #0
     cf8:	f2c4 020a 	movt	r2, #16394	; 0x400a
     cfc:	4290      	cmp	r0, r2
     cfe:	d077      	beq.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
     d04:	f2c4 030a 	movt	r3, #16394	; 0x400a
     d08:	4298      	cmp	r0, r3
     d0a:	d176      	bne.n	dfa <sysclk_get_peripheral_bus_hz+0x2f6>
     d0c:	e070      	b.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     d0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     d12:	f2c4 010a 	movt	r1, #16394	; 0x400a
     d16:	4288      	cmp	r0, r1
     d18:	d06a      	beq.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     d1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     d1e:	f2c4 020a 	movt	r2, #16394	; 0x400a
     d22:	4290      	cmp	r0, r2
     d24:	d806      	bhi.n	d34 <sysclk_get_peripheral_bus_hz+0x230>
     d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     d2a:	f2c4 030a 	movt	r3, #16394	; 0x400a
     d2e:	4298      	cmp	r0, r3
     d30:	d163      	bne.n	dfa <sysclk_get_peripheral_bus_hz+0x2f6>
     d32:	e05d      	b.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     d34:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
     d38:	f2c4 010a 	movt	r1, #16394	; 0x400a
     d3c:	4288      	cmp	r0, r1
     d3e:	d057      	beq.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     d40:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
     d44:	f2c4 020a 	movt	r2, #16394	; 0x400a
     d48:	4290      	cmp	r0, r2
     d4a:	d156      	bne.n	dfa <sysclk_get_peripheral_bus_hz+0x2f6>
     d4c:	e050      	b.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     d4e:	f04f 0300 	mov.w	r3, #0
     d52:	f2c4 030f 	movt	r3, #16399	; 0x400f
     d56:	4298      	cmp	r0, r3
     d58:	d04a      	beq.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     d5a:	f04f 0100 	mov.w	r1, #0
     d5e:	f2c4 010f 	movt	r1, #16399	; 0x400f
     d62:	4288      	cmp	r0, r1
     d64:	d81f      	bhi.n	da6 <sysclk_get_peripheral_bus_hz+0x2a2>
     d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
     d6a:	f2c4 020e 	movt	r2, #16398	; 0x400e
     d6e:	4290      	cmp	r0, r2
     d70:	d03e      	beq.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     d72:	f44f 6300 	mov.w	r3, #2048	; 0x800
     d76:	f2c4 030e 	movt	r3, #16398	; 0x400e
     d7a:	4298      	cmp	r0, r3
     d7c:	d806      	bhi.n	d8c <sysclk_get_peripheral_bus_hz+0x288>
     d7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     d82:	f2c4 010e 	movt	r1, #16398	; 0x400e
     d86:	4288      	cmp	r0, r1
     d88:	d137      	bne.n	dfa <sysclk_get_peripheral_bus_hz+0x2f6>
     d8a:	e031      	b.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     d8c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
     d90:	f2c4 020e 	movt	r2, #16398	; 0x400e
     d94:	4290      	cmp	r0, r2
     d96:	d02b      	beq.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d9c:	f2c4 030e 	movt	r3, #16398	; 0x400e
     da0:	4298      	cmp	r0, r3
     da2:	d12a      	bne.n	dfa <sysclk_get_peripheral_bus_hz+0x2f6>
     da4:	e024      	b.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     da6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
     daa:	f2c4 010f 	movt	r1, #16399	; 0x400f
     dae:	4288      	cmp	r0, r1
     db0:	d01e      	beq.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     db2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
     db6:	f2c4 020f 	movt	r2, #16399	; 0x400f
     dba:	4290      	cmp	r0, r2
     dbc:	d80c      	bhi.n	dd8 <sysclk_get_peripheral_bus_hz+0x2d4>
     dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
     dc2:	f2c4 030f 	movt	r3, #16399	; 0x400f
     dc6:	4298      	cmp	r0, r3
     dc8:	d012      	beq.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     dca:	f44f 6100 	mov.w	r1, #2048	; 0x800
     dce:	f2c4 010f 	movt	r1, #16399	; 0x400f
     dd2:	4288      	cmp	r0, r1
     dd4:	d111      	bne.n	dfa <sysclk_get_peripheral_bus_hz+0x2f6>
     dd6:	e00b      	b.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     dd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ddc:	f2c4 020f 	movt	r2, #16399	; 0x400f
     de0:	4290      	cmp	r0, r2
     de2:	d005      	beq.n	df0 <sysclk_get_peripheral_bus_hz+0x2ec>
     de4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
     de8:	f2c4 030f 	movt	r3, #16399	; 0x400f
     dec:	4298      	cmp	r0, r3
     dee:	d104      	bne.n	dfa <sysclk_get_peripheral_bus_hz+0x2f6>
	case PARC_ADDR:
	case CATB_ADDR:
	case TWIM2_ADDR:
	case TWIM3_ADDR:
	case LCDCA_ADDR:
		return sysclk_get_pba_hz();
     df0:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
     df4:	f2c0 00b7 	movt	r0, #183	; 0xb7
     df8:	4770      	bx	lr
	case PICOUART_ADDR:
		return sysclk_get_pbd_hz();

	default:
		Assert(false);
		return 0;
     dfa:	f04f 0000 	mov.w	r0, #0
	}
}
     dfe:	4770      	bx	lr

00000e00 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
     e00:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
     e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     e06:	f2c4 0307 	movt	r3, #16391	; 0x4007
     e0a:	4298      	cmp	r0, r3
     e0c:	f000 827f 	beq.w	130e <__stack_size__+0x30e>
     e10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     e14:	f2c4 0107 	movt	r1, #16391	; 0x4007
     e18:	4288      	cmp	r0, r1
     e1a:	f200 80bb 	bhi.w	f94 <sysclk_enable_peripheral_clock+0x194>
     e1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     e22:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e26:	4290      	cmp	r0, r2
     e28:	f000 81f2 	beq.w	1210 <__stack_size__+0x210>
     e2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     e30:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e34:	4298      	cmp	r0, r3
     e36:	d851      	bhi.n	edc <sysclk_enable_peripheral_clock+0xdc>
     e38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     e3c:	f2c4 0101 	movt	r1, #16385	; 0x4001
     e40:	4288      	cmp	r0, r1
     e42:	f000 81b0 	beq.w	11a6 <__stack_size__+0x1a6>
     e46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     e4a:	f2c4 0201 	movt	r2, #16385	; 0x4001
     e4e:	4290      	cmp	r0, r2
     e50:	d820      	bhi.n	e94 <sysclk_enable_peripheral_clock+0x94>
     e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     e56:	f2c4 0300 	movt	r3, #16384	; 0x4000
     e5a:	4298      	cmp	r0, r3
     e5c:	f000 8171 	beq.w	1142 <__stack_size__+0x142>
     e60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     e64:	f2c4 0100 	movt	r1, #16384	; 0x4000
     e68:	4288      	cmp	r0, r1
     e6a:	d804      	bhi.n	e76 <sysclk_enable_peripheral_clock+0x76>
     e6c:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
     e70:	f040 8334 	bne.w	14dc <__stack_size__+0x4dc>
     e74:	e15d      	b.n	1132 <__stack_size__+0x132>
     e76:	f04f 0300 	mov.w	r3, #0
     e7a:	f2c4 0301 	movt	r3, #16385	; 0x4001
     e7e:	4298      	cmp	r0, r3
     e80:	f000 8167 	beq.w	1152 <__stack_size__+0x152>
     e84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     e88:	f2c4 0101 	movt	r1, #16385	; 0x4001
     e8c:	4288      	cmp	r0, r1
     e8e:	f040 8325 	bne.w	14dc <__stack_size__+0x4dc>
     e92:	e173      	b.n	117c <__stack_size__+0x17c>
     e94:	f44f 4340 	mov.w	r3, #49152	; 0xc000
     e98:	f2c4 0301 	movt	r3, #16385	; 0x4001
     e9c:	4298      	cmp	r0, r3
     e9e:	f000 8192 	beq.w	11c6 <__stack_size__+0x1c6>
     ea2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
     ea6:	f2c4 0201 	movt	r2, #16385	; 0x4001
     eaa:	4290      	cmp	r0, r2
     eac:	d807      	bhi.n	ebe <sysclk_enable_peripheral_clock+0xbe>
     eae:	f44f 4104 	mov.w	r1, #33792	; 0x8400
     eb2:	f2c4 0101 	movt	r1, #16385	; 0x4001
     eb6:	4288      	cmp	r0, r1
     eb8:	f040 8310 	bne.w	14dc <__stack_size__+0x4dc>
     ebc:	e17b      	b.n	11b6 <__stack_size__+0x1b6>
     ebe:	f44f 4244 	mov.w	r2, #50176	; 0xc400
     ec2:	f2c4 0201 	movt	r2, #16385	; 0x4001
     ec6:	4290      	cmp	r0, r2
     ec8:	f000 8185 	beq.w	11d6 <__stack_size__+0x1d6>
     ecc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     ed0:	f2c4 0102 	movt	r1, #16386	; 0x4002
     ed4:	4288      	cmp	r0, r1
     ed6:	f040 8301 	bne.w	14dc <__stack_size__+0x4dc>
     eda:	e184      	b.n	11e6 <__stack_size__+0x1e6>
     edc:	f04f 0200 	mov.w	r2, #0
     ee0:	f2c4 0204 	movt	r2, #16388	; 0x4004
     ee4:	4290      	cmp	r0, r2
     ee6:	f000 81e2 	beq.w	12ae <__stack_size__+0x2ae>
     eea:	f04f 0100 	mov.w	r1, #0
     eee:	f2c4 0104 	movt	r1, #16388	; 0x4004
     ef2:	4288      	cmp	r0, r1
     ef4:	d823      	bhi.n	f3e <sysclk_enable_peripheral_clock+0x13e>
     ef6:	f04f 0300 	mov.w	r3, #0
     efa:	f2c4 0303 	movt	r3, #16387	; 0x4003
     efe:	4298      	cmp	r0, r3
     f00:	f000 81b0 	beq.w	1264 <__stack_size__+0x264>
     f04:	f04f 0200 	mov.w	r2, #0
     f08:	f2c4 0203 	movt	r2, #16387	; 0x4003
     f0c:	4290      	cmp	r0, r2
     f0e:	d807      	bhi.n	f20 <sysclk_enable_peripheral_clock+0x120>
     f10:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     f14:	f2c4 0102 	movt	r1, #16386	; 0x4002
     f18:	4288      	cmp	r0, r1
     f1a:	f040 82df 	bne.w	14dc <__stack_size__+0x4dc>
     f1e:	e18c      	b.n	123a <__stack_size__+0x23a>
     f20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     f24:	f2c4 0203 	movt	r2, #16387	; 0x4003
     f28:	4290      	cmp	r0, r2
     f2a:	f000 81b0 	beq.w	128e <__stack_size__+0x28e>
     f2e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     f32:	f2c4 0103 	movt	r1, #16387	; 0x4003
     f36:	4288      	cmp	r0, r1
     f38:	f040 82d0 	bne.w	14dc <__stack_size__+0x4dc>
     f3c:	e1af      	b.n	129e <__stack_size__+0x29e>
     f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     f42:	f2c4 0306 	movt	r3, #16390	; 0x4006
     f46:	4298      	cmp	r0, r3
     f48:	f000 81c9 	beq.w	12de <__stack_size__+0x2de>
     f4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     f50:	f2c4 0106 	movt	r1, #16390	; 0x4006
     f54:	4288      	cmp	r0, r1
     f56:	d80e      	bhi.n	f76 <sysclk_enable_peripheral_clock+0x176>
     f58:	f04f 0200 	mov.w	r2, #0
     f5c:	f2c4 0206 	movt	r2, #16390	; 0x4006
     f60:	4290      	cmp	r0, r2
     f62:	f000 81ac 	beq.w	12be <__stack_size__+0x2be>
     f66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
     f6a:	f2c4 0306 	movt	r3, #16390	; 0x4006
     f6e:	4298      	cmp	r0, r3
     f70:	f040 82b4 	bne.w	14dc <__stack_size__+0x4dc>
     f74:	e1ab      	b.n	12ce <__stack_size__+0x2ce>
     f76:	f44f 4340 	mov.w	r3, #49152	; 0xc000
     f7a:	f2c4 0306 	movt	r3, #16390	; 0x4006
     f7e:	4298      	cmp	r0, r3
     f80:	f000 81b5 	beq.w	12ee <__stack_size__+0x2ee>
     f84:	f04f 0100 	mov.w	r1, #0
     f88:	f2c4 0107 	movt	r1, #16391	; 0x4007
     f8c:	4288      	cmp	r0, r1
     f8e:	f040 82a5 	bne.w	14dc <__stack_size__+0x4dc>
     f92:	e1b4      	b.n	12fe <__stack_size__+0x2fe>
     f94:	f04f 0100 	mov.w	r1, #0
     f98:	f2c4 010e 	movt	r1, #16398	; 0x400e
     f9c:	4288      	cmp	r0, r1
     f9e:	f000 8232 	beq.w	1406 <__stack_size__+0x406>
     fa2:	f04f 0300 	mov.w	r3, #0
     fa6:	f2c4 030e 	movt	r3, #16398	; 0x400e
     faa:	4298      	cmp	r0, r3
     fac:	d85b      	bhi.n	1066 <__stack_size__+0x66>
     fae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     fb2:	f2c4 020a 	movt	r2, #16394	; 0x400a
     fb6:	4290      	cmp	r0, r2
     fb8:	f000 81e2 	beq.w	1380 <__stack_size__+0x380>
     fbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     fc0:	f2c4 010a 	movt	r1, #16394	; 0x400a
     fc4:	4288      	cmp	r0, r1
     fc6:	d823      	bhi.n	1010 <__stack_size__+0x10>
     fc8:	f04f 0300 	mov.w	r3, #0
     fcc:	f2c4 0308 	movt	r3, #16392	; 0x4008
     fd0:	4298      	cmp	r0, r3
     fd2:	f000 81ac 	beq.w	132e <__stack_size__+0x32e>
     fd6:	f04f 0200 	mov.w	r2, #0
     fda:	f2c4 0208 	movt	r2, #16392	; 0x4008
     fde:	4290      	cmp	r0, r2
     fe0:	d807      	bhi.n	ff2 <sysclk_enable_peripheral_clock+0x1f2>
     fe2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     fe6:	f2c4 0107 	movt	r1, #16391	; 0x4007
     fea:	4288      	cmp	r0, r1
     fec:	f040 8276 	bne.w	14dc <__stack_size__+0x4dc>
     ff0:	e195      	b.n	131e <__stack_size__+0x31e>
     ff2:	f04f 0200 	mov.w	r2, #0
     ff6:	f2c4 020a 	movt	r2, #16394	; 0x400a
     ffa:	4290      	cmp	r0, r2
     ffc:	f000 819f 	beq.w	133e <__stack_size__+0x33e>
    1000:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1004:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1008:	4288      	cmp	r0, r1
    100a:	f040 8267 	bne.w	14dc <__stack_size__+0x4dc>
    100e:	e1a6      	b.n	135e <__stack_size__+0x35e>
    1010:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1014:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1018:	4298      	cmp	r0, r3
    101a:	f000 81db 	beq.w	13d4 <__stack_size__+0x3d4>
    101e:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    1022:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1026:	4288      	cmp	r0, r1
    1028:	d80e      	bhi.n	1048 <__stack_size__+0x48>
    102a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    102e:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1032:	4290      	cmp	r0, r2
    1034:	f000 81ac 	beq.w	1390 <__stack_size__+0x390>
    1038:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    103c:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1040:	4298      	cmp	r0, r3
    1042:	f040 824b 	bne.w	14dc <__stack_size__+0x4dc>
    1046:	e1b4      	b.n	13b2 <__stack_size__+0x3b2>
    1048:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
    104c:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1050:	4288      	cmp	r0, r1
    1052:	f000 81d0 	beq.w	13f6 <__stack_size__+0x3f6>
    1056:	f04f 0300 	mov.w	r3, #0
    105a:	f2c4 030b 	movt	r3, #16395	; 0x400b
    105e:	4298      	cmp	r0, r3
    1060:	f040 823c 	bne.w	14dc <__stack_size__+0x4dc>
    1064:	e05b      	b.n	111e <__stack_size__+0x11e>
    1066:	f04f 0300 	mov.w	r3, #0
    106a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    106e:	4298      	cmp	r0, r3
    1070:	f000 81fa 	beq.w	1468 <__stack_size__+0x468>
    1074:	f04f 0200 	mov.w	r2, #0
    1078:	f2c4 020f 	movt	r2, #16399	; 0x400f
    107c:	4290      	cmp	r0, r2
    107e:	d823      	bhi.n	10c8 <__stack_size__+0xc8>
    1080:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1084:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1088:	4288      	cmp	r0, r1
    108a:	f000 81d0 	beq.w	142e <__stack_size__+0x42e>
    108e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1092:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1096:	4298      	cmp	r0, r3
    1098:	d807      	bhi.n	10aa <__stack_size__+0xaa>
    109a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    109e:	f2c4 020e 	movt	r2, #16398	; 0x400e
    10a2:	4290      	cmp	r0, r2
    10a4:	f040 821a 	bne.w	14dc <__stack_size__+0x4dc>
    10a8:	e1b7      	b.n	141a <__stack_size__+0x41a>
    10aa:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    10ae:	f2c4 010e 	movt	r1, #16398	; 0x400e
    10b2:	4288      	cmp	r0, r1
    10b4:	f000 81c5 	beq.w	1442 <__stack_size__+0x442>
    10b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    10bc:	f2c4 020e 	movt	r2, #16398	; 0x400e
    10c0:	4290      	cmp	r0, r2
    10c2:	f040 820b 	bne.w	14dc <__stack_size__+0x4dc>
    10c6:	e1c6      	b.n	1456 <__stack_size__+0x456>
    10c8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    10cc:	f2c4 010f 	movt	r1, #16399	; 0x400f
    10d0:	4288      	cmp	r0, r1
    10d2:	f000 81e7 	beq.w	14a4 <__stack_size__+0x4a4>
    10d6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    10da:	f2c4 020f 	movt	r2, #16399	; 0x400f
    10de:	4290      	cmp	r0, r2
    10e0:	d80e      	bhi.n	1100 <__stack_size__+0x100>
    10e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    10e6:	f2c4 030f 	movt	r3, #16399	; 0x400f
    10ea:	4298      	cmp	r0, r3
    10ec:	f000 81c6 	beq.w	147c <__stack_size__+0x47c>
    10f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    10f4:	f2c4 010f 	movt	r1, #16399	; 0x400f
    10f8:	4288      	cmp	r0, r1
    10fa:	f040 81ef 	bne.w	14dc <__stack_size__+0x4dc>
    10fe:	e1c7      	b.n	1490 <__stack_size__+0x490>
    1100:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    1104:	f2c4 010f 	movt	r1, #16399	; 0x400f
    1108:	4288      	cmp	r0, r1
    110a:	f000 81d5 	beq.w	14b8 <__stack_size__+0x4b8>
    110e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    1112:	f2c4 020f 	movt	r2, #16399	; 0x400f
    1116:	4290      	cmp	r0, r2
    1118:	f040 81e0 	bne.w	14dc <__stack_size__+0x4dc>
    111c:	e1d6      	b.n	14cc <__stack_size__+0x4cc>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    111e:	f04f 0001 	mov.w	r0, #1
    1122:	f04f 0109 	mov.w	r1, #9
    1126:	f640 02b1 	movw	r2, #2225	; 0x8b1
    112a:	f2c0 0200 	movt	r2, #0
    112e:	4790      	blx	r2
    1130:	bd08      	pop	{r3, pc}
	case AESA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_AESA_HSB);
		break;

	case IISC_ADDR:
		sysclk_enable_pba_module(SYSCLK_IISC);
    1132:	f04f 0000 	mov.w	r0, #0
    1136:	f640 1285 	movw	r2, #2437	; 0x985
    113a:	f2c0 0200 	movt	r2, #0
    113e:	4790      	blx	r2
		break;
    1140:	bd08      	pop	{r3, pc}

	case SPI_ADDR:
		sysclk_enable_pba_module(SYSCLK_SPI);
    1142:	f04f 0001 	mov.w	r0, #1
    1146:	f640 1185 	movw	r1, #2437	; 0x985
    114a:	f2c0 0100 	movt	r1, #0
    114e:	4788      	blx	r1
		break;
    1150:	bd08      	pop	{r3, pc}

	case TC0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC0);
    1152:	f04f 0002 	mov.w	r0, #2
    1156:	f640 1385 	movw	r3, #2437	; 0x985
    115a:	f2c0 0300 	movt	r3, #0
    115e:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1160:	f04f 0000 	mov.w	r0, #0
    1164:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1168:	6c01      	ldr	r1, [r0, #64]	; 0x40
	temp_mask |= mask;
    116a:	f041 0355 	orr.w	r3, r1, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    116e:	f04f 0240 	mov.w	r2, #64	; 0x40
    1172:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1176:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1178:	6403      	str	r3, [r0, #64]	; 0x40
    117a:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TC1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC1);
    117c:	f04f 0003 	mov.w	r0, #3
    1180:	f640 1285 	movw	r2, #2437	; 0x985
    1184:	f2c0 0200 	movt	r2, #0
    1188:	4790      	blx	r2
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    118a:	f04f 0000 	mov.w	r0, #0
    118e:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1192:	6c03      	ldr	r3, [r0, #64]	; 0x40
	temp_mask |= mask;
    1194:	f043 0155 	orr.w	r1, r3, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1198:	f04f 0240 	mov.w	r2, #64	; 0x40
    119c:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    11a0:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    11a2:	6401      	str	r1, [r0, #64]	; 0x40
    11a4:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TWIM0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
    11a6:	f04f 0004 	mov.w	r0, #4
    11aa:	f640 1385 	movw	r3, #2437	; 0x985
    11ae:	f2c0 0300 	movt	r3, #0
    11b2:	4798      	blx	r3
		break;
    11b4:	bd08      	pop	{r3, pc}

	case TWIS0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
    11b6:	f04f 0005 	mov.w	r0, #5
    11ba:	f640 1385 	movw	r3, #2437	; 0x985
    11be:	f2c0 0300 	movt	r3, #0
    11c2:	4798      	blx	r3
		break;
    11c4:	bd08      	pop	{r3, pc}

	case TWIM1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
    11c6:	f04f 0006 	mov.w	r0, #6
    11ca:	f640 1185 	movw	r1, #2437	; 0x985
    11ce:	f2c0 0100 	movt	r1, #0
    11d2:	4788      	blx	r1
		break;
    11d4:	bd08      	pop	{r3, pc}

	case TWIS1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
    11d6:	f04f 0007 	mov.w	r0, #7
    11da:	f640 1285 	movw	r2, #2437	; 0x985
    11de:	f2c0 0200 	movt	r2, #0
    11e2:	4790      	blx	r2
		break;
    11e4:	bd08      	pop	{r3, pc}

	case USART0_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART0);
    11e6:	f04f 0008 	mov.w	r0, #8
    11ea:	f640 1385 	movw	r3, #2437	; 0x985
    11ee:	f2c0 0300 	movt	r3, #0
    11f2:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    11f4:	f04f 0000 	mov.w	r0, #0
    11f8:	f2c4 000e 	movt	r0, #16398	; 0x400e
    11fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
	temp_mask |= mask;
    11fe:	f042 0104 	orr.w	r1, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1202:	f04f 0340 	mov.w	r3, #64	; 0x40
    1206:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    120a:	6583      	str	r3, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    120c:	6401      	str	r1, [r0, #64]	; 0x40
    120e:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART1_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART1);
    1210:	f04f 0009 	mov.w	r0, #9
    1214:	f640 1385 	movw	r3, #2437	; 0x985
    1218:	f2c0 0300 	movt	r3, #0
    121c:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    121e:	f04f 0000 	mov.w	r0, #0
    1222:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1226:	6c01      	ldr	r1, [r0, #64]	; 0x40
	temp_mask |= mask;
    1228:	f041 0304 	orr.w	r3, r1, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    122c:	f04f 0240 	mov.w	r2, #64	; 0x40
    1230:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1234:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1236:	6403      	str	r3, [r0, #64]	; 0x40
    1238:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART2_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART2);
    123a:	f04f 000a 	mov.w	r0, #10
    123e:	f640 1385 	movw	r3, #2437	; 0x985
    1242:	f2c0 0300 	movt	r3, #0
    1246:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1248:	f04f 0000 	mov.w	r0, #0
    124c:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1250:	6c02      	ldr	r2, [r0, #64]	; 0x40
	temp_mask |= mask;
    1252:	f042 0104 	orr.w	r1, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1256:	f04f 0340 	mov.w	r3, #64	; 0x40
    125a:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    125e:	6583      	str	r3, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1260:	6401      	str	r1, [r0, #64]	; 0x40
    1262:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART3_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART3);
    1264:	f04f 000b 	mov.w	r0, #11
    1268:	f640 1185 	movw	r1, #2437	; 0x985
    126c:	f2c0 0100 	movt	r1, #0
    1270:	4788      	blx	r1
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1272:	f04f 0000 	mov.w	r0, #0
    1276:	f2c4 000e 	movt	r0, #16398	; 0x400e
    127a:	6c03      	ldr	r3, [r0, #64]	; 0x40
	temp_mask |= mask;
    127c:	f043 0104 	orr.w	r1, r3, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1280:	f04f 0240 	mov.w	r2, #64	; 0x40
    1284:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1288:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    128a:	6401      	str	r1, [r0, #64]	; 0x40
    128c:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case ADCIFE_ADDR:
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
    128e:	f04f 000c 	mov.w	r0, #12
    1292:	f640 1285 	movw	r2, #2437	; 0x985
    1296:	f2c0 0200 	movt	r2, #0
    129a:	4790      	blx	r2
		break;
    129c:	bd08      	pop	{r3, pc}

	case DACC_ADDR:
		sysclk_enable_pba_module(SYSCLK_DACC);
    129e:	f04f 000d 	mov.w	r0, #13
    12a2:	f640 1385 	movw	r3, #2437	; 0x985
    12a6:	f2c0 0300 	movt	r3, #0
    12aa:	4798      	blx	r3
		break;
    12ac:	bd08      	pop	{r3, pc}

	case ACIFC_ADDR:
		sysclk_enable_pba_module(SYSCLK_ACIFC);
    12ae:	f04f 000e 	mov.w	r0, #14
    12b2:	f640 1285 	movw	r2, #2437	; 0x985
    12b6:	f2c0 0200 	movt	r2, #0
    12ba:	4790      	blx	r2
		break;
    12bc:	bd08      	pop	{r3, pc}

	case GLOC_ADDR:
		sysclk_enable_pba_module(SYSCLK_GLOC);
    12be:	f04f 000f 	mov.w	r0, #15
    12c2:	f640 1285 	movw	r2, #2437	; 0x985
    12c6:	f2c0 0200 	movt	r2, #0
    12ca:	4790      	blx	r2
		break;
    12cc:	bd08      	pop	{r3, pc}

	case ABDACB_ADDR:
		sysclk_enable_pba_module(SYSCLK_ABDACB);
    12ce:	f04f 0010 	mov.w	r0, #16
    12d2:	f640 1185 	movw	r1, #2437	; 0x985
    12d6:	f2c0 0100 	movt	r1, #0
    12da:	4788      	blx	r1
		break;
    12dc:	bd08      	pop	{r3, pc}

	case TRNG_ADDR:
		sysclk_enable_pba_module(SYSCLK_TRNG);
    12de:	f04f 0011 	mov.w	r0, #17
    12e2:	f640 1185 	movw	r1, #2437	; 0x985
    12e6:	f2c0 0100 	movt	r1, #0
    12ea:	4788      	blx	r1
		break;
    12ec:	bd08      	pop	{r3, pc}

	case PARC_ADDR:
		sysclk_enable_pba_module(SYSCLK_PARC);
    12ee:	f04f 0012 	mov.w	r0, #18
    12f2:	f640 1385 	movw	r3, #2437	; 0x985
    12f6:	f2c0 0300 	movt	r3, #0
    12fa:	4798      	blx	r3
		break;
    12fc:	bd08      	pop	{r3, pc}

	case CATB_ADDR:
		sysclk_enable_pba_module(SYSCLK_CATB);
    12fe:	f04f 0013 	mov.w	r0, #19
    1302:	f640 1285 	movw	r2, #2437	; 0x985
    1306:	f2c0 0200 	movt	r2, #0
    130a:	4790      	blx	r2
		break;
    130c:	bd08      	pop	{r3, pc}

	case TWIM2_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM2);
    130e:	f04f 0015 	mov.w	r0, #21
    1312:	f640 1185 	movw	r1, #2437	; 0x985
    1316:	f2c0 0100 	movt	r1, #0
    131a:	4788      	blx	r1
		break;
    131c:	bd08      	pop	{r3, pc}

	case TWIM3_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM3);
    131e:	f04f 0016 	mov.w	r0, #22
    1322:	f640 1385 	movw	r3, #2437	; 0x985
    1326:	f2c0 0300 	movt	r3, #0
    132a:	4798      	blx	r3
		break;
    132c:	bd08      	pop	{r3, pc}

	case LCDCA_ADDR:
		sysclk_enable_pba_module(SYSCLK_LCDCA);
    132e:	f04f 0017 	mov.w	r0, #23
    1332:	f640 1285 	movw	r2, #2437	; 0x985
    1336:	f2c0 0200 	movt	r2, #0
    133a:	4790      	blx	r2
		break;
    133c:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    133e:	f04f 0001 	mov.w	r0, #1
    1342:	4601      	mov	r1, r0
    1344:	f640 03b1 	movw	r3, #2225	; 0x8b1
    1348:	f2c0 0300 	movt	r3, #0
    134c:	4798      	blx	r3

	case HFLASHC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HFLASHC_DATA);
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
    134e:	f04f 0000 	mov.w	r0, #0
    1352:	f640 2145 	movw	r1, #2629	; 0xa45
    1356:	f2c0 0100 	movt	r1, #0
    135a:	4788      	blx	r1
		break;
    135c:	bd08      	pop	{r3, pc}
    135e:	f04f 0001 	mov.w	r0, #1
    1362:	f04f 0102 	mov.w	r1, #2
    1366:	f640 03b1 	movw	r3, #2225	; 0x8b1
    136a:	f2c0 0300 	movt	r3, #0
    136e:	4798      	blx	r3

	case HCACHE_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
    1370:	f04f 0001 	mov.w	r0, #1
    1374:	f640 2245 	movw	r2, #2629	; 0xa45
    1378:	f2c0 0200 	movt	r2, #0
    137c:	4790      	blx	r2
		break;
    137e:	bd08      	pop	{r3, pc}

	case HMATRIX_ADDR:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
    1380:	f04f 0002 	mov.w	r0, #2
    1384:	f640 2145 	movw	r1, #2629	; 0xa45
    1388:	f2c0 0100 	movt	r1, #0
    138c:	4788      	blx	r1
		break;
    138e:	bd08      	pop	{r3, pc}
    1390:	f04f 0001 	mov.w	r0, #1
    1394:	f04f 0100 	mov.w	r1, #0
    1398:	f640 03b1 	movw	r3, #2225	; 0x8b1
    139c:	f2c0 0300 	movt	r3, #0
    13a0:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
    13a2:	f04f 0003 	mov.w	r0, #3
    13a6:	f640 2245 	movw	r2, #2629	; 0xa45
    13aa:	f2c0 0200 	movt	r2, #0
    13ae:	4790      	blx	r2
		break;
    13b0:	bd08      	pop	{r3, pc}
    13b2:	f04f 0001 	mov.w	r0, #1
    13b6:	f04f 0104 	mov.w	r1, #4
    13ba:	f640 02b1 	movw	r2, #2225	; 0x8b1
    13be:	f2c0 0200 	movt	r2, #0
    13c2:	4790      	blx	r2

	case CRCCU_ADDR:
		sysclk_enable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
    13c4:	f04f 0004 	mov.w	r0, #4
    13c8:	f640 2145 	movw	r1, #2629	; 0xa45
    13cc:	f2c0 0100 	movt	r1, #0
    13d0:	4788      	blx	r1
		break;
    13d2:	bd08      	pop	{r3, pc}
    13d4:	f04f 0001 	mov.w	r0, #1
    13d8:	f04f 0103 	mov.w	r1, #3
    13dc:	f640 03b1 	movw	r3, #2225	; 0x8b1
    13e0:	f2c0 0300 	movt	r3, #0
    13e4:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
    13e6:	f04f 0005 	mov.w	r0, #5
    13ea:	f640 2245 	movw	r2, #2629	; 0xa45
    13ee:	f2c0 0200 	movt	r2, #0
    13f2:	4790      	blx	r2
		break;
    13f4:	bd08      	pop	{r3, pc}

	case PEVC_ADDR:
		sysclk_enable_pbb_module(SYSCLK_PEVC);
    13f6:	f04f 0006 	mov.w	r0, #6
    13fa:	f640 2145 	movw	r1, #2629	; 0xa45
    13fe:	f2c0 0100 	movt	r1, #0
    1402:	4788      	blx	r1
		break;
    1404:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbc_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
    1406:	f04f 0004 	mov.w	r0, #4
    140a:	f04f 0100 	mov.w	r1, #0
    140e:	f640 03b1 	movw	r3, #2225	; 0x8b1
    1412:	f2c0 0300 	movt	r3, #0
    1416:	4798      	blx	r3
    1418:	bd08      	pop	{r3, pc}
    141a:	f04f 0004 	mov.w	r0, #4
    141e:	f04f 0101 	mov.w	r1, #1
    1422:	f640 03b1 	movw	r3, #2225	; 0x8b1
    1426:	f2c0 0300 	movt	r3, #0
    142a:	4798      	blx	r3
    142c:	bd08      	pop	{r3, pc}
    142e:	f04f 0004 	mov.w	r0, #4
    1432:	f04f 0102 	mov.w	r1, #2
    1436:	f640 03b1 	movw	r3, #2225	; 0x8b1
    143a:	f2c0 0300 	movt	r3, #0
    143e:	4798      	blx	r3
    1440:	bd08      	pop	{r3, pc}
    1442:	f04f 0004 	mov.w	r0, #4
    1446:	f04f 0103 	mov.w	r1, #3
    144a:	f640 02b1 	movw	r2, #2225	; 0x8b1
    144e:	f2c0 0200 	movt	r2, #0
    1452:	4790      	blx	r2
    1454:	bd08      	pop	{r3, pc}
    1456:	f04f 0004 	mov.w	r0, #4
    145a:	4601      	mov	r1, r0
    145c:	f640 03b1 	movw	r3, #2225	; 0x8b1
    1460:	f2c0 0300 	movt	r3, #0
    1464:	4798      	blx	r3
    1466:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    1468:	f04f 0005 	mov.w	r0, #5
    146c:	f04f 0100 	mov.w	r1, #0
    1470:	f640 02b1 	movw	r2, #2225	; 0x8b1
    1474:	f2c0 0200 	movt	r2, #0
    1478:	4790      	blx	r2
    147a:	bd08      	pop	{r3, pc}
    147c:	f04f 0005 	mov.w	r0, #5
    1480:	f04f 0101 	mov.w	r1, #1
    1484:	f640 03b1 	movw	r3, #2225	; 0x8b1
    1488:	f2c0 0300 	movt	r3, #0
    148c:	4798      	blx	r3
    148e:	bd08      	pop	{r3, pc}
    1490:	f04f 0005 	mov.w	r0, #5
    1494:	f04f 0102 	mov.w	r1, #2
    1498:	f640 02b1 	movw	r2, #2225	; 0x8b1
    149c:	f2c0 0200 	movt	r2, #0
    14a0:	4790      	blx	r2
    14a2:	bd08      	pop	{r3, pc}
    14a4:	f04f 0005 	mov.w	r0, #5
    14a8:	f04f 0103 	mov.w	r1, #3
    14ac:	f640 03b1 	movw	r3, #2225	; 0x8b1
    14b0:	f2c0 0300 	movt	r3, #0
    14b4:	4798      	blx	r3
    14b6:	bd08      	pop	{r3, pc}
    14b8:	f04f 0005 	mov.w	r0, #5
    14bc:	f04f 0104 	mov.w	r1, #4
    14c0:	f640 02b1 	movw	r2, #2225	; 0x8b1
    14c4:	f2c0 0200 	movt	r2, #0
    14c8:	4790      	blx	r2
    14ca:	bd08      	pop	{r3, pc}
    14cc:	f04f 0005 	mov.w	r0, #5
    14d0:	4601      	mov	r1, r0
    14d2:	f640 03b1 	movw	r3, #2225	; 0x8b1
    14d6:	f2c0 0300 	movt	r3, #0
    14da:	4798      	blx	r3
    14dc:	bd08      	pop	{r3, pc}
    14de:	bf00      	nop

000014e0 <sysclk_disable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be disabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
    14e0:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
    14e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    14e6:	f2c4 0307 	movt	r3, #16391	; 0x4007
    14ea:	4298      	cmp	r0, r3
    14ec:	f000 8231 	beq.w	1952 <sysclk_disable_peripheral_clock+0x472>
    14f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    14f4:	f2c4 0107 	movt	r1, #16391	; 0x4007
    14f8:	4288      	cmp	r0, r1
    14fa:	f200 80bb 	bhi.w	1674 <sysclk_disable_peripheral_clock+0x194>
    14fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1502:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1506:	4290      	cmp	r0, r2
    1508:	f000 81cb 	beq.w	18a2 <sysclk_disable_peripheral_clock+0x3c2>
    150c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1510:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1514:	4298      	cmp	r0, r3
    1516:	d851      	bhi.n	15bc <sysclk_disable_peripheral_clock+0xdc>
    1518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    151c:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1520:	4288      	cmp	r0, r1
    1522:	f000 8196 	beq.w	1852 <sysclk_disable_peripheral_clock+0x372>
    1526:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    152a:	f2c4 0201 	movt	r2, #16385	; 0x4001
    152e:	4290      	cmp	r0, r2
    1530:	d820      	bhi.n	1574 <sysclk_disable_peripheral_clock+0x94>
    1532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1536:	f2c4 0300 	movt	r3, #16384	; 0x4000
    153a:	4298      	cmp	r0, r3
    153c:	f000 8171 	beq.w	1822 <sysclk_disable_peripheral_clock+0x342>
    1540:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1544:	f2c4 0100 	movt	r1, #16384	; 0x4000
    1548:	4288      	cmp	r0, r1
    154a:	d804      	bhi.n	1556 <sysclk_disable_peripheral_clock+0x76>
    154c:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    1550:	f040 82f3 	bne.w	1b3a <sysclk_disable_peripheral_clock+0x65a>
    1554:	e15d      	b.n	1812 <sysclk_disable_peripheral_clock+0x332>
    1556:	f04f 0300 	mov.w	r3, #0
    155a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    155e:	4298      	cmp	r0, r3
    1560:	f000 8167 	beq.w	1832 <sysclk_disable_peripheral_clock+0x352>
    1564:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1568:	f2c4 0101 	movt	r1, #16385	; 0x4001
    156c:	4288      	cmp	r0, r1
    156e:	f040 82e4 	bne.w	1b3a <sysclk_disable_peripheral_clock+0x65a>
    1572:	e166      	b.n	1842 <sysclk_disable_peripheral_clock+0x362>
    1574:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    1578:	f2c4 0201 	movt	r2, #16385	; 0x4001
    157c:	4290      	cmp	r0, r2
    157e:	f000 8178 	beq.w	1872 <sysclk_disable_peripheral_clock+0x392>
    1582:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    1586:	f2c4 0301 	movt	r3, #16385	; 0x4001
    158a:	4298      	cmp	r0, r3
    158c:	d807      	bhi.n	159e <sysclk_disable_peripheral_clock+0xbe>
    158e:	f44f 4104 	mov.w	r1, #33792	; 0x8400
    1592:	f2c4 0101 	movt	r1, #16385	; 0x4001
    1596:	4288      	cmp	r0, r1
    1598:	f040 82cf 	bne.w	1b3a <sysclk_disable_peripheral_clock+0x65a>
    159c:	e161      	b.n	1862 <sysclk_disable_peripheral_clock+0x382>
    159e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
    15a2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15a6:	4298      	cmp	r0, r3
    15a8:	f000 816b 	beq.w	1882 <sysclk_disable_peripheral_clock+0x3a2>
    15ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    15b0:	f2c4 0102 	movt	r1, #16386	; 0x4002
    15b4:	4288      	cmp	r0, r1
    15b6:	f040 82c0 	bne.w	1b3a <sysclk_disable_peripheral_clock+0x65a>
    15ba:	e16a      	b.n	1892 <sysclk_disable_peripheral_clock+0x3b2>
    15bc:	f04f 0300 	mov.w	r3, #0
    15c0:	f2c4 0304 	movt	r3, #16388	; 0x4004
    15c4:	4298      	cmp	r0, r3
    15c6:	f000 8194 	beq.w	18f2 <sysclk_disable_peripheral_clock+0x412>
    15ca:	f04f 0100 	mov.w	r1, #0
    15ce:	f2c4 0104 	movt	r1, #16388	; 0x4004
    15d2:	4288      	cmp	r0, r1
    15d4:	d823      	bhi.n	161e <sysclk_disable_peripheral_clock+0x13e>
    15d6:	f04f 0200 	mov.w	r2, #0
    15da:	f2c4 0203 	movt	r2, #16387	; 0x4003
    15de:	4290      	cmp	r0, r2
    15e0:	f000 816f 	beq.w	18c2 <sysclk_disable_peripheral_clock+0x3e2>
    15e4:	f04f 0300 	mov.w	r3, #0
    15e8:	f2c4 0303 	movt	r3, #16387	; 0x4003
    15ec:	4298      	cmp	r0, r3
    15ee:	d807      	bhi.n	1600 <sysclk_disable_peripheral_clock+0x120>
    15f0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    15f4:	f2c4 0102 	movt	r1, #16386	; 0x4002
    15f8:	4288      	cmp	r0, r1
    15fa:	f040 829e 	bne.w	1b3a <sysclk_disable_peripheral_clock+0x65a>
    15fe:	e158      	b.n	18b2 <sysclk_disable_peripheral_clock+0x3d2>
    1600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1604:	f2c4 0303 	movt	r3, #16387	; 0x4003
    1608:	4298      	cmp	r0, r3
    160a:	f000 8162 	beq.w	18d2 <sysclk_disable_peripheral_clock+0x3f2>
    160e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    1612:	f2c4 0103 	movt	r1, #16387	; 0x4003
    1616:	4288      	cmp	r0, r1
    1618:	f040 828f 	bne.w	1b3a <sysclk_disable_peripheral_clock+0x65a>
    161c:	e161      	b.n	18e2 <sysclk_disable_peripheral_clock+0x402>
    161e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1622:	f2c4 0206 	movt	r2, #16390	; 0x4006
    1626:	4290      	cmp	r0, r2
    1628:	f000 817b 	beq.w	1922 <sysclk_disable_peripheral_clock+0x442>
    162c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1630:	f2c4 0306 	movt	r3, #16390	; 0x4006
    1634:	4298      	cmp	r0, r3
    1636:	d80e      	bhi.n	1656 <sysclk_disable_peripheral_clock+0x176>
    1638:	f04f 0100 	mov.w	r1, #0
    163c:	f2c4 0106 	movt	r1, #16390	; 0x4006
    1640:	4288      	cmp	r0, r1
    1642:	f000 815e 	beq.w	1902 <sysclk_disable_peripheral_clock+0x422>
    1646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    164a:	f2c4 0206 	movt	r2, #16390	; 0x4006
    164e:	4290      	cmp	r0, r2
    1650:	f040 8273 	bne.w	1b3a <sysclk_disable_peripheral_clock+0x65a>
    1654:	e15d      	b.n	1912 <sysclk_disable_peripheral_clock+0x432>
    1656:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    165a:	f2c4 0206 	movt	r2, #16390	; 0x4006
    165e:	4290      	cmp	r0, r2
    1660:	f000 8167 	beq.w	1932 <sysclk_disable_peripheral_clock+0x452>
    1664:	f04f 0300 	mov.w	r3, #0
    1668:	f2c4 0307 	movt	r3, #16391	; 0x4007
    166c:	4298      	cmp	r0, r3
    166e:	f040 8264 	bne.w	1b3a <sysclk_disable_peripheral_clock+0x65a>
    1672:	e166      	b.n	1942 <sysclk_disable_peripheral_clock+0x462>
    1674:	f04f 0300 	mov.w	r3, #0
    1678:	f2c4 030e 	movt	r3, #16398	; 0x400e
    167c:	4298      	cmp	r0, r3
    167e:	f000 81dc 	beq.w	1a3a <sysclk_disable_peripheral_clock+0x55a>
    1682:	f04f 0100 	mov.w	r1, #0
    1686:	f2c4 010e 	movt	r1, #16398	; 0x400e
    168a:	4288      	cmp	r0, r1
    168c:	d85b      	bhi.n	1746 <sysclk_disable_peripheral_clock+0x266>
    168e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1692:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1696:	4290      	cmp	r0, r2
    1698:	f000 818c 	beq.w	19b4 <sysclk_disable_peripheral_clock+0x4d4>
    169c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    16a0:	f2c4 030a 	movt	r3, #16394	; 0x400a
    16a4:	4298      	cmp	r0, r3
    16a6:	d823      	bhi.n	16f0 <sysclk_disable_peripheral_clock+0x210>
    16a8:	f04f 0100 	mov.w	r1, #0
    16ac:	f2c4 0108 	movt	r1, #16392	; 0x4008
    16b0:	4288      	cmp	r0, r1
    16b2:	f000 815e 	beq.w	1972 <sysclk_disable_peripheral_clock+0x492>
    16b6:	f04f 0200 	mov.w	r2, #0
    16ba:	f2c4 0208 	movt	r2, #16392	; 0x4008
    16be:	4290      	cmp	r0, r2
    16c0:	d807      	bhi.n	16d2 <sysclk_disable_peripheral_clock+0x1f2>
    16c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    16c6:	f2c4 0307 	movt	r3, #16391	; 0x4007
    16ca:	4298      	cmp	r0, r3
    16cc:	f040 8235 	bne.w	1b3a <sysclk_disable_peripheral_clock+0x65a>
    16d0:	e147      	b.n	1962 <sysclk_disable_peripheral_clock+0x482>
    16d2:	f04f 0200 	mov.w	r2, #0
    16d6:	f2c4 020a 	movt	r2, #16394	; 0x400a
    16da:	4290      	cmp	r0, r2
    16dc:	f000 8151 	beq.w	1982 <sysclk_disable_peripheral_clock+0x4a2>
    16e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    16e4:	f2c4 030a 	movt	r3, #16394	; 0x400a
    16e8:	4298      	cmp	r0, r3
    16ea:	f040 8226 	bne.w	1b3a <sysclk_disable_peripheral_clock+0x65a>
    16ee:	e150      	b.n	1992 <sysclk_disable_peripheral_clock+0x4b2>
    16f0:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    16f4:	f2c4 010a 	movt	r1, #16394	; 0x400a
    16f8:	4288      	cmp	r0, r1
    16fa:	f000 8185 	beq.w	1a08 <sysclk_disable_peripheral_clock+0x528>
    16fe:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1702:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1706:	4298      	cmp	r0, r3
    1708:	d80e      	bhi.n	1728 <sysclk_disable_peripheral_clock+0x248>
    170a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    170e:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1712:	4290      	cmp	r0, r2
    1714:	f000 8156 	beq.w	19c4 <sysclk_disable_peripheral_clock+0x4e4>
    1718:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    171c:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1720:	4288      	cmp	r0, r1
    1722:	f040 820a 	bne.w	1b3a <sysclk_disable_peripheral_clock+0x65a>
    1726:	e15e      	b.n	19e6 <sysclk_disable_peripheral_clock+0x506>
    1728:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    172c:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1730:	4290      	cmp	r0, r2
    1732:	f000 817a 	beq.w	1a2a <sysclk_disable_peripheral_clock+0x54a>
    1736:	f04f 0300 	mov.w	r3, #0
    173a:	f2c4 030b 	movt	r3, #16395	; 0x400b
    173e:	4298      	cmp	r0, r3
    1740:	f040 81fb 	bne.w	1b3a <sysclk_disable_peripheral_clock+0x65a>
    1744:	e05b      	b.n	17fe <sysclk_disable_peripheral_clock+0x31e>
    1746:	f04f 0300 	mov.w	r3, #0
    174a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    174e:	4298      	cmp	r0, r3
    1750:	f000 81a4 	beq.w	1a9c <sysclk_disable_peripheral_clock+0x5bc>
    1754:	f04f 0200 	mov.w	r2, #0
    1758:	f2c4 020f 	movt	r2, #16399	; 0x400f
    175c:	4290      	cmp	r0, r2
    175e:	d823      	bhi.n	17a8 <sysclk_disable_peripheral_clock+0x2c8>
    1760:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1764:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1768:	4288      	cmp	r0, r1
    176a:	f000 817a 	beq.w	1a62 <sysclk_disable_peripheral_clock+0x582>
    176e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1772:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1776:	4298      	cmp	r0, r3
    1778:	d807      	bhi.n	178a <sysclk_disable_peripheral_clock+0x2aa>
    177a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    177e:	f2c4 020e 	movt	r2, #16398	; 0x400e
    1782:	4290      	cmp	r0, r2
    1784:	f040 81d9 	bne.w	1b3a <sysclk_disable_peripheral_clock+0x65a>
    1788:	e161      	b.n	1a4e <sysclk_disable_peripheral_clock+0x56e>
    178a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    178e:	f2c4 010e 	movt	r1, #16398	; 0x400e
    1792:	4288      	cmp	r0, r1
    1794:	f000 816f 	beq.w	1a76 <sysclk_disable_peripheral_clock+0x596>
    1798:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    179c:	f2c4 020e 	movt	r2, #16398	; 0x400e
    17a0:	4290      	cmp	r0, r2
    17a2:	f040 81ca 	bne.w	1b3a <sysclk_disable_peripheral_clock+0x65a>
    17a6:	e170      	b.n	1a8a <sysclk_disable_peripheral_clock+0x5aa>
    17a8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    17ac:	f2c4 010f 	movt	r1, #16399	; 0x400f
    17b0:	4288      	cmp	r0, r1
    17b2:	f000 8191 	beq.w	1ad8 <sysclk_disable_peripheral_clock+0x5f8>
    17b6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    17ba:	f2c4 020f 	movt	r2, #16399	; 0x400f
    17be:	4290      	cmp	r0, r2
    17c0:	d80e      	bhi.n	17e0 <sysclk_disable_peripheral_clock+0x300>
    17c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    17c6:	f2c4 030f 	movt	r3, #16399	; 0x400f
    17ca:	4298      	cmp	r0, r3
    17cc:	f000 8170 	beq.w	1ab0 <sysclk_disable_peripheral_clock+0x5d0>
    17d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    17d4:	f2c4 010f 	movt	r1, #16399	; 0x400f
    17d8:	4288      	cmp	r0, r1
    17da:	f040 81ae 	bne.w	1b3a <sysclk_disable_peripheral_clock+0x65a>
    17de:	e171      	b.n	1ac4 <sysclk_disable_peripheral_clock+0x5e4>
    17e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    17e4:	f2c4 010f 	movt	r1, #16399	; 0x400f
    17e8:	4288      	cmp	r0, r1
    17ea:	f000 817f 	beq.w	1aec <sysclk_disable_peripheral_clock+0x60c>
    17ee:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    17f2:	f2c4 020f 	movt	r2, #16399	; 0x400f
    17f6:	4290      	cmp	r0, r2
    17f8:	f040 819f 	bne.w	1b3a <sysclk_disable_peripheral_clock+0x65a>
    17fc:	e180      	b.n	1b00 <sysclk_disable_peripheral_clock+0x620>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    17fe:	f04f 0001 	mov.w	r0, #1
    1802:	f04f 0109 	mov.w	r1, #9
    1806:	f640 1219 	movw	r2, #2329	; 0x919
    180a:	f2c0 0200 	movt	r2, #0
    180e:	4790      	blx	r2
    1810:	e17e      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>
	case AESA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_AESA_HSB);
		break;

	case IISC_ADDR:
		sysclk_disable_pba_module(SYSCLK_IISC);
    1812:	f04f 0000 	mov.w	r0, #0
    1816:	f640 12e5 	movw	r2, #2533	; 0x9e5
    181a:	f2c0 0200 	movt	r2, #0
    181e:	4790      	blx	r2
		break;
    1820:	e176      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case SPI_ADDR:
		sysclk_disable_pba_module(SYSCLK_SPI);
    1822:	f04f 0001 	mov.w	r0, #1
    1826:	f640 11e5 	movw	r1, #2533	; 0x9e5
    182a:	f2c0 0100 	movt	r1, #0
    182e:	4788      	blx	r1
		break;
    1830:	e16e      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case TC0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC0);
    1832:	f04f 0002 	mov.w	r0, #2
    1836:	f640 13e5 	movw	r3, #2533	; 0x9e5
    183a:	f2c0 0300 	movt	r3, #0
    183e:	4798      	blx	r3
		break;
    1840:	e166      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case TC1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC1);
    1842:	f04f 0003 	mov.w	r0, #3
    1846:	f640 12e5 	movw	r2, #2533	; 0x9e5
    184a:	f2c0 0200 	movt	r2, #0
    184e:	4790      	blx	r2
		break;
    1850:	e15e      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case TWIM0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM0);
    1852:	f04f 0004 	mov.w	r0, #4
    1856:	f640 12e5 	movw	r2, #2533	; 0x9e5
    185a:	f2c0 0200 	movt	r2, #0
    185e:	4790      	blx	r2
		break;
    1860:	e156      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case TWIS0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS0);
    1862:	f04f 0005 	mov.w	r0, #5
    1866:	f640 12e5 	movw	r2, #2533	; 0x9e5
    186a:	f2c0 0200 	movt	r2, #0
    186e:	4790      	blx	r2
		break;
    1870:	e14e      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case TWIM1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM1);
    1872:	f04f 0006 	mov.w	r0, #6
    1876:	f640 11e5 	movw	r1, #2533	; 0x9e5
    187a:	f2c0 0100 	movt	r1, #0
    187e:	4788      	blx	r1
		break;
    1880:	e146      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case TWIS1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS1);
    1882:	f04f 0007 	mov.w	r0, #7
    1886:	f640 13e5 	movw	r3, #2533	; 0x9e5
    188a:	f2c0 0300 	movt	r3, #0
    188e:	4798      	blx	r3
		break;
    1890:	e13e      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case USART0_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART0);
    1892:	f04f 0008 	mov.w	r0, #8
    1896:	f640 12e5 	movw	r2, #2533	; 0x9e5
    189a:	f2c0 0200 	movt	r2, #0
    189e:	4790      	blx	r2
		break;
    18a0:	e136      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case USART1_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART1);
    18a2:	f04f 0009 	mov.w	r0, #9
    18a6:	f640 12e5 	movw	r2, #2533	; 0x9e5
    18aa:	f2c0 0200 	movt	r2, #0
    18ae:	4790      	blx	r2
		break;
    18b0:	e12e      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case USART2_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART2);
    18b2:	f04f 000a 	mov.w	r0, #10
    18b6:	f640 12e5 	movw	r2, #2533	; 0x9e5
    18ba:	f2c0 0200 	movt	r2, #0
    18be:	4790      	blx	r2
		break;
    18c0:	e126      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case USART3_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART3);
    18c2:	f04f 000b 	mov.w	r0, #11
    18c6:	f640 11e5 	movw	r1, #2533	; 0x9e5
    18ca:	f2c0 0100 	movt	r1, #0
    18ce:	4788      	blx	r1
		break;
    18d0:	e11e      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case ADCIFE_ADDR:
		sysclk_disable_pba_module(SYSCLK_ADCIFE);
    18d2:	f04f 000c 	mov.w	r0, #12
    18d6:	f640 13e5 	movw	r3, #2533	; 0x9e5
    18da:	f2c0 0300 	movt	r3, #0
    18de:	4798      	blx	r3
		break;
    18e0:	e116      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case DACC_ADDR:
		sysclk_disable_pba_module(SYSCLK_DACC);
    18e2:	f04f 000d 	mov.w	r0, #13
    18e6:	f640 12e5 	movw	r2, #2533	; 0x9e5
    18ea:	f2c0 0200 	movt	r2, #0
    18ee:	4790      	blx	r2
		break;
    18f0:	e10e      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case ACIFC_ADDR:
		sysclk_disable_pba_module(SYSCLK_ACIFC);
    18f2:	f04f 000e 	mov.w	r0, #14
    18f6:	f640 11e5 	movw	r1, #2533	; 0x9e5
    18fa:	f2c0 0100 	movt	r1, #0
    18fe:	4788      	blx	r1
		break;
    1900:	e106      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case GLOC_ADDR:
		sysclk_disable_pba_module(SYSCLK_GLOC);
    1902:	f04f 000f 	mov.w	r0, #15
    1906:	f640 11e5 	movw	r1, #2533	; 0x9e5
    190a:	f2c0 0100 	movt	r1, #0
    190e:	4788      	blx	r1
		break;
    1910:	e0fe      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case ABDACB_ADDR:
		sysclk_disable_pba_module(SYSCLK_ABDACB);
    1912:	f04f 0010 	mov.w	r0, #16
    1916:	f640 13e5 	movw	r3, #2533	; 0x9e5
    191a:	f2c0 0300 	movt	r3, #0
    191e:	4798      	blx	r3
		break;
    1920:	e0f6      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case TRNG_ADDR:
		sysclk_disable_pba_module(SYSCLK_TRNG);
    1922:	f04f 0011 	mov.w	r0, #17
    1926:	f640 13e5 	movw	r3, #2533	; 0x9e5
    192a:	f2c0 0300 	movt	r3, #0
    192e:	4798      	blx	r3
		break;
    1930:	e0ee      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case PARC_ADDR:
		sysclk_disable_pba_module(SYSCLK_PARC);
    1932:	f04f 0012 	mov.w	r0, #18
    1936:	f640 12e5 	movw	r2, #2533	; 0x9e5
    193a:	f2c0 0200 	movt	r2, #0
    193e:	4790      	blx	r2
		break;
    1940:	e0e6      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case CATB_ADDR:
		sysclk_disable_pba_module(SYSCLK_CATB);
    1942:	f04f 0013 	mov.w	r0, #19
    1946:	f640 11e5 	movw	r1, #2533	; 0x9e5
    194a:	f2c0 0100 	movt	r1, #0
    194e:	4788      	blx	r1
		break;
    1950:	e0de      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case TWIM2_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM2);
    1952:	f04f 0015 	mov.w	r0, #21
    1956:	f640 11e5 	movw	r1, #2533	; 0x9e5
    195a:	f2c0 0100 	movt	r1, #0
    195e:	4788      	blx	r1
		break;
    1960:	e0d6      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case TWIM3_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM3);
    1962:	f04f 0016 	mov.w	r0, #22
    1966:	f640 11e5 	movw	r1, #2533	; 0x9e5
    196a:	f2c0 0100 	movt	r1, #0
    196e:	4788      	blx	r1
		break;
    1970:	e0ce      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case LCDCA_ADDR:
		sysclk_disable_pba_module(SYSCLK_LCDCA);
    1972:	f04f 0017 	mov.w	r0, #23
    1976:	f640 12e5 	movw	r2, #2533	; 0x9e5
    197a:	f2c0 0200 	movt	r2, #0
    197e:	4790      	blx	r2
		break;
    1980:	e0c6      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case HFLASHC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HFLASHC_REGS);
    1982:	f04f 0000 	mov.w	r0, #0
    1986:	f640 23a5 	movw	r3, #2725	; 0xaa5
    198a:	f2c0 0300 	movt	r3, #0
    198e:	4798      	blx	r3
		break;
    1990:	e0be      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>
    1992:	f04f 0001 	mov.w	r0, #1
    1996:	f04f 0102 	mov.w	r1, #2
    199a:	f640 1219 	movw	r2, #2329	; 0x919
    199e:	f2c0 0200 	movt	r2, #0
    19a2:	4790      	blx	r2

	case HCACHE_ADDR:
		sysclk_disable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_disable_pbb_module(SYSCLK_HRAMC1_REGS);
    19a4:	f04f 0001 	mov.w	r0, #1
    19a8:	f640 21a5 	movw	r1, #2725	; 0xaa5
    19ac:	f2c0 0100 	movt	r1, #0
    19b0:	4788      	blx	r1
		break;
    19b2:	e0ad      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case HMATRIX_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HMATRIX);
    19b4:	f04f 0002 	mov.w	r0, #2
    19b8:	f640 21a5 	movw	r1, #2725	; 0xaa5
    19bc:	f2c0 0100 	movt	r1, #0
    19c0:	4788      	blx	r1
		break;
    19c2:	e0a5      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>
    19c4:	f04f 0001 	mov.w	r0, #1
    19c8:	f04f 0100 	mov.w	r1, #0
    19cc:	f640 1319 	movw	r3, #2329	; 0x919
    19d0:	f2c0 0300 	movt	r3, #0
    19d4:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_disable_pbb_module(SYSCLK_PDCA_PB);
    19d6:	f04f 0003 	mov.w	r0, #3
    19da:	f640 21a5 	movw	r1, #2725	; 0xaa5
    19de:	f2c0 0100 	movt	r1, #0
    19e2:	4788      	blx	r1
		break;
    19e4:	e094      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>
    19e6:	f04f 0001 	mov.w	r0, #1
    19ea:	f04f 0104 	mov.w	r1, #4
    19ee:	f640 1319 	movw	r3, #2329	; 0x919
    19f2:	f2c0 0300 	movt	r3, #0
    19f6:	4798      	blx	r3

	case CRCCU_ADDR:
		sysclk_disable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_disable_pbb_module(SYSCLK_CRCCU_REGS);
    19f8:	f04f 0004 	mov.w	r0, #4
    19fc:	f640 22a5 	movw	r2, #2725	; 0xaa5
    1a00:	f2c0 0200 	movt	r2, #0
    1a04:	4790      	blx	r2
		break;
    1a06:	e083      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>
    1a08:	f04f 0001 	mov.w	r0, #1
    1a0c:	f04f 0103 	mov.w	r1, #3
    1a10:	f640 1319 	movw	r3, #2329	; 0x919
    1a14:	f2c0 0300 	movt	r3, #0
    1a18:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_disable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_disable_pbb_module(SYSCLK_USBC_REGS);
    1a1a:	f04f 0005 	mov.w	r0, #5
    1a1e:	f640 22a5 	movw	r2, #2725	; 0xaa5
    1a22:	f2c0 0200 	movt	r2, #0
    1a26:	4790      	blx	r2
		break;
    1a28:	e072      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>

	case PEVC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_PEVC);
    1a2a:	f04f 0006 	mov.w	r0, #6
    1a2e:	f640 21a5 	movw	r1, #2725	; 0xaa5
    1a32:	f2c0 0100 	movt	r1, #0
    1a36:	4788      	blx	r1
		break;
    1a38:	e06a      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>
 * \brief Disable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbc_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBC, module_index);
    1a3a:	f04f 0004 	mov.w	r0, #4
    1a3e:	f04f 0100 	mov.w	r1, #0
    1a42:	f640 1319 	movw	r3, #2329	; 0x919
    1a46:	f2c0 0300 	movt	r3, #0
    1a4a:	4798      	blx	r3
    1a4c:	e060      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>
    1a4e:	f04f 0004 	mov.w	r0, #4
    1a52:	f04f 0101 	mov.w	r1, #1
    1a56:	f640 1319 	movw	r3, #2329	; 0x919
    1a5a:	f2c0 0300 	movt	r3, #0
    1a5e:	4798      	blx	r3
    1a60:	e056      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>
    1a62:	f04f 0004 	mov.w	r0, #4
    1a66:	f04f 0102 	mov.w	r1, #2
    1a6a:	f640 1319 	movw	r3, #2329	; 0x919
    1a6e:	f2c0 0300 	movt	r3, #0
    1a72:	4798      	blx	r3
    1a74:	e04c      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>
    1a76:	f04f 0004 	mov.w	r0, #4
    1a7a:	f04f 0103 	mov.w	r1, #3
    1a7e:	f640 1219 	movw	r2, #2329	; 0x919
    1a82:	f2c0 0200 	movt	r2, #0
    1a86:	4790      	blx	r2
    1a88:	e042      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>
    1a8a:	f04f 0004 	mov.w	r0, #4
    1a8e:	4601      	mov	r1, r0
    1a90:	f640 1319 	movw	r3, #2329	; 0x919
    1a94:	f2c0 0300 	movt	r3, #0
    1a98:	4798      	blx	r3
    1a9a:	e039      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>
 * \brief Disable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbd_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    1a9c:	f04f 0005 	mov.w	r0, #5
    1aa0:	f04f 0100 	mov.w	r1, #0
    1aa4:	f640 1219 	movw	r2, #2329	; 0x919
    1aa8:	f2c0 0200 	movt	r2, #0
    1aac:	4790      	blx	r2
    1aae:	e02f      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>
    1ab0:	f04f 0005 	mov.w	r0, #5
    1ab4:	f04f 0101 	mov.w	r1, #1
    1ab8:	f640 1319 	movw	r3, #2329	; 0x919
    1abc:	f2c0 0300 	movt	r3, #0
    1ac0:	4798      	blx	r3
    1ac2:	e025      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>
    1ac4:	f04f 0005 	mov.w	r0, #5
    1ac8:	f04f 0102 	mov.w	r1, #2
    1acc:	f640 1219 	movw	r2, #2329	; 0x919
    1ad0:	f2c0 0200 	movt	r2, #0
    1ad4:	4790      	blx	r2
    1ad6:	e01b      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>
    1ad8:	f04f 0005 	mov.w	r0, #5
    1adc:	f04f 0103 	mov.w	r1, #3
    1ae0:	f640 1319 	movw	r3, #2329	; 0x919
    1ae4:	f2c0 0300 	movt	r3, #0
    1ae8:	4798      	blx	r3
    1aea:	e011      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>
    1aec:	f04f 0005 	mov.w	r0, #5
    1af0:	f04f 0104 	mov.w	r1, #4
    1af4:	f640 1219 	movw	r2, #2329	; 0x919
    1af8:	f2c0 0200 	movt	r2, #0
    1afc:	4790      	blx	r2
    1afe:	e007      	b.n	1b10 <sysclk_disable_peripheral_clock+0x630>
    1b00:	f04f 0005 	mov.w	r0, #5
    1b04:	4601      	mov	r1, r0
    1b06:	f640 1319 	movw	r3, #2329	; 0x919
    1b0a:	f2c0 0300 	movt	r3, #0
    1b0e:	4798      	blx	r3
	}

	// Disable PBA divided clock if possible.
#define PBADIV_CLKSRC_MASK (SYSCLK_TC0 | SYSCLK_TC1 \
		| SYSCLK_USART0 | SYSCLK_USART1 | SYSCLK_USART2 | SYSCLK_USART3)
	if ((PM->PM_PBAMASK & PBADIV_CLKSRC_MASK) == 0) {
    1b10:	f04f 0000 	mov.w	r0, #0
    1b14:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1b18:	6a82      	ldr	r2, [r0, #40]	; 0x28
    1b1a:	f012 0f0b 	tst.w	r2, #11
    1b1e:	d10c      	bne.n	1b3a <sysclk_disable_peripheral_clock+0x65a>
 */
static inline void sysclk_disable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1b20:	f04f 0300 	mov.w	r3, #0
    1b24:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1b28:	6c19      	ldr	r1, [r3, #64]	; 0x40
	temp_mask &= ~mask;
    1b2a:	f021 007f 	bic.w	r0, r1, #127	; 0x7f
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1b2e:	f04f 0240 	mov.w	r2, #64	; 0x40
    1b32:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1b36:	659a      	str	r2, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1b38:	6418      	str	r0, [r3, #64]	; 0x40
    1b3a:	bd08      	pop	{r3, pc}

00001b3c <sysclk_set_source>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b3c:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1b40:	b672      	cpsid	i
    1b42:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1b46:	f240 0344 	movw	r3, #68	; 0x44
    1b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1b4e:	f04f 0100 	mov.w	r1, #0
    1b52:	7019      	strb	r1, [r3, #0]
{
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC1M);

	flags = cpu_irq_save();
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1b54:	460b      	mov	r3, r1
    1b56:	f2c4 030e 	movt	r3, #16398	; 0x400e
    1b5a:	f04f 412a 	mov.w	r1, #2852126720	; 0xaa000000
    1b5e:	6599      	str	r1, [r3, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_MCCTRL - (uint32_t)PM);
	PM->PM_MCCTRL = src;
    1b60:	6018      	str	r0, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1b62:	b94a      	cbnz	r2, 1b78 <sysclk_set_source+0x3c>
		cpu_irq_enable();
    1b64:	f240 0044 	movw	r0, #68	; 0x44
    1b68:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1b6c:	f04f 0201 	mov.w	r2, #1
    1b70:	7002      	strb	r2, [r0, #0]
    1b72:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1b76:	b662      	cpsie	i
    1b78:	4770      	bx	lr
    1b7a:	bf00      	nop

00001b7c <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    1b7c:	b538      	push	{r3, r4, r5, lr}
	uint32_t ps_value = 0;
	bool is_fwu_enabled = false;

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    1b7e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1b82:	f2c4 040a 	movt	r4, #16394	; 0x400a
    1b86:	4620      	mov	r0, r4
    1b88:	f640 6301 	movw	r3, #3585	; 0xe01
    1b8c:	f2c0 0300 	movt	r3, #0
    1b90:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    1b92:	f04f 0001 	mov.w	r0, #1
    1b96:	60a0      	str	r0, [r4, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    1b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1b9c:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1ba0:	68d1      	ldr	r1, [r2, #12]
    1ba2:	f011 0f01 	tst.w	r1, #1
    1ba6:	d0fb      	beq.n	1ba0 <sysclk_init+0x24>
	is_fwu_enabled = false;
#else
	if (sysclk_get_cpu_hz() <= FLASH_FREQ_PS1_FWS_1_MAX_FREQ) {
		ps_value = BPM_PS_1;
		if (sysclk_get_cpu_hz() > FLASH_FREQ_PS1_FWS_0_MAX_FREQ) {
			bpm_enable_fast_wakeup(BPM);
    1ba8:	f04f 0000 	mov.w	r0, #0
    1bac:	f2c4 000f 	movt	r0, #16399	; 0x400f
    1bb0:	f641 65ad 	movw	r5, #7853	; 0x1ead
    1bb4:	f2c0 0500 	movt	r5, #0
    1bb8:	47a8      	blx	r5
	case OSC_ID_RC80M:
		osc_priv_enable_rc80m();
		break;

	case OSC_ID_RCFAST:
		osc_priv_enable_rcfast();
    1bba:	f640 045d 	movw	r4, #2141	; 0x85d
    1bbe:	f2c0 0400 	movt	r4, #0
    1bc2:	47a0      	blx	r4

	case OSC_ID_RC80M:
		return !!(SCIF->SCIF_RC80MCR & (SCIF_RC80MCR_EN));

	case OSC_ID_RCFAST:
		return !!(SCIF->SCIF_RCFASTCFG & (SCIF_RCFASTCFG_EN));
    1bc4:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1bc8:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1bcc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1bce:	f013 0f01 	tst.w	r3, #1
    1bd2:	d0fb      	beq.n	1bcc <sysclk_init+0x50>
	}
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_RCFAST) {
		osc_enable(OSC_ID_RCFAST);
		osc_wait_ready(OSC_ID_RCFAST);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz(), ps_value, is_fwu_enabled);
    1bd4:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
    1bd8:	f2c0 00b7 	movt	r0, #183	; 0xb7
    1bdc:	f04f 0101 	mov.w	r1, #1
    1be0:	460a      	mov	r2, r1
    1be2:	f641 7579 	movw	r5, #8057	; 0x1f79
    1be6:	f2c0 0500 	movt	r5, #0
    1bea:	47a8      	blx	r5
		sysclk_set_source(SYSCLK_SRC_RCFAST);
    1bec:	f04f 0005 	mov.w	r0, #5
    1bf0:	f641 323d 	movw	r2, #6973	; 0x1b3d
    1bf4:	f2c0 0200 	movt	r2, #0
    1bf8:	4790      	blx	r2
	if (!no_halt) {
		bpm_power_scaling_cpu(bpm, ps_value);
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    1bfa:	f04f 0000 	mov.w	r0, #0
    1bfe:	f2c4 000f 	movt	r0, #16399	; 0x400f
    1c02:	f04f 0101 	mov.w	r1, #1
    1c06:	f64a 1280 	movw	r2, #43392	; 0xa980
    1c0a:	f2c0 0203 	movt	r2, #3
    1c0e:	f641 6435 	movw	r4, #7733	; 0x1e35
    1c12:	f2c0 0400 	movt	r4, #0
    1c16:	47a0      	blx	r4
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    1c18:	f04f 0400 	mov.w	r4, #0
    1c1c:	f2c4 040f 	movt	r4, #16399	; 0x400f
    1c20:	f641 65c9 	movw	r5, #7881	; 0x1ec9
    1c24:	f2c0 0500 	movt	r5, #0
    1c28:	4620      	mov	r0, r4
    1c2a:	47a8      	blx	r5
    1c2c:	f010 0f01 	tst.w	r0, #1
    1c30:	d0fa      	beq.n	1c28 <sysclk_init+0xac>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1c32:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1c36:	b672      	cpsid	i
    1c38:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1c3c:	f240 0244 	movw	r2, #68	; 0x44
    1c40:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1c44:	f04f 0100 	mov.w	r1, #0
    1c48:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1c4a:	b928      	cbnz	r0, 1c58 <sysclk_init+0xdc>
		cpu_irq_enable();
    1c4c:	f04f 0001 	mov.w	r0, #1
    1c50:	7010      	strb	r0, [r2, #0]
    1c52:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1c56:	b662      	cpsie	i
    1c58:	bd38      	pop	{r3, r4, r5, pc}
    1c5a:	bf00      	nop

00001c5c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1c60:	460c      	mov	r4, r1
    1c62:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1c64:	bb48      	cbnz	r0, 1cba <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
    1c66:	2a00      	cmp	r2, #0
    1c68:	dd2b      	ble.n	1cc2 <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
    1c6a:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    1c6c:	f640 16b8 	movw	r6, #2488	; 0x9b8
    1c70:	f2c2 0600 	movt	r6, #8192	; 0x2000
    1c74:	f640 15b0 	movw	r5, #2480	; 0x9b0
    1c78:	f2c2 0500 	movt	r5, #8192	; 0x2000
    1c7c:	ea6f 0901 	mvn.w	r9, r1
    1c80:	eb07 0009 	add.w	r0, r7, r9
    1c84:	f000 0901 	and.w	r9, r0, #1
    1c88:	6830      	ldr	r0, [r6, #0]
    1c8a:	682b      	ldr	r3, [r5, #0]
    1c8c:	4798      	blx	r3
		ptr++;
    1c8e:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1c92:	42bc      	cmp	r4, r7
    1c94:	d119      	bne.n	1cca <_read+0x6e>
    1c96:	e00d      	b.n	1cb4 <_read+0x58>
		ptr_get(stdio_base, ptr);
    1c98:	6830      	ldr	r0, [r6, #0]
    1c9a:	682b      	ldr	r3, [r5, #0]
    1c9c:	4621      	mov	r1, r4
    1c9e:	4798      	blx	r3
		ptr++;
    1ca0:	f104 0401 	add.w	r4, r4, #1
    1ca4:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    1ca6:	6830      	ldr	r0, [r6, #0]
    1ca8:	682a      	ldr	r2, [r5, #0]
    1caa:	4790      	blx	r2
		ptr++;
    1cac:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1cb0:	42bc      	cmp	r4, r7
    1cb2:	d1f1      	bne.n	1c98 <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    1cb4:	4640      	mov	r0, r8
    1cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    1cba:	f04f 30ff 	mov.w	r0, #4294967295
    1cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
    1cc2:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    1cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1cca:	f1b9 0f00 	cmp.w	r9, #0
    1cce:	d0e3      	beq.n	1c98 <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    1cd0:	6830      	ldr	r0, [r6, #0]
    1cd2:	682a      	ldr	r2, [r5, #0]
    1cd4:	4621      	mov	r1, r4
    1cd6:	4790      	blx	r2
		ptr++;
    1cd8:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1cdc:	42bc      	cmp	r4, r7
    1cde:	d1db      	bne.n	1c98 <_read+0x3c>
    1ce0:	e7e8      	b.n	1cb4 <_read+0x58>
    1ce2:	bf00      	nop

00001ce4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
    1ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1ce8:	460d      	mov	r5, r1
    1cea:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1cec:	f100 30ff 	add.w	r0, r0, #4294967295
    1cf0:	2802      	cmp	r0, #2
    1cf2:	d824      	bhi.n	1d3e <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
    1cf4:	b332      	cbz	r2, 1d44 <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1cf6:	f640 16b8 	movw	r6, #2488	; 0x9b8
    1cfa:	f2c2 0600 	movt	r6, #8192	; 0x2000
    1cfe:	f640 17b4 	movw	r7, #2484	; 0x9b4
    1d02:	f2c2 0700 	movt	r7, #8192	; 0x2000
    1d06:	f04f 0400 	mov.w	r4, #0
    1d0a:	f102 39ff 	add.w	r9, r2, #4294967295
    1d0e:	f009 0901 	and.w	r9, r9, #1
    1d12:	6830      	ldr	r0, [r6, #0]
    1d14:	683b      	ldr	r3, [r7, #0]
    1d16:	5d09      	ldrb	r1, [r1, r4]
    1d18:	4798      	blx	r3
    1d1a:	42a0      	cmp	r0, r4
    1d1c:	da1a      	bge.n	1d54 <_write+0x70>
    1d1e:	e014      	b.n	1d4a <_write+0x66>
    1d20:	6830      	ldr	r0, [r6, #0]
    1d22:	683b      	ldr	r3, [r7, #0]
    1d24:	5d29      	ldrb	r1, [r5, r4]
    1d26:	4798      	blx	r3
    1d28:	2800      	cmp	r0, #0
    1d2a:	db0e      	blt.n	1d4a <_write+0x66>
			return -1;
		}
		++nChars;
    1d2c:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1d30:	6830      	ldr	r0, [r6, #0]
    1d32:	683a      	ldr	r2, [r7, #0]
    1d34:	5d29      	ldrb	r1, [r5, r4]
    1d36:	4790      	blx	r2
    1d38:	2800      	cmp	r0, #0
    1d3a:	da1d      	bge.n	1d78 <_write+0x94>
    1d3c:	e005      	b.n	1d4a <_write+0x66>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    1d3e:	f04f 34ff 	mov.w	r4, #4294967295
    1d42:	e004      	b.n	1d4e <_write+0x6a>
	}

	for (; len != 0; --len) {
    1d44:	f04f 0400 	mov.w	r4, #0
    1d48:	e001      	b.n	1d4e <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    1d4a:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
    1d4e:	4620      	mov	r0, r4
    1d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    1d54:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1d58:	45a0      	cmp	r8, r4
    1d5a:	d0f8      	beq.n	1d4e <_write+0x6a>
    1d5c:	f1b9 0f00 	cmp.w	r9, #0
    1d60:	d0de      	beq.n	1d20 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1d62:	6830      	ldr	r0, [r6, #0]
    1d64:	683a      	ldr	r2, [r7, #0]
    1d66:	5d29      	ldrb	r1, [r5, r4]
    1d68:	4790      	blx	r2
    1d6a:	2800      	cmp	r0, #0
    1d6c:	dbed      	blt.n	1d4a <_write+0x66>
			return -1;
		}
		++nChars;
    1d6e:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1d72:	45a0      	cmp	r8, r4
    1d74:	d1d4      	bne.n	1d20 <_write+0x3c>
    1d76:	e7ea      	b.n	1d4e <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    1d78:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1d7c:	45a0      	cmp	r8, r4
    1d7e:	d1cf      	bne.n	1d20 <_write+0x3c>
    1d80:	e7e5      	b.n	1d4e <_write+0x6a>
    1d82:	bf00      	nop

00001d84 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)

void board_init(void)
{
    1d84:	b500      	push	{lr}
    1d86:	b087      	sub	sp, #28
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	struct wdt_dev_inst wdt_inst;
	struct wdt_config   wdt_cfg;

	wdt_get_config_defaults(&wdt_cfg);
    1d88:	4668      	mov	r0, sp
    1d8a:	f242 6399 	movw	r3, #9881	; 0x2699
    1d8e:	f2c0 0300 	movt	r3, #0
    1d92:	4798      	blx	r3
	wdt_init(&wdt_inst, WDT, &wdt_cfg);
    1d94:	a804      	add	r0, sp, #16
    1d96:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    1d9a:	f2c4 010f 	movt	r1, #16399	; 0x400f
    1d9e:	466a      	mov	r2, sp
    1da0:	f242 63b5 	movw	r3, #9909	; 0x26b5
    1da4:	f2c0 0300 	movt	r3, #0
    1da8:	4798      	blx	r3
	wdt_disable(&wdt_inst);
    1daa:	a804      	add	r0, sp, #16
    1dac:	f242 7181 	movw	r1, #10113	; 0x2781
    1db0:	f2c0 0100 	movt	r1, #0
    1db4:	4788      	blx	r1
	return 1U << (pin & 0x1F);
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
    1db6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    1dba:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1dbe:	f640 6201 	movw	r2, #3585	; 0xe01
    1dc2:	f2c0 0200 	movt	r2, #0
    1dc6:	4790      	blx	r2

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    1dc8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
    1dcc:	f2c4 000e 	movt	r0, #16398	; 0x400e
    1dd0:	f04f 0380 	mov.w	r3, #128	; 0x80
    1dd4:	6443      	str	r3, [r0, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    1dd6:	f8c0 3168 	str.w	r3, [r0, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    1dda:	6543      	str	r3, [r0, #84]	; 0x54
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    1ddc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    1de0:	6481      	str	r1, [r0, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    1de2:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
    1de6:	6741      	str	r1, [r0, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    1de8:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    1dec:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    1df0:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    1df4:	6181      	str	r1, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    1df6:	6281      	str	r1, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    1df8:	6381      	str	r1, [r0, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    1dfa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    1dfe:	6782      	str	r2, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    1e00:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    1e04:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    1e08:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    1e0c:	6182      	str	r2, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    1e0e:	6282      	str	r2, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    1e10:	6382      	str	r2, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    1e12:	6082      	str	r2, [r0, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    1e14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    1e18:	6783      	str	r3, [r0, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    1e1a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    1e1e:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    1e22:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    1e26:	6183      	str	r3, [r0, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    1e28:	6283      	str	r3, [r0, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    1e2a:	6383      	str	r3, [r0, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    1e2c:	6083      	str	r3, [r0, #8]
	ioport_set_pin_peripheral_mode(PIN_PA15D_PARC_PCDATA6, MUX_PA15D_PARC_PCDATA6);
	ioport_set_pin_peripheral_mode(PIN_PA16D_PARC_PCDATA7, MUX_PA16D_PARC_PCDATA7);
	ioport_set_pin_peripheral_mode(PIN_PA18D_PARC_PCEN1, MUX_PA18D_PARC_PCEN1);
	ioport_set_pin_peripheral_mode(PIN_PA19D_PARC_PCEN2, MUX_PA19D_PARC_PCEN2);
#endif
}
    1e2e:	b007      	add	sp, #28
    1e30:	bd00      	pop	{pc}
    1e32:	bf00      	nop

00001e34 <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    1e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t pmcon = 0;

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    1e38:	69c4      	ldr	r4, [r0, #28]

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
    1e3a:	f024 0503 	bic.w	r5, r4, #3
	pmcon |= BPM_PMCON_PS(ps_value);
    1e3e:	f045 030c 	orr.w	r3, r5, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1e42:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1e46:	b672      	cpsid	i
    1e48:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1e4c:	f04f 0500 	mov.w	r5, #0
    1e50:	f240 0744 	movw	r7, #68	; 0x44
    1e54:	f2c2 0700 	movt	r7, #8192	; 0x2000
    1e58:	703d      	strb	r5, [r7, #0]
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();

	/* Save SysTick */
	val = SysTick->VAL;
    1e5a:	f24e 0410 	movw	r4, #57360	; 0xe010
    1e5e:	f2ce 0400 	movt	r4, #57344	; 0xe000
    1e62:	f8d4 8008 	ldr.w	r8, [r4, #8]
	ctrl = SysTick->CTRL;
    1e66:	6827      	ldr	r7, [r4, #0]
	load = SysTick->LOAD;
    1e68:	f8d4 9004 	ldr.w	r9, [r4, #4]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    1e6c:	6062      	str	r2, [r4, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1e6e:	f04f 0205 	mov.w	r2, #5
    1e72:	6022      	str	r2, [r4, #0]
	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
	pmcon |= BPM_PMCON_PS(ps_value);
    1e74:	f001 0103 	and.w	r1, r1, #3
	load = SysTick->LOAD;
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    1e78:	4319      	orrs	r1, r3
    1e7a:	f240 030d 	movw	r3, #13
    1e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1e82:	4798      	blx	r3

	/* Restore SysTick */
	SysTick->CTRL = 0;
    1e84:	6025      	str	r5, [r4, #0]
	SysTick->LOAD = load;
    1e86:	f8c4 9004 	str.w	r9, [r4, #4]
	SysTick->VAL = val;
    1e8a:	f8c4 8008 	str.w	r8, [r4, #8]
	SysTick->CTRL = ctrl;
    1e8e:	6027      	str	r7, [r4, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1e90:	b94e      	cbnz	r6, 1ea6 <bpm_power_scaling_cpu_failsafe+0x72>
		cpu_irq_enable();
    1e92:	f240 0144 	movw	r1, #68	; 0x44
    1e96:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1e9a:	f04f 0201 	mov.w	r2, #1
    1e9e:	700a      	strb	r2, [r1, #0]
    1ea0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1ea4:	b662      	cpsie	i

	cpu_irq_restore(flags);
	return b_psok;
}
    1ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1eaa:	bf00      	nop

00001eac <bpm_enable_fast_wakeup>:
	bpm->BPM_PMCON = pmcon;
}

void bpm_enable_fast_wakeup(Bpm *bpm)
{
	uint32_t pmcon = bpm->BPM_PMCON | BPM_PMCON_FASTWKUP;
    1eac:	69c1      	ldr	r1, [r0, #28]
    1eae:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
	BPM_UNLOCK(PMCON);
    1eb2:	f04f 0300 	mov.w	r3, #0
    1eb6:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1eba:	f04f 021c 	mov.w	r2, #28
    1ebe:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    1ec2:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
    1ec4:	61c1      	str	r1, [r0, #28]
    1ec6:	4770      	bx	lr

00001ec8 <bpm_get_status>:
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
	return bpm->BPM_SR;
    1ec8:	6940      	ldr	r0, [r0, #20]
}
    1eca:	4770      	bx	lr

00001ecc <flashcalw_set_wait_state>:
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    1ecc:	f04f 0300 	mov.w	r3, #0
    1ed0:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1ed4:	6819      	ldr	r1, [r3, #0]
    1ed6:	f021 0240 	bic.w	r2, r1, #64	; 0x40
			| (wait_state ? FLASHCALW_FCR_FWS_1 :
    1eda:	2800      	cmp	r0, #0
    1edc:	bf14      	ite	ne
    1ede:	2040      	movne	r0, #64	; 0x40
    1ee0:	2000      	moveq	r0, #0
    1ee2:	4310      	orrs	r0, r2
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    1ee4:	f04f 0300 	mov.w	r3, #0
    1ee8:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1eec:	6018      	str	r0, [r3, #0]
    1eee:	4770      	bx	lr

00001ef0 <flashcalw_is_ready>:
 *
 * \return Whether the FLASHCALW is ready to run a new command.
 */
bool flashcalw_is_ready(void)
{
	return ((HFLASHC->FLASHCALW_FSR & FLASHCALW_FSR_FRDY) != 0);
    1ef0:	f04f 0300 	mov.w	r3, #0
    1ef4:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1ef8:	6898      	ldr	r0, [r3, #8]
}
    1efa:	f000 0001 	and.w	r0, r0, #1
    1efe:	4770      	bx	lr

00001f00 <flashcalw_default_wait_until_ready>:
/*! \brief Waits actively until the FLASHCALW is ready to run a new command.
 *
 * This is the default function assigned to \ref flashcalw_wait_until_ready.
 */
void flashcalw_default_wait_until_ready(void)
{
    1f00:	b510      	push	{r4, lr}
	while (!flashcalw_is_ready()) {
    1f02:	f641 64f1 	movw	r4, #7921	; 0x1ef1
    1f06:	f2c0 0400 	movt	r4, #0
    1f0a:	47a0      	blx	r4
    1f0c:	2800      	cmp	r0, #0
    1f0e:	d0fc      	beq.n	1f0a <flashcalw_default_wait_until_ready+0xa>
	}
}
    1f10:	bd10      	pop	{r4, pc}
    1f12:	bf00      	nop

00001f14 <flashcalw_issue_command>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
void flashcalw_issue_command(uint32_t command, int page_number)
{
    1f14:	b538      	push	{r3, r4, r5, lr}
    1f16:	4605      	mov	r5, r0
    1f18:	460c      	mov	r4, r1
	uint32_t tempo;

	flashcalw_wait_until_ready();
    1f1a:	f240 0348 	movw	r3, #72	; 0x48
    1f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1f22:	6818      	ldr	r0, [r3, #0]
    1f24:	4780      	blx	r0
	tempo = HFLASHC->FLASHCALW_FCMD;
    1f26:	f04f 0100 	mov.w	r1, #0
    1f2a:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1f2e:	684a      	ldr	r2, [r1, #4]
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
    1f30:	2c00      	cmp	r4, #0
    1f32:	db07      	blt.n	1f44 <flashcalw_issue_command+0x30>
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
    1f34:	f045 4525 	orr.w	r5, r5, #2768240640	; 0xa5000000
    1f38:	ea4f 2404 	mov.w	r4, r4, lsl #8
    1f3c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
    1f40:	4325      	orrs	r5, r4
    1f42:	e004      	b.n	1f4e <flashcalw_issue_command+0x3a>
	uint32_t tempo;

	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
    1f44:	f022 033f 	bic.w	r3, r2, #63	; 0x3f
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
    1f48:	f043 4025 	orr.w	r0, r3, #2768240640	; 0xa5000000
    1f4c:	4305      	orrs	r5, r0
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
    1f4e:	f04f 0100 	mov.w	r1, #0
    1f52:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1f56:	604d      	str	r5, [r1, #4]
 *          the driver's API which instead presents \ref flashcalw_is_lock_error
 *          and \ref flashcalw_is_programming_error.
 */
static uint32_t flashcalw_get_error_status(void)
{
	return HFLASHC->FLASHCALW_FSR &
    1f58:	688a      	ldr	r2, [r1, #8]
    1f5a:	f002 000c 	and.w	r0, r2, #12
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
	flashcalw_error_status = flashcalw_get_error_status();
    1f5e:	f640 132c 	movw	r3, #2348	; 0x92c
    1f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1f66:	6018      	str	r0, [r3, #0]
	flashcalw_wait_until_ready();
    1f68:	f240 0148 	movw	r1, #72	; 0x48
    1f6c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1f70:	680a      	ldr	r2, [r1, #0]
    1f72:	4790      	blx	r2
    1f74:	bd38      	pop	{r3, r4, r5, pc}
    1f76:	bf00      	nop

00001f78 <flashcalw_set_flash_waitstate_and_readmode>:
 * \param ps_value Power Scaling mode value (0, 1)
 * \param is_fwu_enabled (boolean), Is fast wakeup mode enabled or not
 */
void flashcalw_set_flash_waitstate_and_readmode(uint32_t cpu_f_hz,
		uint32_t ps_value, bool is_fwu_enabled)
{
    1f78:	b508      	push	{r3, lr}
	}

	/* Enable the high-speed read mode. */
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN, -1);
#else
	if (ps_value == 0) {
    1f7a:	2900      	cmp	r1, #0
    1f7c:	d156      	bne.n	202c <flashcalw_set_flash_waitstate_and_readmode+0xb4>
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) {
    1f7e:	f64a 0380 	movw	r3, #43136	; 0xa880
    1f82:	f2c0 1312 	movt	r3, #274	; 0x112
    1f86:	4298      	cmp	r0, r3
    1f88:	d927      	bls.n	1fda <flashcalw_set_flash_waitstate_and_readmode+0x62>
			// > 18MHz
			if (cpu_f_hz <= FLASH_FREQ_PS0_FWS_1_MAX_FREQ) {
    1f8a:	f44f 43a2 	mov.w	r3, #20736	; 0x5100
    1f8e:	f2c0 2325 	movt	r3, #549	; 0x225
    1f92:	4298      	cmp	r0, r3
    1f94:	d810      	bhi.n	1fb8 <flashcalw_set_flash_waitstate_and_readmode+0x40>
				// <= 36MHz
				/* Set a wait-state, disable the high-speed read
				 * mode. */
				flashcalw_set_wait_state(1);
    1f96:	f04f 0001 	mov.w	r0, #1
    1f9a:	f641 63cd 	movw	r3, #7885	; 0x1ecd
    1f9e:	f2c0 0300 	movt	r3, #0
    1fa2:	4798      	blx	r3
				flashcalw_issue_command(
    1fa4:	f04f 0011 	mov.w	r0, #17
    1fa8:	f04f 31ff 	mov.w	r1, #4294967295
    1fac:	f641 7215 	movw	r2, #7957	; 0x1f15
    1fb0:	f2c0 0200 	movt	r2, #0
    1fb4:	4790      	blx	r2
    1fb6:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				// > 36 MHz
				/* Set a wait-state, enable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    1fb8:	f04f 0001 	mov.w	r0, #1
    1fbc:	f641 61cd 	movw	r1, #7885	; 0x1ecd
    1fc0:	f2c0 0100 	movt	r1, #0
    1fc4:	4788      	blx	r1
				flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN,
    1fc6:	f04f 0010 	mov.w	r0, #16
    1fca:	f04f 31ff 	mov.w	r1, #4294967295
    1fce:	f641 7215 	movw	r2, #7957	; 0x1f15
    1fd2:	f2c0 0200 	movt	r2, #0
    1fd6:	4790      	blx	r2
    1fd8:	bd08      	pop	{r3, pc}
						-1);
			}
		} else { // <= 18MHz
			if((is_fwu_enabled == true) &&
    1fda:	b1b2      	cbz	r2, 200a <flashcalw_set_flash_waitstate_and_readmode+0x92>
    1fdc:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
    1fe0:	f2c0 01b7 	movt	r1, #183	; 0xb7
    1fe4:	4288      	cmp	r0, r1
    1fe6:	d810      	bhi.n	200a <flashcalw_set_flash_waitstate_and_readmode+0x92>
				(cpu_f_hz <= FLASH_FREQ_PS1_FWS_1_FWU_MAX_FREQ))
			{
				// <= 12MHz
				/* Set a wait-state, disable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    1fe8:	f04f 0001 	mov.w	r0, #1
    1fec:	f641 61cd 	movw	r1, #7885	; 0x1ecd
    1ff0:	f2c0 0100 	movt	r1, #0
    1ff4:	4788      	blx	r1
				flashcalw_issue_command(
    1ff6:	f04f 0011 	mov.w	r0, #17
    1ffa:	f04f 31ff 	mov.w	r1, #4294967295
    1ffe:	f641 7215 	movw	r2, #7957	; 0x1f15
    2002:	f2c0 0200 	movt	r2, #0
    2006:	4790      	blx	r2
    2008:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				/* No wait-state, disable the high-speed read
				mode */
				flashcalw_set_wait_state(0);
    200a:	f04f 0000 	mov.w	r0, #0
    200e:	f641 62cd 	movw	r2, #7885	; 0x1ecd
    2012:	f2c0 0200 	movt	r2, #0
    2016:	4790      	blx	r2
				flashcalw_issue_command(
    2018:	f04f 0011 	mov.w	r0, #17
    201c:	f04f 31ff 	mov.w	r1, #4294967295
    2020:	f641 7315 	movw	r3, #7957	; 0x1f15
    2024:	f2c0 0300 	movt	r3, #0
    2028:	4798      	blx	r3
    202a:	bd08      	pop	{r3, pc}
					FLASHCALW_FCMD_CMD_HSDIS, -1);
			}
		}
	} else { /* ps_value == 1 */
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) { /* > 8MHz */
    202c:	f64a 0380 	movw	r3, #43136	; 0xa880
    2030:	f2c0 1312 	movt	r3, #274	; 0x112
    2034:	4298      	cmp	r0, r3
			/* Set a wait-state. */
			flashcalw_set_wait_state(1);
    2036:	bf8c      	ite	hi
    2038:	2001      	movhi	r0, #1
		} else {
			/* No wait-state. */
			flashcalw_set_wait_state(0);
    203a:	2000      	movls	r0, #0
    203c:	f641 61cd 	movw	r1, #7885	; 0x1ecd
    2040:	f2c0 0100 	movt	r1, #0
    2044:	4788      	blx	r1
		}

		/* Disable the high-speed read mode. */
		flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSDIS, -1);
    2046:	f04f 0011 	mov.w	r0, #17
    204a:	f04f 31ff 	mov.w	r1, #4294967295
    204e:	f641 7215 	movw	r2, #7957	; 0x1f15
    2052:	f2c0 0200 	movt	r2, #0
    2056:	4790      	blx	r2
    2058:	bd08      	pop	{r3, pc}
    205a:	bf00      	nop

0000205c <gpio_common_handler>:

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
{
    205c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2060:	4606      	mov	r6, r0
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[port_id]);
    2062:	ea4f 2340 	mov.w	r3, r0, lsl #9
    2066:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
    206a:	f500 2261 	add.w	r2, r0, #921600	; 0xe1000
	uint32_t i;
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
    206e:	f8d2 90d0 	ldr.w	r9, [r2, #208]	; 0xd0
	gpio_port->GPIO_IFRC = (int_flags & port_mask);
    2072:	ea01 0109 	and.w	r1, r1, r9
    2076:	f8c2 10d8 	str.w	r1, [r2, #216]	; 0xd8

	for (i = 0; i < gpio_nb_sources; i++) {
    207a:	f640 1330 	movw	r3, #2352	; 0x930
    207e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2082:	6818      	ldr	r0, [r3, #0]
    2084:	b318      	cbz	r0, 20ce <gpio_common_handler+0x72>
    2086:	f04f 0400 	mov.w	r4, #0
    208a:	4625      	mov	r5, r4
		pin = gpio_int_sources[i].pin;
    208c:	f640 1734 	movw	r7, #2356	; 0x934
    2090:	f2c2 0700 	movt	r7, #8192	; 0x2000
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    2094:	f04f 0a01 	mov.w	sl, #1
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
	gpio_port->GPIO_IFRC = (int_flags & port_mask);

	for (i = 0; i < gpio_nb_sources; i++) {
    2098:	f640 1830 	movw	r8, #2352	; 0x930
    209c:	f2c2 0800 	movt	r8, #8192	; 0x2000
		pin = gpio_int_sources[i].pin;
    20a0:	59e2      	ldr	r2, [r4, r7]
		if ((ioport_pin_to_port_id(pin) == port_id) &&
    20a2:	ebb6 1f52 	cmp.w	r6, r2, lsr #5
    20a6:	d10a      	bne.n	20be <gpio_common_handler+0x62>
    20a8:	f002 011f 	and.w	r1, r2, #31
    20ac:	fa0a f301 	lsl.w	r3, sl, r1
    20b0:	ea13 0f09 	tst.w	r3, r9
    20b4:	d003      	beq.n	20be <gpio_common_handler+0x62>
}

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
    20b6:	1938      	adds	r0, r7, r4

	for (i = 0; i < gpio_nb_sources; i++) {
		pin = gpio_int_sources[i].pin;
		if ((ioport_pin_to_port_id(pin) == port_id) &&
				(ioport_pin_to_mask(pin) & int_flags)) {
			if (gpio_int_sources[i].callback != NULL) {
    20b8:	6842      	ldr	r2, [r0, #4]
    20ba:	b102      	cbz	r2, 20be <gpio_common_handler+0x62>
				gpio_int_sources[i].callback();
    20bc:	4790      	blx	r2
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
	gpio_port->GPIO_IFRC = (int_flags & port_mask);

	for (i = 0; i < gpio_nb_sources; i++) {
    20be:	f105 0501 	add.w	r5, r5, #1
    20c2:	f104 0408 	add.w	r4, r4, #8
    20c6:	f8d8 1000 	ldr.w	r1, [r8]
    20ca:	42a9      	cmp	r1, r5
    20cc:	d8e8      	bhi.n	20a0 <gpio_common_handler+0x44>
    20ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    20d2:	bf00      	nop

000020d4 <gpio_set_pin_callback>:
 * \retval \c false Wrong parameters or exceeding maximum number of interrupt
 *                  sources has been defined.
 */
bool gpio_set_pin_callback(ioport_pin_t pin, gpio_pin_callback_t callback,
		uint8_t irq_level)
{
    20d4:	b470      	push	{r4, r5, r6}
	int8_t i;
	int8_t irq_line;

	if (gpio_nb_sources >= GPIO_MAX_INTERRUPT_SOURCES) {
    20d6:	f640 1330 	movw	r3, #2352	; 0x930
    20da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    20de:	681b      	ldr	r3, [r3, #0]
    20e0:	2b05      	cmp	r3, #5
    20e2:	d866      	bhi.n	21b2 <gpio_set_pin_callback+0xde>
    20e4:	f000 041f 	and.w	r4, r0, #31
    20e8:	f04f 0501 	mov.w	r5, #1
    20ec:	fa05 f604 	lsl.w	r6, r5, r4
	 *
	 * \note Grouping interrupt generators into groups of eight, four
	 * different interrupt handlers can be installed for each GPIO port.
	 */
	for (i = 0; i < 4; i++) {
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
    20f0:	f016 0fff 	tst.w	r6, #255	; 0xff
    20f4:	d112      	bne.n	211c <gpio_set_pin_callback+0x48>
    20f6:	f416 4f7f 	tst.w	r6, #65280	; 0xff00
    20fa:	d109      	bne.n	2110 <gpio_set_pin_callback+0x3c>
    20fc:	f416 0f7f 	tst.w	r6, #16711680	; 0xff0000
    2100:	d109      	bne.n	2116 <gpio_set_pin_callback+0x42>
    2102:	f006 447f 	and.w	r4, r6, #4278190080	; 0xff000000
    2106:	2c00      	cmp	r4, #0
    2108:	bf0c      	ite	eq
    210a:	2604      	moveq	r6, #4
    210c:	2603      	movne	r6, #3
    210e:	e007      	b.n	2120 <gpio_set_pin_callback+0x4c>
	 * Get IRQ line for the given pin.
	 *
	 * \note Grouping interrupt generators into groups of eight, four
	 * different interrupt handlers can be installed for each GPIO port.
	 */
	for (i = 0; i < 4; i++) {
    2110:	f04f 0601 	mov.w	r6, #1
    2114:	e004      	b.n	2120 <gpio_set_pin_callback+0x4c>
    2116:	f04f 0602 	mov.w	r6, #2
    211a:	e001      	b.n	2120 <gpio_set_pin_callback+0x4c>
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
    211c:	f04f 0600 	mov.w	r6, #0
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    2120:	ea4f 1550 	mov.w	r5, r0, lsr #5
			break;
		}
	}
	irq_line = GPIO_0_IRQn + ioport_pin_to_port_id(pin) * 4 + i;
    2124:	eb06 0485 	add.w	r4, r6, r5, lsl #2
    2128:	f104 0419 	add.w	r4, r4, #25
    212c:	b2e4      	uxtb	r4, r4

	gpio_int_sources[gpio_nb_sources].pin = pin;
    212e:	f640 1634 	movw	r6, #2356	; 0x934
    2132:	f2c2 0600 	movt	r6, #8192	; 0x2000
    2136:	f846 0033 	str.w	r0, [r6, r3, lsl #3]
	gpio_int_sources[gpio_nb_sources].callback = callback;
    213a:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
    213e:	6041      	str	r1, [r0, #4]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    2140:	b263      	sxtb	r3, r4
    2142:	ea4f 1153 	mov.w	r1, r3, lsr #5
    2146:	f004 061f 	and.w	r6, r4, #31
    214a:	f04f 0501 	mov.w	r5, #1
    214e:	fa05 f006 	lsl.w	r0, r5, r6
    2152:	f44f 4561 	mov.w	r5, #57600	; 0xe100
    2156:	f2ce 0500 	movt	r5, #57344	; 0xe000
    215a:	f101 0660 	add.w	r6, r1, #96	; 0x60
    215e:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    2162:	2b00      	cmp	r3, #0
    2164:	da0b      	bge.n	217e <gpio_set_pin_callback+0xaa>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    2166:	f004 040f 	and.w	r4, r4, #15
    216a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    216e:	b2d2      	uxtb	r2, r2
    2170:	f64e 43fc 	movw	r3, #60668	; 0xecfc
    2174:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2178:	18e3      	adds	r3, r4, r3
    217a:	761a      	strb	r2, [r3, #24]
    217c:	e008      	b.n	2190 <gpio_set_pin_callback+0xbc>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    217e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    2182:	b2d2      	uxtb	r2, r2
    2184:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2188:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    218c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
    2190:	f44f 4261 	mov.w	r2, #57600	; 0xe100
    2194:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2198:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
	NVIC_EnableIRQ((IRQn_Type)irq_line);

	gpio_nb_sources++;
    219c:	f640 1130 	movw	r1, #2352	; 0x930
    21a0:	f2c2 0100 	movt	r1, #8192	; 0x2000
    21a4:	6808      	ldr	r0, [r1, #0]
    21a6:	f100 0001 	add.w	r0, r0, #1
    21aa:	6008      	str	r0, [r1, #0]

	return true;
    21ac:	f04f 0001 	mov.w	r0, #1
    21b0:	e001      	b.n	21b6 <gpio_set_pin_callback+0xe2>
{
	int8_t i;
	int8_t irq_line;

	if (gpio_nb_sources >= GPIO_MAX_INTERRUPT_SOURCES) {
		return false;
    21b2:	f04f 0000 	mov.w	r0, #0
	NVIC_EnableIRQ((IRQn_Type)irq_line);

	gpio_nb_sources++;

	return true;
}
    21b6:	bc70      	pop	{r4, r5, r6}
    21b8:	4770      	bx	lr
    21ba:	bf00      	nop

000021bc <GPIO_0_Handler>:

/**
 * GPIO handler 0 (PA 0..7)
 */
void GPIO_0_Handler(void)
{
    21bc:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, GPIO_INT_GROUP_MASK);
    21be:	f04f 0000 	mov.w	r0, #0
    21c2:	f04f 01ff 	mov.w	r1, #255	; 0xff
    21c6:	f242 035d 	movw	r3, #8285	; 0x205d
    21ca:	f2c0 0300 	movt	r3, #0
    21ce:	4798      	blx	r3
    21d0:	bd08      	pop	{r3, pc}
    21d2:	bf00      	nop

000021d4 <GPIO_1_Handler>:

/**
 * GPIO handler 1 (PA 8..15)
 */
void GPIO_1_Handler(void)
{
    21d4:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 8));
    21d6:	f04f 0000 	mov.w	r0, #0
    21da:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    21de:	f242 035d 	movw	r3, #8285	; 0x205d
    21e2:	f2c0 0300 	movt	r3, #0
    21e6:	4798      	blx	r3
    21e8:	bd08      	pop	{r3, pc}
    21ea:	bf00      	nop

000021ec <GPIO_2_Handler>:

/**
 * GPIO handler 2 (PA 16..23)
 */
void GPIO_2_Handler(void)
{
    21ec:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 16));
    21ee:	f04f 0000 	mov.w	r0, #0
    21f2:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    21f6:	f242 035d 	movw	r3, #8285	; 0x205d
    21fa:	f2c0 0300 	movt	r3, #0
    21fe:	4798      	blx	r3
    2200:	bd08      	pop	{r3, pc}
    2202:	bf00      	nop

00002204 <GPIO_3_Handler>:

/**
 * GPIO handler 3 (PA 24..31)
 */
void GPIO_3_Handler(void)
{
    2204:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 23));
    2206:	f04f 0000 	mov.w	r0, #0
    220a:	f04f 41ff 	mov.w	r1, #2139095040	; 0x7f800000
    220e:	f242 035d 	movw	r3, #8285	; 0x205d
    2212:	f2c0 0300 	movt	r3, #0
    2216:	4798      	blx	r3
    2218:	bd08      	pop	{r3, pc}
    221a:	bf00      	nop

0000221c <GPIO_4_Handler>:

/**
 * GPIO handler 4 (PB 0..7)
 */
void GPIO_4_Handler(void)
{
    221c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, GPIO_INT_GROUP_MASK);
    221e:	f04f 0001 	mov.w	r0, #1
    2222:	f04f 01ff 	mov.w	r1, #255	; 0xff
    2226:	f242 035d 	movw	r3, #8285	; 0x205d
    222a:	f2c0 0300 	movt	r3, #0
    222e:	4798      	blx	r3
    2230:	bd08      	pop	{r3, pc}
    2232:	bf00      	nop

00002234 <GPIO_5_Handler>:

/**
 * GPIO handler 5 (PB 8..15)
 */
void GPIO_5_Handler(void)
{
    2234:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 8));
    2236:	f04f 0001 	mov.w	r0, #1
    223a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    223e:	f242 035d 	movw	r3, #8285	; 0x205d
    2242:	f2c0 0300 	movt	r3, #0
    2246:	4798      	blx	r3
    2248:	bd08      	pop	{r3, pc}
    224a:	bf00      	nop

0000224c <GPIO_6_Handler>:

/**
 * GPIO handler 6 (PB 16..23)
 */
void GPIO_6_Handler(void)
{
    224c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 16));
    224e:	f04f 0001 	mov.w	r0, #1
    2252:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2256:	f242 035d 	movw	r3, #8285	; 0x205d
    225a:	f2c0 0300 	movt	r3, #0
    225e:	4798      	blx	r3
    2260:	bd08      	pop	{r3, pc}
    2262:	bf00      	nop

00002264 <GPIO_7_Handler>:

/**
 * GPIO handler 7 (PB 24..31)
 */
void GPIO_7_Handler(void)
{
    2264:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 24));
    2266:	f04f 0001 	mov.w	r0, #1
    226a:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    226e:	f242 035d 	movw	r3, #8285	; 0x205d
    2272:	f2c0 0300 	movt	r3, #0
    2276:	4798      	blx	r3
    2278:	bd08      	pop	{r3, pc}
    227a:	bf00      	nop

0000227c <GPIO_8_Handler>:

/**
 * GPIO handler 8 (PC 0..7)
 */
void GPIO_8_Handler(void)
{
    227c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, GPIO_INT_GROUP_MASK);
    227e:	f04f 0002 	mov.w	r0, #2
    2282:	f04f 01ff 	mov.w	r1, #255	; 0xff
    2286:	f242 035d 	movw	r3, #8285	; 0x205d
    228a:	f2c0 0300 	movt	r3, #0
    228e:	4798      	blx	r3
    2290:	bd08      	pop	{r3, pc}
    2292:	bf00      	nop

00002294 <GPIO_9_Handler>:

/**
 * GPIO handler 9 (PC 8..15)
 */
void GPIO_9_Handler(void)
{
    2294:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 8));
    2296:	f04f 0002 	mov.w	r0, #2
    229a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    229e:	f242 035d 	movw	r3, #8285	; 0x205d
    22a2:	f2c0 0300 	movt	r3, #0
    22a6:	4798      	blx	r3
    22a8:	bd08      	pop	{r3, pc}
    22aa:	bf00      	nop

000022ac <GPIO_10_Handler>:

/**
 * GPIO handler 10 (PC 16..23)
 */
void GPIO_10_Handler(void)
{
    22ac:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 16));
    22ae:	f04f 0002 	mov.w	r0, #2
    22b2:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    22b6:	f242 035d 	movw	r3, #8285	; 0x205d
    22ba:	f2c0 0300 	movt	r3, #0
    22be:	4798      	blx	r3
    22c0:	bd08      	pop	{r3, pc}
    22c2:	bf00      	nop

000022c4 <GPIO_11_Handler>:

/**
 * GPIO handler 11 (PC 24..31)
 */
void GPIO_11_Handler(void)
{
    22c4:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 24));
    22c6:	f04f 0002 	mov.w	r0, #2
    22ca:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    22ce:	f242 035d 	movw	r3, #8285	; 0x205d
    22d2:	f2c0 0300 	movt	r3, #0
    22d6:	4798      	blx	r3
    22d8:	bd08      	pop	{r3, pc}
    22da:	bf00      	nop

000022dc <pdca_channel_get_handler>:
 */
volatile PdcaChannel *pdca_channel_get_handler(pdca_channel_num_t
		pdca_ch_number)
{
	if (pdca_ch_number >= PDCA_NUMBER_OF_CHANNELS)
		pdca_ch_number = 0;
    22dc:	280f      	cmp	r0, #15
    22de:	bf88      	it	hi
    22e0:	2000      	movhi	r0, #0

	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
    22e2:	ea4f 1080 	mov.w	r0, r0, lsl #6
    22e6:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
			&(PDCA->PDCA_CHANNEL[pdca_ch_number]);

	return pdca_channel;
}
    22ea:	f501 2022 	add.w	r0, r1, #663552	; 0xa2000
    22ee:	4770      	bx	lr

000022f0 <pdca_get_channel_status>:
 *
 * \return 1 if channel transfer is enabled, else 0
 */
enum pdca_channel_status
		pdca_get_channel_status(pdca_channel_num_t pdca_ch_number)
{
    22f0:	b508      	push	{r3, lr}
	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
    22f2:	f242 23dd 	movw	r3, #8925	; 0x22dd
    22f6:	f2c0 0300 	movt	r3, #0
    22fa:	4798      	blx	r3
			pdca_channel_get_handler(pdca_ch_number);
	uint32_t status = pdca_channel->PDCA_SR;
    22fc:	69c1      	ldr	r1, [r0, #28]
	uint32_t intflag = pdca_channel->PDCA_ISR;
    22fe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
    2300:	f011 0f01 	tst.w	r1, #1
    2304:	d00c      	beq.n	2320 <pdca_get_channel_status+0x30>
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
    2306:	f010 0f04 	tst.w	r0, #4
    230a:	d10c      	bne.n	2326 <pdca_get_channel_status+0x36>
			return PDCA_CH_TRANSFER_ERROR;
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
    230c:	f010 0f02 	tst.w	r0, #2
    2310:	d10c      	bne.n	232c <pdca_get_channel_status+0x3c>
			return PDCA_CH_TRANSFER_COMPLETED;
		} else if ((intflag & PDCA_ISR_RCZ) == PDCA_ISR_RCZ) {
    2312:	f000 0201 	and.w	r2, r0, #1
			return PDCA_CH_COUNTER_RELOAD_IS_ZERO;
    2316:	2a00      	cmp	r2, #0
    2318:	bf0c      	ite	eq
    231a:	2001      	moveq	r0, #1
    231c:	2002      	movne	r0, #2
    231e:	bd08      	pop	{r3, pc}
		}
		return PDCA_CH_BUSY;
	} else {
		return PDCA_CH_FREE;
    2320:	f04f 0000 	mov.w	r0, #0
    2324:	bd08      	pop	{r3, pc}
	uint32_t status = pdca_channel->PDCA_SR;
	uint32_t intflag = pdca_channel->PDCA_ISR;

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
			return PDCA_CH_TRANSFER_ERROR;
    2326:	f04f 0004 	mov.w	r0, #4
    232a:	bd08      	pop	{r3, pc}
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
			return PDCA_CH_TRANSFER_COMPLETED;
    232c:	f04f 0003 	mov.w	r0, #3
		}
		return PDCA_CH_BUSY;
	} else {
		return PDCA_CH_FREE;
	}
}
    2330:	bd08      	pop	{r3, pc}
    2332:	bf00      	nop

00002334 <pdca_channel_interrupt>:
 * pdca_channel_set_callback() function.
 *
 * \param pdca_ch_number PDCA channel number to handle interrupt for
 */
static void pdca_channel_interrupt(const pdca_channel_num_t pdca_ch_number)
{
    2334:	b510      	push	{r4, lr}
    2336:	4604      	mov	r4, r0
	enum pdca_channel_status status;

	status = pdca_get_channel_status(pdca_ch_number);
    2338:	f242 23f1 	movw	r3, #8945	; 0x22f1
    233c:	f2c0 0300 	movt	r3, #0
    2340:	4798      	blx	r3

	if (pdca_callback_pointer[pdca_ch_number]) {
    2342:	f640 11bc 	movw	r1, #2492	; 0x9bc
    2346:	f2c2 0100 	movt	r1, #8192	; 0x2000
    234a:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
    234e:	b102      	cbz	r2, 2352 <pdca_channel_interrupt+0x1e>
		pdca_callback_pointer[pdca_ch_number] (status);
    2350:	4790      	blx	r2
    2352:	bd10      	pop	{r4, pc}

00002354 <PDCA_0_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 0.
 */
void PDCA_0_Handler(void)
{
    2354:	b508      	push	{r3, lr}
	pdca_channel_interrupt(0);
    2356:	f04f 0000 	mov.w	r0, #0
    235a:	f242 3335 	movw	r3, #9013	; 0x2335
    235e:	f2c0 0300 	movt	r3, #0
    2362:	4798      	blx	r3
    2364:	bd08      	pop	{r3, pc}
    2366:	bf00      	nop

00002368 <PDCA_1_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 1.
 */
void PDCA_1_Handler(void)
{
    2368:	b508      	push	{r3, lr}
	pdca_channel_interrupt(1);
    236a:	f04f 0001 	mov.w	r0, #1
    236e:	f242 3335 	movw	r3, #9013	; 0x2335
    2372:	f2c0 0300 	movt	r3, #0
    2376:	4798      	blx	r3
    2378:	bd08      	pop	{r3, pc}
    237a:	bf00      	nop

0000237c <PDCA_2_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 2.
 */
void PDCA_2_Handler(void)
{
    237c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(2);
    237e:	f04f 0002 	mov.w	r0, #2
    2382:	f242 3335 	movw	r3, #9013	; 0x2335
    2386:	f2c0 0300 	movt	r3, #0
    238a:	4798      	blx	r3
    238c:	bd08      	pop	{r3, pc}
    238e:	bf00      	nop

00002390 <PDCA_3_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 3.
 */
void PDCA_3_Handler(void)
{
    2390:	b508      	push	{r3, lr}
	pdca_channel_interrupt(3);
    2392:	f04f 0003 	mov.w	r0, #3
    2396:	f242 3335 	movw	r3, #9013	; 0x2335
    239a:	f2c0 0300 	movt	r3, #0
    239e:	4798      	blx	r3
    23a0:	bd08      	pop	{r3, pc}
    23a2:	bf00      	nop

000023a4 <PDCA_4_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 4.
 */
void PDCA_4_Handler(void)
{
    23a4:	b508      	push	{r3, lr}
	pdca_channel_interrupt(4);
    23a6:	f04f 0004 	mov.w	r0, #4
    23aa:	f242 3335 	movw	r3, #9013	; 0x2335
    23ae:	f2c0 0300 	movt	r3, #0
    23b2:	4798      	blx	r3
    23b4:	bd08      	pop	{r3, pc}
    23b6:	bf00      	nop

000023b8 <PDCA_5_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 5.
 */
void PDCA_5_Handler(void)
{
    23b8:	b508      	push	{r3, lr}
	pdca_channel_interrupt(5);
    23ba:	f04f 0005 	mov.w	r0, #5
    23be:	f242 3335 	movw	r3, #9013	; 0x2335
    23c2:	f2c0 0300 	movt	r3, #0
    23c6:	4798      	blx	r3
    23c8:	bd08      	pop	{r3, pc}
    23ca:	bf00      	nop

000023cc <PDCA_6_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 6.
 */
void PDCA_6_Handler(void)
{
    23cc:	b508      	push	{r3, lr}
	pdca_channel_interrupt(6);
    23ce:	f04f 0006 	mov.w	r0, #6
    23d2:	f242 3335 	movw	r3, #9013	; 0x2335
    23d6:	f2c0 0300 	movt	r3, #0
    23da:	4798      	blx	r3
    23dc:	bd08      	pop	{r3, pc}
    23de:	bf00      	nop

000023e0 <PDCA_7_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 7.
 */
void PDCA_7_Handler(void)
{
    23e0:	b508      	push	{r3, lr}
	pdca_channel_interrupt(7);
    23e2:	f04f 0007 	mov.w	r0, #7
    23e6:	f242 3335 	movw	r3, #9013	; 0x2335
    23ea:	f2c0 0300 	movt	r3, #0
    23ee:	4798      	blx	r3
    23f0:	bd08      	pop	{r3, pc}
    23f2:	bf00      	nop

000023f4 <PDCA_8_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 8.
 */
void PDCA_8_Handler(void)
{
    23f4:	b508      	push	{r3, lr}
	pdca_channel_interrupt(8);
    23f6:	f04f 0008 	mov.w	r0, #8
    23fa:	f242 3335 	movw	r3, #9013	; 0x2335
    23fe:	f2c0 0300 	movt	r3, #0
    2402:	4798      	blx	r3
    2404:	bd08      	pop	{r3, pc}
    2406:	bf00      	nop

00002408 <PDCA_9_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 9.
 */
void PDCA_9_Handler(void)
{
    2408:	b508      	push	{r3, lr}
	pdca_channel_interrupt(9);
    240a:	f04f 0009 	mov.w	r0, #9
    240e:	f242 3335 	movw	r3, #9013	; 0x2335
    2412:	f2c0 0300 	movt	r3, #0
    2416:	4798      	blx	r3
    2418:	bd08      	pop	{r3, pc}
    241a:	bf00      	nop

0000241c <PDCA_10_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 10.
 */
void PDCA_10_Handler(void)
{
    241c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(10);
    241e:	f04f 000a 	mov.w	r0, #10
    2422:	f242 3335 	movw	r3, #9013	; 0x2335
    2426:	f2c0 0300 	movt	r3, #0
    242a:	4798      	blx	r3
    242c:	bd08      	pop	{r3, pc}
    242e:	bf00      	nop

00002430 <PDCA_11_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 11.
 */
void PDCA_11_Handler(void)
{
    2430:	b508      	push	{r3, lr}
	pdca_channel_interrupt(11);
    2432:	f04f 000b 	mov.w	r0, #11
    2436:	f242 3335 	movw	r3, #9013	; 0x2335
    243a:	f2c0 0300 	movt	r3, #0
    243e:	4798      	blx	r3
    2440:	bd08      	pop	{r3, pc}
    2442:	bf00      	nop

00002444 <PDCA_12_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 12.
 */
void PDCA_12_Handler(void)
{
    2444:	b508      	push	{r3, lr}
	pdca_channel_interrupt(12);
    2446:	f04f 000c 	mov.w	r0, #12
    244a:	f242 3335 	movw	r3, #9013	; 0x2335
    244e:	f2c0 0300 	movt	r3, #0
    2452:	4798      	blx	r3
    2454:	bd08      	pop	{r3, pc}
    2456:	bf00      	nop

00002458 <PDCA_13_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 13.
 */
void PDCA_13_Handler(void)
{
    2458:	b508      	push	{r3, lr}
	pdca_channel_interrupt(13);
    245a:	f04f 000d 	mov.w	r0, #13
    245e:	f242 3335 	movw	r3, #9013	; 0x2335
    2462:	f2c0 0300 	movt	r3, #0
    2466:	4798      	blx	r3
    2468:	bd08      	pop	{r3, pc}
    246a:	bf00      	nop

0000246c <PDCA_14_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 14.
 */
void PDCA_14_Handler(void)
{
    246c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(14);
    246e:	f04f 000e 	mov.w	r0, #14
    2472:	f242 3335 	movw	r3, #9013	; 0x2335
    2476:	f2c0 0300 	movt	r3, #0
    247a:	4798      	blx	r3
    247c:	bd08      	pop	{r3, pc}
    247e:	bf00      	nop

00002480 <PDCA_15_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 15.
 */
void PDCA_15_Handler(void)
{
    2480:	b508      	push	{r3, lr}
	pdca_channel_interrupt(15);
    2482:	f04f 000f 	mov.w	r0, #15
    2486:	f242 3335 	movw	r3, #9013	; 0x2335
    248a:	f2c0 0300 	movt	r3, #0
    248e:	4798      	blx	r3
    2490:	bd08      	pop	{r3, pc}
    2492:	bf00      	nop

00002494 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
    2494:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
    2496:	ea4f 1301 	mov.w	r3, r1, lsl #4
    249a:	4293      	cmp	r3, r2
    249c:	d910      	bls.n	24c0 <usart_set_async_baudrate+0x2c>
    249e:	e020      	b.n	24e2 <usart_set_async_baudrate+0x4e>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
    24a0:	6841      	ldr	r1, [r0, #4]
    24a2:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
    24a6:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
    24a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    24ac:	6202      	str	r2, [r0, #32]

	return 0;
    24ae:	f04f 0000 	mov.w	r0, #0
    24b2:	e029      	b.n	2508 <usart_set_async_baudrate+0x74>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
    24b4:	f04f 0001 	mov.w	r0, #1
    24b8:	e026      	b.n	2508 <usart_set_async_baudrate+0x74>
    24ba:	f04f 0001 	mov.w	r0, #1
    24be:	e023      	b.n	2508 <usart_set_async_baudrate+0x74>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
    24c0:	ea4f 04c2 	mov.w	r4, r2, lsl #3
    24c4:	eb04 0253 	add.w	r2, r4, r3, lsr #1
    24c8:	fbb2 f3f3 	udiv	r3, r2, r3
	cd = cd_fp >> 3;
    24cc:	ea4f 02d3 	mov.w	r2, r3, lsr #3
	fp = cd_fp & 0x07;
    24d0:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
    24d4:	f102 34ff 	add.w	r4, r2, #4294967295
    24d8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    24dc:	428c      	cmp	r4, r1
    24de:	d9e3      	bls.n	24a8 <usart_set_async_baudrate+0x14>
    24e0:	e7e8      	b.n	24b4 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
    24e2:	ea4f 01c1 	mov.w	r1, r1, lsl #3
    24e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    24ea:	eb02 0451 	add.w	r4, r2, r1, lsr #1
    24ee:	fbb4 f3f1 	udiv	r3, r4, r1
	cd = cd_fp >> 3;
    24f2:	ea4f 02d3 	mov.w	r2, r3, lsr #3
	fp = cd_fp & 0x07;
    24f6:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
    24fa:	f102 34ff 	add.w	r4, r2, #4294967295
    24fe:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    2502:	428c      	cmp	r4, r1
    2504:	d9cc      	bls.n	24a0 <usart_set_async_baudrate+0xc>
    2506:	e7d8      	b.n	24ba <usart_set_async_baudrate+0x26>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
    2508:	bc10      	pop	{r4}
    250a:	4770      	bx	lr

0000250c <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
    250c:	f04f 0340 	mov.w	r3, #64	; 0x40
    2510:	6003      	str	r3, [r0, #0]
    2512:	4770      	bx	lr

00002514 <usart_reset_tx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
    2514:	f04f 0388 	mov.w	r3, #136	; 0x88
    2518:	6003      	str	r3, [r0, #0]
    251a:	4770      	bx	lr

0000251c <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
    251c:	f04f 0310 	mov.w	r3, #16
    2520:	6003      	str	r3, [r0, #0]
    2522:	4770      	bx	lr

00002524 <usart_reset_rx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
    2524:	f04f 0324 	mov.w	r3, #36	; 0x24
    2528:	6003      	str	r3, [r0, #0]
    252a:	4770      	bx	lr

0000252c <usart_reset_status>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
    252c:	f44f 7380 	mov.w	r3, #256	; 0x100
    2530:	6003      	str	r3, [r0, #0]
    2532:	4770      	bx	lr

00002534 <usart_drive_DTR_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_DTRDIS;
    2534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    2538:	6003      	str	r3, [r0, #0]
    253a:	4770      	bx	lr

0000253c <usart_drive_RTS_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
    253c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    2540:	6003      	str	r3, [r0, #0]
    2542:	4770      	bx	lr

00002544 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
    2544:	6943      	ldr	r3, [r0, #20]
    2546:	f013 0f02 	tst.w	r3, #2
    254a:	d007      	beq.n	255c <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
    254c:	ea4f 51c1 	mov.w	r1, r1, lsl #23
    2550:	ea4f 52d1 	mov.w	r2, r1, lsr #23
    2554:	61c2      	str	r2, [r0, #28]
	return 0;
    2556:	f04f 0000 	mov.w	r0, #0
    255a:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
    255c:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
    2560:	4770      	bx	lr
    2562:	bf00      	nop

00002564 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
    2564:	6943      	ldr	r3, [r0, #20]
    2566:	f013 0f01 	tst.w	r3, #1
    256a:	d008      	beq.n	257e <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
    256c:	6980      	ldr	r0, [r0, #24]
    256e:	ea4f 52c0 	mov.w	r2, r0, lsl #23
    2572:	ea4f 53d2 	mov.w	r3, r2, lsr #23
    2576:	600b      	str	r3, [r1, #0]

	return 0;
    2578:	f04f 0000 	mov.w	r0, #0
    257c:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
    257e:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
    2582:	4770      	bx	lr

00002584 <usart_disable_writeprotect>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
    2584:	f44f 4382 	mov.w	r3, #16640	; 0x4100
    2588:	f2c5 5353 	movt	r3, #21843	; 0x5553
    258c:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    2590:	4770      	bx	lr
    2592:	bf00      	nop

00002594 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
    2594:	b510      	push	{r4, lr}
    2596:	4604      	mov	r4, r0
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
    2598:	f242 5385 	movw	r3, #9605	; 0x2585
    259c:	f2c0 0300 	movt	r3, #0
    25a0:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
    25a2:	f04f 0000 	mov.w	r0, #0
    25a6:	6060      	str	r0, [r4, #4]
	p_usart->US_RTOR = 0;
    25a8:	6260      	str	r0, [r4, #36]	; 0x24
	p_usart->US_TTGR = 0;
    25aa:	62a0      	str	r0, [r4, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
    25ac:	4620      	mov	r0, r4
    25ae:	f242 5115 	movw	r1, #9493	; 0x2515
    25b2:	f2c0 0100 	movt	r1, #0
    25b6:	4788      	blx	r1
	usart_reset_rx(p_usart);
    25b8:	4620      	mov	r0, r4
    25ba:	f242 5225 	movw	r2, #9509	; 0x2525
    25be:	f2c0 0200 	movt	r2, #0
    25c2:	4790      	blx	r2
	/* Reset status bits. */
	usart_reset_status(p_usart);
    25c4:	4620      	mov	r0, r4
    25c6:	f242 532d 	movw	r3, #9517	; 0x252d
    25ca:	f2c0 0300 	movt	r3, #0
    25ce:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
    25d0:	4620      	mov	r0, r4
    25d2:	f242 513d 	movw	r1, #9533	; 0x253d
    25d6:	f2c0 0100 	movt	r1, #0
    25da:	4788      	blx	r1
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
    25dc:	4620      	mov	r0, r4
    25de:	f242 5235 	movw	r2, #9525	; 0x2535
    25e2:	f2c0 0200 	movt	r2, #0
    25e6:	4790      	blx	r2
    25e8:	bd10      	pop	{r4, pc}
    25ea:	bf00      	nop

000025ec <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
    25ec:	b570      	push	{r4, r5, r6, lr}
    25ee:	4605      	mov	r5, r0
    25f0:	460c      	mov	r4, r1
    25f2:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
    25f4:	f242 5395 	movw	r3, #9621	; 0x2595
    25f8:	f2c0 0300 	movt	r3, #0
    25fc:	4798      	blx	r3

	ul_reg_val = 0;
    25fe:	f640 1064 	movw	r0, #2404	; 0x964
    2602:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2606:	f04f 0100 	mov.w	r1, #0
    260a:	6001      	str	r1, [r0, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
    260c:	b1cc      	cbz	r4, 2642 <usart_init_rs232+0x56>
    260e:	4628      	mov	r0, r5
    2610:	6821      	ldr	r1, [r4, #0]
    2612:	4632      	mov	r2, r6
    2614:	f242 4395 	movw	r3, #9365	; 0x2495
    2618:	f2c0 0300 	movt	r3, #0
    261c:	4798      	blx	r3
    261e:	b998      	cbnz	r0, 2648 <usart_init_rs232+0x5c>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    2620:	68a2      	ldr	r2, [r4, #8]
    2622:	6861      	ldr	r1, [r4, #4]
    2624:	ea42 0301 	orr.w	r3, r2, r1
    2628:	6922      	ldr	r2, [r4, #16]
    262a:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
    262c:	68e1      	ldr	r1, [r4, #12]
    262e:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    2630:	f640 1264 	movw	r2, #2404	; 0x964
    2634:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2638:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
    263a:	6869      	ldr	r1, [r5, #4]
    263c:	430b      	orrs	r3, r1
    263e:	606b      	str	r3, [r5, #4]

	return 0;
    2640:	bd70      	pop	{r4, r5, r6, pc}

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
    2642:	f04f 0001 	mov.w	r0, #1
    2646:	bd70      	pop	{r4, r5, r6, pc}
    2648:	f04f 0001 	mov.w	r0, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
    264c:	bd70      	pop	{r4, r5, r6, pc}
    264e:	bf00      	nop

00002650 <wdt_set_ctrl>:
 *        to the WatchDog Timer key.
 *
 * \param ctrl  Value to set the WatchDog Timer Control register to.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
    2650:	b082      	sub	sp, #8
	volatile uint32_t dly;

	/* Calculate delay for internal synchronization, see 44.1.2 WDT errata */
	if ((WDT->WDT_CTRL & WDT_CTRL_CSSEL) == WDT_CLK_SRC_RCSYS) {
    2652:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    2656:	f2c4 030f 	movt	r3, #16399	; 0x400f
    265a:	6819      	ldr	r1, [r3, #0]
    265c:	f411 3f00 	tst.w	r1, #131072	; 0x20000
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RCSYS_NOMINAL_HZ);
    2660:	bf0c      	ite	eq
    2662:	21d1      	moveq	r1, #209	; 0xd1
	} else { /* WDT_CLK_SRC_32K */
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RC32K_NOMINAL_HZ);
    2664:	f240 21dd 	movwne	r1, #733	; 0x2dd
    2668:	9101      	str	r1, [sp, #4]
	}
	dly >>= 3; /* ~8 cycles for one while loop */
    266a:	9a01      	ldr	r2, [sp, #4]
    266c:	ea4f 03d2 	mov.w	r3, r2, lsr #3
    2670:	9301      	str	r3, [sp, #4]
	while(dly--);
    2672:	9901      	ldr	r1, [sp, #4]
    2674:	f101 32ff 	add.w	r2, r1, #4294967295
    2678:	9201      	str	r2, [sp, #4]
    267a:	2900      	cmp	r1, #0
    267c:	d1f9      	bne.n	2672 <wdt_set_ctrl+0x22>
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_FIRST_KEY);
    267e:	f040 41aa 	orr.w	r1, r0, #1426063360	; 0x55000000
    2682:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    2686:	f2c4 030f 	movt	r3, #16399	; 0x400f
    268a:	6019      	str	r1, [r3, #0]
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_SECOND_KEY);
    268c:	f040 402a 	orr.w	r0, r0, #2852126720	; 0xaa000000
    2690:	6018      	str	r0, [r3, #0]
}
    2692:	b002      	add	sp, #8
    2694:	4770      	bx	lr
    2696:	bf00      	nop

00002698 <wdt_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(cfg);

	/* Default configuration values */
	cfg->clk_src = WDT_CLK_SRC_RCSYS;
    2698:	f04f 0300 	mov.w	r3, #0
    269c:	6003      	str	r3, [r0, #0]
	cfg->wdt_mode = WDT_MODE_BASIC;
    269e:	6043      	str	r3, [r0, #4]
	cfg->timeout_period = WDT_PERIOD_131072_CLK;
    26a0:	f04f 0210 	mov.w	r2, #16
    26a4:	7202      	strb	r2, [r0, #8]
	cfg->window_period = WDT_PERIOD_NONE;
    26a6:	7243      	strb	r3, [r0, #9]
	cfg->disable_flash_cali = true;
    26a8:	f04f 0101 	mov.w	r1, #1
    26ac:	7281      	strb	r1, [r0, #10]
	cfg->disable_wdt_after_reset = true;
    26ae:	72c1      	strb	r1, [r0, #11]
	cfg->always_on = false;
    26b0:	7303      	strb	r3, [r0, #12]
    26b2:	4770      	bx	lr

000026b4 <wdt_init>:
 */
bool wdt_init(
		struct wdt_dev_inst *const dev_inst,
		Wdt *const wdt,
		struct wdt_config *const cfg)
{
    26b4:	b538      	push	{r3, r4, r5, lr}
    26b6:	460c      	mov	r4, r1
    26b8:	4615      	mov	r5, r2
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(wdt);
	Assert(cfg);

	dev_inst->hw_dev = wdt;
    26ba:	6001      	str	r1, [r0, #0]
	dev_inst->wdt_cfg = cfg;
    26bc:	6042      	str	r2, [r0, #4]

	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);
    26be:	4608      	mov	r0, r1
    26c0:	f640 6301 	movw	r3, #3585	; 0xe01
    26c4:	f2c0 0300 	movt	r3, #0
    26c8:	4798      	blx	r3

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
    26ca:	6820      	ldr	r0, [r4, #0]
    26cc:	f010 0f08 	tst.w	r0, #8
    26d0:	d152      	bne.n	2778 <wdt_init+0xc4>
		return false;
	}

	/* Disable the WDT */
	if (wdt->WDT_CTRL & WDT_CTRL_EN) {
    26d2:	6821      	ldr	r1, [r4, #0]
    26d4:	f011 0f01 	tst.w	r1, #1
    26d8:	d00b      	beq.n	26f2 <wdt_init+0x3e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    26da:	6822      	ldr	r2, [r4, #0]
    26dc:	f022 0001 	bic.w	r0, r2, #1
    26e0:	f242 6351 	movw	r3, #9809	; 0x2651
    26e4:	f2c0 0300 	movt	r3, #0
    26e8:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    26ea:	6820      	ldr	r0, [r4, #0]
    26ec:	f010 0f01 	tst.w	r0, #1
    26f0:	d1fb      	bne.n	26ea <wdt_init+0x36>
		}
	}
	/* Disable the WDT clock */
	if (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    26f2:	6821      	ldr	r1, [r4, #0]
    26f4:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    26f8:	d00b      	beq.n	2712 <wdt_init+0x5e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_CEN);
    26fa:	6822      	ldr	r2, [r4, #0]
    26fc:	f422 3080 	bic.w	r0, r2, #65536	; 0x10000
    2700:	f242 6351 	movw	r3, #9809	; 0x2651
    2704:	f2c0 0300 	movt	r3, #0
    2708:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    270a:	6820      	ldr	r0, [r4, #0]
    270c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2710:	d1fb      	bne.n	270a <wdt_init+0x56>
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    2712:	6869      	ldr	r1, [r5, #4]
    2714:	682a      	ldr	r2, [r5, #0]
    2716:	ea41 0302 	orr.w	r3, r1, r2
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    271a:	7a28      	ldrb	r0, [r5, #8]
    271c:	ea4f 2100 	mov.w	r1, r0, lsl #8
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
    2720:	f401 52f8 	and.w	r2, r1, #7936	; 0x1f00
    2724:	ea43 0002 	orr.w	r0, r3, r2
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
    2728:	7a6b      	ldrb	r3, [r5, #9]
    272a:	ea4f 4183 	mov.w	r1, r3, lsl #18
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    272e:	f401 02f8 	and.w	r2, r1, #8126464	; 0x7c0000
    2732:	4310      	orrs	r0, r2
			WDT_CTRL_TBAN(cfg->window_period) |
    2734:	7aab      	ldrb	r3, [r5, #10]
    2736:	2b00      	cmp	r3, #0
    2738:	bf14      	ite	ne
    273a:	2180      	movne	r1, #128	; 0x80
    273c:	2100      	moveq	r1, #0
    273e:	4308      	orrs	r0, r1
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    2740:	7aed      	ldrb	r5, [r5, #11]
    2742:	2d00      	cmp	r5, #0
    2744:	bf14      	ite	ne
    2746:	2202      	movne	r2, #2
    2748:	2200      	moveq	r2, #0
    274a:	4310      	orrs	r0, r2
    274c:	f242 6551 	movw	r5, #9809	; 0x2651
    2750:	f2c0 0500 	movt	r5, #0
    2754:	47a8      	blx	r5
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
	);
	wdt_set_ctrl(wdt->WDT_CTRL | WDT_CTRL_CEN);
    2756:	6820      	ldr	r0, [r4, #0]
    2758:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    275c:	47a8      	blx	r5
	while (!(wdt->WDT_CTRL & WDT_CTRL_CEN)) {
    275e:	6823      	ldr	r3, [r4, #0]
    2760:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2764:	d0fb      	beq.n	275e <wdt_init+0xaa>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    2766:	4620      	mov	r0, r4
    2768:	f241 41e1 	movw	r1, #5345	; 0x14e1
    276c:	f2c0 0100 	movt	r1, #0
    2770:	4788      	blx	r1

	return true;
    2772:	f04f 0001 	mov.w	r0, #1
    2776:	bd38      	pop	{r3, r4, r5, pc}
	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
		return false;
    2778:	f04f 0000 	mov.w	r0, #0

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);

	return true;
}
    277c:	bd38      	pop	{r3, r4, r5, pc}
    277e:	bf00      	nop

00002780 <wdt_disable>:
 * \brief Disable the WDT module.
 *
 * \param dev_inst    Device structure pointer.
 */
void wdt_disable(struct wdt_dev_inst *const dev_inst)
{
    2780:	b510      	push	{r4, lr}
	Wdt *wdt = dev_inst->hw_dev;
    2782:	6804      	ldr	r4, [r0, #0]

	/* Disable the WDT */
	wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    2784:	6820      	ldr	r0, [r4, #0]
    2786:	f020 0001 	bic.w	r0, r0, #1
    278a:	f242 6351 	movw	r3, #9809	; 0x2651
    278e:	f2c0 0300 	movt	r3, #0
    2792:	4798      	blx	r3
	while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    2794:	6821      	ldr	r1, [r4, #0]
    2796:	f011 0f01 	tst.w	r1, #1
    279a:	d1fb      	bne.n	2794 <wdt_disable+0x14>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    279c:	4620      	mov	r0, r4
    279e:	f241 42e1 	movw	r2, #5345	; 0x14e1
    27a2:	f2c0 0200 	movt	r2, #0
    27a6:	4790      	blx	r2
    27a8:	bd10      	pop	{r4, pc}
    27aa:	bf00      	nop

000027ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    27ac:	e7fe      	b.n	27ac <Dummy_Handler>
    27ae:	bf00      	nop

000027b0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    27b0:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
    27b2:	f240 0300 	movw	r3, #0
    27b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27ba:	f645 72c8 	movw	r2, #24520	; 0x5fc8
    27be:	f2c0 0200 	movt	r2, #0
    27c2:	429a      	cmp	r2, r3
    27c4:	d003      	beq.n	27ce <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
    27c6:	4839      	ldr	r0, [pc, #228]	; (28ac <Reset_Handler+0xfc>)
    27c8:	4939      	ldr	r1, [pc, #228]	; (28b0 <Reset_Handler+0x100>)
    27ca:	4281      	cmp	r1, r0
    27cc:	d304      	bcc.n	27d8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    27ce:	4b39      	ldr	r3, [pc, #228]	; (28b4 <Reset_Handler+0x104>)
    27d0:	4a39      	ldr	r2, [pc, #228]	; (28b8 <Reset_Handler+0x108>)
    27d2:	429a      	cmp	r2, r3
    27d4:	d325      	bcc.n	2822 <Reset_Handler+0x72>
    27d6:	e042      	b.n	285e <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    27d8:	4d38      	ldr	r5, [pc, #224]	; (28bc <Reset_Handler+0x10c>)
    27da:	4c39      	ldr	r4, [pc, #228]	; (28c0 <Reset_Handler+0x110>)
    27dc:	1b63      	subs	r3, r4, r5
    27de:	f023 0503 	bic.w	r5, r3, #3
    27e2:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    27e6:	f240 0200 	movw	r2, #0
    27ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ee:	f645 71c8 	movw	r1, #24520	; 0x5fc8
    27f2:	f2c0 0100 	movt	r1, #0
    27f6:	f105 0004 	add.w	r0, r5, #4
    27fa:	f3c5 0480 	ubfx	r4, r5, #2, #1
    27fe:	585d      	ldr	r5, [r3, r1]
    2800:	509d      	str	r5, [r3, r2]
    2802:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    2806:	4283      	cmp	r3, r0
    2808:	d146      	bne.n	2898 <Reset_Handler+0xe8>
    280a:	e7e0      	b.n	27ce <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
    280c:	585d      	ldr	r5, [r3, r1]
    280e:	509d      	str	r5, [r3, r2]
    2810:	f103 0304 	add.w	r3, r3, #4
    2814:	585c      	ldr	r4, [r3, r1]
    2816:	509c      	str	r4, [r3, r2]
    2818:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    281c:	4283      	cmp	r3, r0
    281e:	d1f5      	bne.n	280c <Reset_Handler+0x5c>
    2820:	e7d5      	b.n	27ce <Reset_Handler+0x1e>
    2822:	4d28      	ldr	r5, [pc, #160]	; (28c4 <Reset_Handler+0x114>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    2824:	4928      	ldr	r1, [pc, #160]	; (28c8 <Reset_Handler+0x118>)
    2826:	1b48      	subs	r0, r1, r5
    2828:	f020 0403 	bic.w	r4, r0, #3
    282c:	f640 1310 	movw	r3, #2320	; 0x910
    2830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2834:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    2836:	f04f 0100 	mov.w	r1, #0
    283a:	1b50      	subs	r0, r2, r5
    283c:	f1a0 0004 	sub.w	r0, r0, #4
    2840:	f3c0 0480 	ubfx	r4, r0, #2, #1
    2844:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    2848:	4295      	cmp	r5, r2
    284a:	d11e      	bne.n	288a <Reset_Handler+0xda>
    284c:	e007      	b.n	285e <Reset_Handler+0xae>
    284e:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
    2852:	6069      	str	r1, [r5, #4]
    2854:	f105 0508 	add.w	r5, r5, #8
    2858:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    285a:	4295      	cmp	r5, r2
    285c:	d1f7      	bne.n	284e <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    285e:	f240 0500 	movw	r5, #0
    2862:	f2c0 0500 	movt	r5, #0
    2866:	f025 027f 	bic.w	r2, r5, #127	; 0x7f
    286a:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    286e:	f2ce 0100 	movt	r1, #57344	; 0xe000
    2872:	608a      	str	r2, [r1, #8]

	/* Initialize the C library */
	__libc_init_array();
    2874:	f243 70c5 	movw	r0, #14277	; 0x37c5
    2878:	f2c0 0000 	movt	r0, #0
    287c:	4780      	blx	r0

	/* Branch to main function */
	main();
    287e:	f642 5469 	movw	r4, #11625	; 0x2d69
    2882:	f2c0 0400 	movt	r4, #0
    2886:	47a0      	blx	r4
    2888:	e7fe      	b.n	2888 <Reset_Handler+0xd8>
    288a:	2c00      	cmp	r4, #0
    288c:	d0df      	beq.n	284e <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    288e:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    2892:	4295      	cmp	r5, r2
    2894:	d1db      	bne.n	284e <Reset_Handler+0x9e>
    2896:	e7e2      	b.n	285e <Reset_Handler+0xae>
    2898:	2c00      	cmp	r4, #0
    289a:	d0b7      	beq.n	280c <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    289c:	585c      	ldr	r4, [r3, r1]
    289e:	509c      	str	r4, [r3, r2]
    28a0:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    28a4:	4283      	cmp	r3, r0
    28a6:	d1b1      	bne.n	280c <Reset_Handler+0x5c>
    28a8:	e791      	b.n	27ce <Reset_Handler+0x1e>
    28aa:	bf00      	nop
    28ac:	20000910 	.word	0x20000910
    28b0:	20000000 	.word	0x20000000
    28b4:	20000a00 	.word	0x20000a00
    28b8:	20000910 	.word	0x20000910
    28bc:	20000004 	.word	0x20000004
    28c0:	20000913 	.word	0x20000913
    28c4:	2000090c 	.word	0x2000090c
    28c8:	200009fb 	.word	0x200009fb

000028cc <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    28cc:	f640 1368 	movw	r3, #2408	; 0x968
    28d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28d4:	6819      	ldr	r1, [r3, #0]
    28d6:	b941      	cbnz	r1, 28ea <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
    28d8:	f640 1368 	movw	r3, #2408	; 0x968
    28dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28e0:	f641 2200 	movw	r2, #6656	; 0x1a00
    28e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28e8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    28ea:	f640 1168 	movw	r1, #2408	; 0x968
    28ee:	f2c2 0100 	movt	r1, #8192	; 0x2000
    28f2:	680b      	ldr	r3, [r1, #0]

	heap += incr;
    28f4:	1818      	adds	r0, r3, r0
    28f6:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
    28f8:	4618      	mov	r0, r3
    28fa:	4770      	bx	lr

000028fc <_close>:
}

extern int _close(int file)
{
	return -1;
}
    28fc:	f04f 30ff 	mov.w	r0, #4294967295
    2900:	4770      	bx	lr
    2902:	bf00      	nop

00002904 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2908:	604b      	str	r3, [r1, #4]

	return 0;
}
    290a:	f04f 0000 	mov.w	r0, #0
    290e:	4770      	bx	lr

00002910 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2910:	f04f 0001 	mov.w	r0, #1
    2914:	4770      	bx	lr
    2916:	bf00      	nop

00002918 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2918:	f04f 0000 	mov.w	r0, #0
    291c:	4770      	bx	lr
    291e:	bf00      	nop

00002920 <x_axis_callback>:
	base->GPIO_OVRC = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->GPIO_PVR & arch_ioport_pin_to_mask(pin);
    2920:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    2924:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2928:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    292a:	f3c2 2080 	ubfx	r0, r2, #10, #1
    292e:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
    2932:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2936:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	static int sensor1_prev_value = 0;
	
	sensor1 = ioport_get_pin_level(X_AXIS_OUT_1_PIN);
	sensor2 = ioport_get_pin_level(X_AXIS_OUT_2_PIN);
	
	if ((sensor1_prev_value == LOW) && (sensor1 == HIGH)) {
    2938:	f640 1370 	movw	r3, #2416	; 0x970
    293c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2940:	6819      	ldr	r1, [r3, #0]
    2942:	b961      	cbnz	r1, 295e <x_axis_callback+0x3e>
    2944:	b158      	cbz	r0, 295e <x_axis_callback+0x3e>
		if (sensor2 == LOW) {
    2946:	f412 7f80 	tst.w	r2, #256	; 0x100
			X_axis_pos--;
    294a:	f640 126c 	movw	r2, #2412	; 0x96c
    294e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2952:	6813      	ldr	r3, [r2, #0]
    2954:	bf0c      	ite	eq
    2956:	f103 33ff 	addeq.w	r3, r3, #4294967295
			} else {
			X_axis_pos++;
    295a:	3301      	addne	r3, #1
    295c:	6013      	str	r3, [r2, #0]
		}
	}

	sensor1_prev_value = sensor1;
    295e:	f640 1170 	movw	r1, #2416	; 0x970
    2962:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2966:	6008      	str	r0, [r1, #0]
    2968:	4770      	bx	lr
    296a:	bf00      	nop

0000296c <y_axis_callback>:
    296c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    2970:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2974:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    2976:	f3c2 0080 	ubfx	r0, r2, #2, #1
    297a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    297e:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2982:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	static int sensor1_prev_value = 0;
	
	sensor1 = ioport_get_pin_level(Y_AXIS_OUT_1_PIN);
	sensor2 = ioport_get_pin_level(Y_AXIS_OUT_2_PIN);
	
	if ((sensor1_prev_value == LOW) && (sensor1 == HIGH)) {
    2984:	f640 1374 	movw	r3, #2420	; 0x974
    2988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    298c:	6819      	ldr	r1, [r3, #0]
    298e:	b961      	cbnz	r1, 29aa <y_axis_callback+0x3e>
    2990:	b158      	cbz	r0, 29aa <y_axis_callback+0x3e>
		if (sensor2 == LOW) {
    2992:	f012 0f80 	tst.w	r2, #128	; 0x80
			Y_axis_pos--;
    2996:	f640 1278 	movw	r2, #2424	; 0x978
    299a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    299e:	6813      	ldr	r3, [r2, #0]
    29a0:	bf0c      	ite	eq
    29a2:	f103 33ff 	addeq.w	r3, r3, #4294967295
			} else {
			Y_axis_pos++;
    29a6:	3301      	addne	r3, #1
    29a8:	6013      	str	r3, [r2, #0]
		}
	}

	sensor1_prev_value = sensor1;
    29aa:	f640 1174 	movw	r1, #2420	; 0x974
    29ae:	f2c2 0100 	movt	r1, #8192	; 0x2000
    29b2:	6008      	str	r0, [r1, #0]
    29b4:	4770      	bx	lr
    29b6:	bf00      	nop

000029b8 <encoder_read_x_pos>:
}


int encoder_read_x_pos(void){
	return X_axis_pos;
}
    29b8:	f640 136c 	movw	r3, #2412	; 0x96c
    29bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29c0:	6818      	ldr	r0, [r3, #0]
    29c2:	4770      	bx	lr

000029c4 <encoder_read_y_pos>:


int encoder_read_y_pos(void){
	return Y_axis_pos;
}
    29c4:	f640 1378 	movw	r3, #2424	; 0x978
    29c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29cc:	6818      	ldr	r0, [r3, #0]
    29ce:	4770      	bx	lr

000029d0 <encoder_reset_pos_x>:

void encoder_reset_pos_x(){
	X_axis_pos = 0;
    29d0:	f640 136c 	movw	r3, #2412	; 0x96c
    29d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29d8:	f04f 0200 	mov.w	r2, #0
    29dc:	601a      	str	r2, [r3, #0]
    29de:	4770      	bx	lr

000029e0 <encoder_reset_pos_y>:
}
void encoder_reset_pos_y(){
	Y_axis_pos = 0;
    29e0:	f640 1378 	movw	r3, #2424	; 0x978
    29e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29e8:	f04f 0200 	mov.w	r2, #0
    29ec:	601a      	str	r2, [r3, #0]
    29ee:	4770      	bx	lr

000029f0 <encoder_init_gpio>:
}


void encoder_init_gpio(void){
    29f0:	b508      	push	{r3, lr}
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    29f2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    29f6:	f2c4 030e 	movt	r3, #16398	; 0x400e
    29fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    29fe:	649a      	str	r2, [r3, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    2a00:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
    2a04:	675a      	str	r2, [r3, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2a06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
    2a0a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    2a0e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2a12:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    2a14:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2a16:	639a      	str	r2, [r3, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (pin_sense & 0x01) {
		base->GPIO_IMR0S = mask;
	} else {
		base->GPIO_IMR0C = mask;
    2a18:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	}

	if (pin_sense & 0x02) {
		base->GPIO_IMR1S = mask;
	} else {
		base->GPIO_IMR1C = mask;
    2a1c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	ioport_set_pin_mode(X_AXIS_OUT_1_PIN, IOPORT_MODE_PULLUP |
	IOPORT_MODE_GLITCH_FILTER);
	
	ioport_set_pin_sense_mode(X_AXIS_OUT_1_PIN, IOPORT_SENSE_BOTHEDGES);
	
	if (!gpio_set_pin_callback(X_AXIS_OUT_1_PIN, x_axis_callback, 1)) {
    2a20:	f04f 002a 	mov.w	r0, #42	; 0x2a
    2a24:	f642 1121 	movw	r1, #10529	; 0x2921
    2a28:	f2c0 0100 	movt	r1, #0
    2a2c:	f04f 0201 	mov.w	r2, #1
    2a30:	f242 03d5 	movw	r3, #8405	; 0x20d5
    2a34:	f2c0 0300 	movt	r3, #0
    2a38:	4798      	blx	r3
    2a3a:	b948      	cbnz	r0, 2a50 <encoder_init_gpio+0x60>
		printf("Set pin callback failure!\r\n");
    2a3c:	f645 6094 	movw	r0, #24212	; 0x5e94
    2a40:	f2c0 0000 	movt	r0, #0
    2a44:	f643 0211 	movw	r2, #14353	; 0x3811
    2a48:	f2c0 0200 	movt	r2, #0
    2a4c:	4790      	blx	r2
    2a4e:	e7fe      	b.n	2a4e <encoder_init_gpio+0x5e>
 * \param pin The pin number.
 */
static inline void gpio_enable_pin_interrupt(ioport_pin_t pin)
{
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
	gpio_port->GPIO_IERS = ioport_pin_to_mask(pin);
    2a50:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    2a54:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2a58:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2a5c:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    2a60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    2a64:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2a68:	f44f 7280 	mov.w	r2, #256	; 0x100
    2a6c:	649a      	str	r2, [r3, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    2a6e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
    2a72:	675a      	str	r2, [r3, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2a74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
    2a78:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    2a7c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2a80:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    2a82:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2a84:	639a      	str	r2, [r3, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (pin_sense & 0x01) {
		base->GPIO_IMR0S = mask;
	} else {
		base->GPIO_IMR0C = mask;
    2a86:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	}

	if (pin_sense & 0x02) {
		base->GPIO_IMR1S = mask;
	} else {
		base->GPIO_IMR1C = mask;
    2a8a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	ioport_set_pin_mode(X_AXIS_OUT_2_PIN, IOPORT_MODE_PULLUP |
	IOPORT_MODE_GLITCH_FILTER);
	
	ioport_set_pin_sense_mode(X_AXIS_OUT_2_PIN, IOPORT_SENSE_BOTHEDGES);
	
	if (!gpio_set_pin_callback(X_AXIS_OUT_2_PIN, x_axis_callback, 1)) {
    2a8e:	f04f 0048 	mov.w	r0, #72	; 0x48
    2a92:	f642 1121 	movw	r1, #10529	; 0x2921
    2a96:	f2c0 0100 	movt	r1, #0
    2a9a:	f04f 0201 	mov.w	r2, #1
    2a9e:	f242 03d5 	movw	r3, #8405	; 0x20d5
    2aa2:	f2c0 0300 	movt	r3, #0
    2aa6:	4798      	blx	r3
    2aa8:	b948      	cbnz	r0, 2abe <encoder_init_gpio+0xce>
		printf("Set pin callback failure!\r\n");
    2aaa:	f645 6094 	movw	r0, #24212	; 0x5e94
    2aae:	f2c0 0000 	movt	r0, #0
    2ab2:	f643 0111 	movw	r1, #14353	; 0x3811
    2ab6:	f2c0 0100 	movt	r1, #0
    2aba:	4788      	blx	r1
    2abc:	e7fe      	b.n	2abc <encoder_init_gpio+0xcc>
    2abe:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
    2ac2:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
    2aca:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    2ace:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    2ad2:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2ad6:	f04f 0204 	mov.w	r2, #4
    2ada:	649a      	str	r2, [r3, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    2adc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
    2ae0:	675a      	str	r2, [r3, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
    2ae6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    2aea:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2aee:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    2af0:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2af2:	639a      	str	r2, [r3, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (pin_sense & 0x01) {
		base->GPIO_IMR0S = mask;
	} else {
		base->GPIO_IMR0C = mask;
    2af4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	}

	if (pin_sense & 0x02) {
		base->GPIO_IMR1S = mask;
	} else {
		base->GPIO_IMR1C = mask;
    2af8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	ioport_set_pin_mode(Y_AXIS_OUT_1_PIN, IOPORT_MODE_PULLUP |
	IOPORT_MODE_GLITCH_FILTER);
	
	ioport_set_pin_sense_mode(Y_AXIS_OUT_1_PIN, IOPORT_SENSE_BOTHEDGES);
	
	if (!gpio_set_pin_callback(Y_AXIS_OUT_1_PIN, y_axis_callback, 1)) {
    2afc:	f04f 0022 	mov.w	r0, #34	; 0x22
    2b00:	f642 116d 	movw	r1, #10605	; 0x296d
    2b04:	f2c0 0100 	movt	r1, #0
    2b08:	f04f 0201 	mov.w	r2, #1
    2b0c:	f242 03d5 	movw	r3, #8405	; 0x20d5
    2b10:	f2c0 0300 	movt	r3, #0
    2b14:	4798      	blx	r3
    2b16:	b948      	cbnz	r0, 2b2c <encoder_init_gpio+0x13c>
		printf("Set pin callback failure!\r\n");
    2b18:	f645 6094 	movw	r0, #24212	; 0x5e94
    2b1c:	f2c0 0000 	movt	r0, #0
    2b20:	f643 0311 	movw	r3, #14353	; 0x3811
    2b24:	f2c0 0300 	movt	r3, #0
    2b28:	4798      	blx	r3
    2b2a:	e7fe      	b.n	2b2a <encoder_init_gpio+0x13a>
    2b2c:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    2b30:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2b34:	f04f 0104 	mov.w	r1, #4
    2b38:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    2b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    2b40:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2b44:	f04f 0280 	mov.w	r2, #128	; 0x80
    2b48:	649a      	str	r2, [r3, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    2b4a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
    2b4e:	675a      	str	r2, [r3, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2b50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
    2b54:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    2b58:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2b5c:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    2b5e:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2b60:	639a      	str	r2, [r3, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (pin_sense & 0x01) {
		base->GPIO_IMR0S = mask;
	} else {
		base->GPIO_IMR0C = mask;
    2b62:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	}

	if (pin_sense & 0x02) {
		base->GPIO_IMR1S = mask;
	} else {
		base->GPIO_IMR1C = mask;
    2b66:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	ioport_set_pin_mode(Y_AXIS_OUT_2_PIN, IOPORT_MODE_PULLUP |
	IOPORT_MODE_GLITCH_FILTER);
	
	ioport_set_pin_sense_mode(Y_AXIS_OUT_2_PIN, IOPORT_SENSE_BOTHEDGES);
	
	if (!gpio_set_pin_callback(Y_AXIS_OUT_2_PIN, y_axis_callback, 1)) {
    2b6a:	f04f 0007 	mov.w	r0, #7
    2b6e:	f642 116d 	movw	r1, #10605	; 0x296d
    2b72:	f2c0 0100 	movt	r1, #0
    2b76:	f04f 0201 	mov.w	r2, #1
    2b7a:	f242 03d5 	movw	r3, #8405	; 0x20d5
    2b7e:	f2c0 0300 	movt	r3, #0
    2b82:	4798      	blx	r3
    2b84:	b948      	cbnz	r0, 2b9a <encoder_init_gpio+0x1aa>
		printf("Set pin callback failure!\r\n");
    2b86:	f645 6094 	movw	r0, #24212	; 0x5e94
    2b8a:	f2c0 0000 	movt	r0, #0
    2b8e:	f643 0211 	movw	r2, #14353	; 0x3811
    2b92:	f2c0 0200 	movt	r2, #0
    2b96:	4790      	blx	r2
    2b98:	e7fe      	b.n	2b98 <encoder_init_gpio+0x1a8>
    2b9a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    2b9e:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2ba2:	f04f 0180 	mov.w	r1, #128	; 0x80
    2ba6:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
    2baa:	bd08      	pop	{r3, pc}

00002bac <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
    2bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bae:	b083      	sub	sp, #12
    2bb0:	4604      	mov	r4, r0
    2bb2:	460d      	mov	r5, r1
	uint32_t val = 0;
    2bb4:	f04f 0300 	mov.w	r3, #0
    2bb8:	9301      	str	r3, [sp, #4]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    2bba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    2bbe:	f2c4 0002 	movt	r0, #16386	; 0x4002
    2bc2:	4284      	cmp	r4, r0
    2bc4:	d10f      	bne.n	2be6 <usart_serial_getchar+0x3a>
		while (usart_read(p_usart, &val));
    2bc6:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    2bca:	f2c4 0602 	movt	r6, #16386	; 0x4002
    2bce:	f242 5765 	movw	r7, #9573	; 0x2565
    2bd2:	f2c0 0700 	movt	r7, #0
    2bd6:	4630      	mov	r0, r6
    2bd8:	a901      	add	r1, sp, #4
    2bda:	47b8      	blx	r7
    2bdc:	2800      	cmp	r0, #0
    2bde:	d1fa      	bne.n	2bd6 <usart_serial_getchar+0x2a>
		*data = (uint8_t)(val & 0xFF);
    2be0:	9901      	ldr	r1, [sp, #4]
    2be2:	7029      	strb	r1, [r5, #0]
    2be4:	e02b      	b.n	2c3e <usart_serial_getchar+0x92>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    2be6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2bea:	f2c4 0102 	movt	r1, #16386	; 0x4002
    2bee:	428c      	cmp	r4, r1
    2bf0:	d10f      	bne.n	2c12 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
    2bf2:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    2bf6:	f2c4 0402 	movt	r4, #16386	; 0x4002
    2bfa:	f242 5665 	movw	r6, #9573	; 0x2565
    2bfe:	f2c0 0600 	movt	r6, #0
    2c02:	4620      	mov	r0, r4
    2c04:	a901      	add	r1, sp, #4
    2c06:	47b0      	blx	r6
    2c08:	2800      	cmp	r0, #0
    2c0a:	d1fa      	bne.n	2c02 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
    2c0c:	9801      	ldr	r0, [sp, #4]
    2c0e:	7028      	strb	r0, [r5, #0]
    2c10:	e02a      	b.n	2c68 <usart_serial_getchar+0xbc>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    2c12:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    2c16:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2c1a:	4294      	cmp	r4, r2
    2c1c:	d10f      	bne.n	2c3e <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
    2c1e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
    2c22:	f2c4 0402 	movt	r4, #16386	; 0x4002
    2c26:	f242 5665 	movw	r6, #9573	; 0x2565
    2c2a:	f2c0 0600 	movt	r6, #0
    2c2e:	4620      	mov	r0, r4
    2c30:	a901      	add	r1, sp, #4
    2c32:	47b0      	blx	r6
    2c34:	2800      	cmp	r0, #0
    2c36:	d1fa      	bne.n	2c2e <usart_serial_getchar+0x82>
		*data = (uint8_t)(val & 0xFF);
    2c38:	9b01      	ldr	r3, [sp, #4]
    2c3a:	702b      	strb	r3, [r5, #0]
    2c3c:	e014      	b.n	2c68 <usart_serial_getchar+0xbc>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    2c3e:	f04f 0200 	mov.w	r2, #0
    2c42:	f2c4 0203 	movt	r2, #16387	; 0x4003
    2c46:	4294      	cmp	r4, r2
    2c48:	d10e      	bne.n	2c68 <usart_serial_getchar+0xbc>
		while (usart_read(p_usart, &val));
    2c4a:	f04f 0400 	mov.w	r4, #0
    2c4e:	f2c4 0403 	movt	r4, #16387	; 0x4003
    2c52:	f242 5665 	movw	r6, #9573	; 0x2565
    2c56:	f2c0 0600 	movt	r6, #0
    2c5a:	4620      	mov	r0, r4
    2c5c:	a901      	add	r1, sp, #4
    2c5e:	47b0      	blx	r6
    2c60:	2800      	cmp	r0, #0
    2c62:	d1fa      	bne.n	2c5a <usart_serial_getchar+0xae>
		*data = (uint8_t)(val & 0xFF);
    2c64:	9b01      	ldr	r3, [sp, #4]
    2c66:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
    2c68:	b003      	add	sp, #12
    2c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002c6c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
    2c6c:	b570      	push	{r4, r5, r6, lr}
    2c6e:	460c      	mov	r4, r1
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    2c70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    2c74:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2c78:	4298      	cmp	r0, r3
    2c7a:	d10f      	bne.n	2c9c <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
    2c7c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    2c80:	f2c4 0502 	movt	r5, #16386	; 0x4002
    2c84:	f242 5645 	movw	r6, #9541	; 0x2545
    2c88:	f2c0 0600 	movt	r6, #0
    2c8c:	4628      	mov	r0, r5
    2c8e:	4621      	mov	r1, r4
    2c90:	47b0      	blx	r6
    2c92:	2800      	cmp	r0, #0
    2c94:	d1fa      	bne.n	2c8c <usart_serial_putchar+0x20>
		return 1;
    2c96:	f04f 0001 	mov.w	r0, #1
    2c9a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    2c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2ca0:	f2c4 0102 	movt	r1, #16386	; 0x4002
    2ca4:	4288      	cmp	r0, r1
    2ca6:	d10f      	bne.n	2cc8 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
    2ca8:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    2cac:	f2c4 0502 	movt	r5, #16386	; 0x4002
    2cb0:	f242 5645 	movw	r6, #9541	; 0x2545
    2cb4:	f2c0 0600 	movt	r6, #0
    2cb8:	4628      	mov	r0, r5
    2cba:	4621      	mov	r1, r4
    2cbc:	47b0      	blx	r6
    2cbe:	2800      	cmp	r0, #0
    2cc0:	d1fa      	bne.n	2cb8 <usart_serial_putchar+0x4c>
		return 1;
    2cc2:	f04f 0001 	mov.w	r0, #1
    2cc6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    2cc8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    2ccc:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2cd0:	4290      	cmp	r0, r2
    2cd2:	d10f      	bne.n	2cf4 <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
    2cd4:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    2cd8:	f2c4 0502 	movt	r5, #16386	; 0x4002
    2cdc:	f242 5645 	movw	r6, #9541	; 0x2545
    2ce0:	f2c0 0600 	movt	r6, #0
    2ce4:	4628      	mov	r0, r5
    2ce6:	4621      	mov	r1, r4
    2ce8:	47b0      	blx	r6
    2cea:	2800      	cmp	r0, #0
    2cec:	d1fa      	bne.n	2ce4 <usart_serial_putchar+0x78>
		return 1;
    2cee:	f04f 0001 	mov.w	r0, #1
    2cf2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    2cf4:	f04f 0300 	mov.w	r3, #0
    2cf8:	f2c4 0303 	movt	r3, #16387	; 0x4003
    2cfc:	4298      	cmp	r0, r3
    2cfe:	d10f      	bne.n	2d20 <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
    2d00:	f04f 0500 	mov.w	r5, #0
    2d04:	f2c4 0503 	movt	r5, #16387	; 0x4003
    2d08:	f242 5645 	movw	r6, #9541	; 0x2545
    2d0c:	f2c0 0600 	movt	r6, #0
    2d10:	4628      	mov	r0, r5
    2d12:	4621      	mov	r1, r4
    2d14:	47b0      	blx	r6
    2d16:	2800      	cmp	r0, #0
    2d18:	d1fa      	bne.n	2d10 <usart_serial_putchar+0xa4>
		return 1;
    2d1a:	f04f 0001 	mov.w	r0, #1
    2d1e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
    2d20:	f04f 0000 	mov.w	r0, #0
}
    2d24:	bd70      	pop	{r4, r5, r6, pc}
    2d26:	bf00      	nop

00002d28 <pb0_callback>:

/**
 * Push button 0 interrupt callback.
 */
static void pb0_callback(void)
{
    2d28:	b510      	push	{r4, lr}
	return arch_ioport_port_to_base(port)->GPIO_PVR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	arch_ioport_pin_to_base(pin)->GPIO_OVRT = arch_ioport_pin_to_mask(pin);
    2d2a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    2d2e:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2d32:	f04f 0280 	mov.w	r2, #128	; 0x80
    2d36:	65da      	str	r2, [r3, #92]	; 0x5c
	/* Toggle LED when an interrupt happen on push button */
	LED_Toggle(LED0);	
	printf("x=%d, y=%d \n", encoder_read_x_pos(), encoder_read_y_pos());
    2d38:	f642 10b9 	movw	r0, #10681	; 0x29b9
    2d3c:	f2c0 0000 	movt	r0, #0
    2d40:	4780      	blx	r0
    2d42:	4604      	mov	r4, r0
    2d44:	f642 11c5 	movw	r1, #10693	; 0x29c5
    2d48:	f2c0 0100 	movt	r1, #0
    2d4c:	4788      	blx	r1
    2d4e:	4602      	mov	r2, r0
    2d50:	f645 6084 	movw	r0, #24196	; 0x5e84
    2d54:	f2c0 0000 	movt	r0, #0
    2d58:	4621      	mov	r1, r4
    2d5a:	f643 0311 	movw	r3, #14353	; 0x3811
    2d5e:	f2c0 0300 	movt	r3, #0
    2d62:	4798      	blx	r3
    2d64:	bd10      	pop	{r4, pc}
    2d66:	bf00      	nop

00002d68 <main>:

/**
 * \brief Main entry point for GPIO example.
 */
int main(void)
{
    2d68:	b570      	push	{r4, r5, r6, lr}
    2d6a:	b086      	sub	sp, #24
	/* Initialize the SAM system */
	sysclk_init();
    2d6c:	f641 337d 	movw	r3, #7037	; 0x1b7d
    2d70:	f2c0 0300 	movt	r3, #0
    2d74:	4798      	blx	r3
	board_init();
    2d76:	f641 5085 	movw	r0, #7557	; 0x1d85
    2d7a:	f2c0 0000 	movt	r0, #0
    2d7e:	4780      	blx	r0
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    2d80:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    2d84:	f2c4 0402 	movt	r4, #16386	; 0x4002
    2d88:	f640 11b8 	movw	r1, #2488	; 0x9b8
    2d8c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2d90:	600c      	str	r4, [r1, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2d92:	f640 15b4 	movw	r5, #2484	; 0x9b4
    2d96:	f2c2 0500 	movt	r5, #8192	; 0x2000
    2d9a:	f642 426d 	movw	r2, #11373	; 0x2c6d
    2d9e:	f2c0 0200 	movt	r2, #0
    2da2:	602a      	str	r2, [r5, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2da4:	f640 16b0 	movw	r6, #2480	; 0x9b0
    2da8:	f2c2 0600 	movt	r6, #8192	; 0x2000
    2dac:	f642 33ad 	movw	r3, #11181	; 0x2bad
    2db0:	f2c0 0300 	movt	r3, #0
    2db4:	6033      	str	r3, [r6, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
    2db6:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
    2dba:	9000      	str	r0, [sp, #0]
	usart_settings.char_length = opt->charlength;
    2dbc:	f04f 01c0 	mov.w	r1, #192	; 0xc0
    2dc0:	9101      	str	r1, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
    2dc2:	f44f 6500 	mov.w	r5, #2048	; 0x800
    2dc6:	9502      	str	r5, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
    2dc8:	f04f 0500 	mov.w	r5, #0
    2dcc:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
    2dce:	9504      	str	r5, [sp, #16]
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    2dd0:	4620      	mov	r0, r4
    2dd2:	f640 6201 	movw	r2, #3585	; 0xe01
    2dd6:	f2c0 0200 	movt	r2, #0
    2dda:	4790      	blx	r2
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    2ddc:	4620      	mov	r0, r4
    2dde:	f640 3605 	movw	r6, #2821	; 0xb05
    2de2:	f2c0 0600 	movt	r6, #0
    2de6:	47b0      	blx	r6
    2de8:	4602      	mov	r2, r0
    2dea:	4620      	mov	r0, r4
    2dec:	4669      	mov	r1, sp
    2dee:	f242 53ed 	movw	r3, #9709	; 0x25ed
    2df2:	f2c0 0300 	movt	r3, #0
    2df6:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    2df8:	4620      	mov	r0, r4
    2dfa:	f242 510d 	movw	r1, #9485	; 0x250d
    2dfe:	f2c0 0100 	movt	r1, #0
    2e02:	4788      	blx	r1
		usart_enable_rx(p_usart);
    2e04:	4620      	mov	r0, r4
    2e06:	f242 541d 	movw	r4, #9501	; 0x251d
    2e0a:	f2c0 0400 	movt	r4, #0
    2e0e:	47a0      	blx	r4
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2e10:	f240 0650 	movw	r6, #80	; 0x50
    2e14:	f2c2 0600 	movt	r6, #8192	; 0x2000
    2e18:	6830      	ldr	r0, [r6, #0]
    2e1a:	6880      	ldr	r0, [r0, #8]
    2e1c:	4629      	mov	r1, r5
    2e1e:	f643 0461 	movw	r4, #14433	; 0x3861
    2e22:	f2c0 0400 	movt	r4, #0
    2e26:	47a0      	blx	r4
	setbuf(stdin, NULL);
    2e28:	6832      	ldr	r2, [r6, #0]
    2e2a:	6850      	ldr	r0, [r2, #4]
    2e2c:	4629      	mov	r1, r5
    2e2e:	47a0      	blx	r4

	/* Initialize the console uart */
	configure_console();

	/* Output example information */
	printf("\r\n\r\n-- GPIO interrupt and event example --\r\n");
    2e30:	f645 60b0 	movw	r0, #24240	; 0x5eb0
    2e34:	f2c0 0000 	movt	r0, #0
    2e38:	f643 0511 	movw	r5, #14353	; 0x3811
    2e3c:	f2c0 0500 	movt	r5, #0
    2e40:	47a8      	blx	r5
	printf("-- %s\r\n", BOARD_NAME);
    2e42:	f645 60e0 	movw	r0, #24288	; 0x5ee0
    2e46:	f2c0 0000 	movt	r0, #0
    2e4a:	f645 61e8 	movw	r1, #24296	; 0x5ee8
    2e4e:	f2c0 0100 	movt	r1, #0
    2e52:	47a8      	blx	r5
	printf("-- Compiled: %s %s --\r\n", __DATE__, __TIME__);
    2e54:	f645 60fc 	movw	r0, #24316	; 0x5efc
    2e58:	f2c0 0000 	movt	r0, #0
    2e5c:	f645 7114 	movw	r1, #24340	; 0x5f14
    2e60:	f2c0 0100 	movt	r1, #0
    2e64:	f645 7220 	movw	r2, #24352	; 0x5f20
    2e68:	f2c0 0200 	movt	r2, #0
    2e6c:	47a8      	blx	r5
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    2e6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    2e72:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2e76:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    2e7a:	6499      	str	r1, [r3, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    2e7c:	f8c3 1164 	str.w	r1, [r3, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
    2e80:	6759      	str	r1, [r3, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2e82:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	}
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
    2e86:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    2e8a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2e8e:	6199      	str	r1, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    2e90:	6299      	str	r1, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2e92:	6399      	str	r1, [r3, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (pin_sense & 0x01) {
		base->GPIO_IMR0S = mask;
	} else {
		base->GPIO_IMR0C = mask;
    2e94:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	}

	if (pin_sense & 0x02) {
		base->GPIO_IMR1S = mask;
    2e98:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
	ioport_set_pin_mode(EXAMPLE_BUTTON_INT, IOPORT_MODE_PULLUP |
			IOPORT_MODE_GLITCH_FILTER);
			
	ioport_set_pin_sense_mode(EXAMPLE_BUTTON_INT, IOPORT_SENSE_FALLING);
	
	if (!gpio_set_pin_callback(EXAMPLE_BUTTON_INT, pb0_callback, 1)) {
    2e9c:	f04f 0058 	mov.w	r0, #88	; 0x58
    2ea0:	f642 5129 	movw	r1, #11561	; 0x2d29
    2ea4:	f2c0 0100 	movt	r1, #0
    2ea8:	f04f 0201 	mov.w	r2, #1
    2eac:	f242 06d5 	movw	r6, #8405	; 0x20d5
    2eb0:	f2c0 0600 	movt	r6, #0
    2eb4:	47b0      	blx	r6
    2eb6:	b928      	cbnz	r0, 2ec4 <main+0x15c>
		printf("Set pin callback failure!\r\n");
    2eb8:	f645 6094 	movw	r0, #24212	; 0x5e94
    2ebc:	f2c0 0000 	movt	r0, #0
    2ec0:	47a8      	blx	r5
    2ec2:	e7fe      	b.n	2ec2 <main+0x15a>
    2ec4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
    2ec8:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2ecc:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
    2ed0:	f8c0 4094 	str.w	r4, [r0, #148]	; 0x94
		while (1) {
		}
	}
	gpio_enable_pin_interrupt(EXAMPLE_BUTTON_INT);
	printf("Press %s to trigger LED.\r\n", BUTTON_0_NAME);
    2ed4:	f645 702c 	movw	r0, #24364	; 0x5f2c
    2ed8:	f2c0 0000 	movt	r0, #0
    2edc:	f645 7148 	movw	r1, #24392	; 0x5f48
    2ee0:	f2c0 0100 	movt	r1, #0
    2ee4:	f643 0211 	movw	r2, #14353	; 0x3811
    2ee8:	f2c0 0200 	movt	r2, #0
    2eec:	4790      	blx	r2
	
	
	delay_init(F_CPU);
	
	/* Initialize interrupt gpio */
    encoder_init_gpio();
    2eee:	f642 15f1 	movw	r5, #10737	; 0x29f1
    2ef2:	f2c0 0500 	movt	r5, #0
    2ef6:	47a8      	blx	r5
	
	/* Initialize motor shield */
	ms_init();
    2ef8:	f240 63e1 	movw	r3, #1761	; 0x6e1
    2efc:	f2c0 0300 	movt	r3, #0
    2f00:	4798      	blx	r3
	
	/* Initialize servos */
	servo_init();
    2f02:	f240 3131 	movw	r1, #817	; 0x331
    2f06:	f2c0 0100 	movt	r1, #0
    2f0a:	4788      	blx	r1
	//controller_set_position(200, MOTOR_2_Y);
	//controller_set_position(200, MOTOR_1_X);
	
	//servo_magnet_set(1);
	
	controller_move_piece(5,1,0,3);
    2f0c:	f04f 0005 	mov.w	r0, #5
    2f10:	f04f 0101 	mov.w	r1, #1
    2f14:	f04f 0200 	mov.w	r2, #0
    2f18:	f04f 0303 	mov.w	r3, #3
    2f1c:	f240 561d 	movw	r6, #1309	; 0x51d
    2f20:	f2c0 0600 	movt	r6, #0
    2f24:	47b0      	blx	r6
    2f26:	e7fe      	b.n	2f26 <main+0x1be>

00002f28 <__aeabi_drsub>:
    2f28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    2f2c:	e002      	b.n	2f34 <__adddf3>
    2f2e:	bf00      	nop

00002f30 <__aeabi_dsub>:
    2f30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00002f34 <__adddf3>:
    2f34:	b530      	push	{r4, r5, lr}
    2f36:	ea4f 0441 	mov.w	r4, r1, lsl #1
    2f3a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    2f3e:	ea94 0f05 	teq	r4, r5
    2f42:	bf08      	it	eq
    2f44:	ea90 0f02 	teqeq	r0, r2
    2f48:	bf1f      	itttt	ne
    2f4a:	ea54 0c00 	orrsne.w	ip, r4, r0
    2f4e:	ea55 0c02 	orrsne.w	ip, r5, r2
    2f52:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    2f56:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    2f5a:	f000 80e2 	beq.w	3122 <__adddf3+0x1ee>
    2f5e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    2f62:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    2f66:	bfb8      	it	lt
    2f68:	426d      	neglt	r5, r5
    2f6a:	dd0c      	ble.n	2f86 <__adddf3+0x52>
    2f6c:	442c      	add	r4, r5
    2f6e:	ea80 0202 	eor.w	r2, r0, r2
    2f72:	ea81 0303 	eor.w	r3, r1, r3
    2f76:	ea82 0000 	eor.w	r0, r2, r0
    2f7a:	ea83 0101 	eor.w	r1, r3, r1
    2f7e:	ea80 0202 	eor.w	r2, r0, r2
    2f82:	ea81 0303 	eor.w	r3, r1, r3
    2f86:	2d36      	cmp	r5, #54	; 0x36
    2f88:	bf88      	it	hi
    2f8a:	bd30      	pophi	{r4, r5, pc}
    2f8c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    2f90:	ea4f 3101 	mov.w	r1, r1, lsl #12
    2f94:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    2f98:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    2f9c:	d002      	beq.n	2fa4 <__adddf3+0x70>
    2f9e:	4240      	negs	r0, r0
    2fa0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    2fa4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    2fa8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    2fac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    2fb0:	d002      	beq.n	2fb8 <__adddf3+0x84>
    2fb2:	4252      	negs	r2, r2
    2fb4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2fb8:	ea94 0f05 	teq	r4, r5
    2fbc:	f000 80a7 	beq.w	310e <__adddf3+0x1da>
    2fc0:	f1a4 0401 	sub.w	r4, r4, #1
    2fc4:	f1d5 0e20 	rsbs	lr, r5, #32
    2fc8:	db0d      	blt.n	2fe6 <__adddf3+0xb2>
    2fca:	fa02 fc0e 	lsl.w	ip, r2, lr
    2fce:	fa22 f205 	lsr.w	r2, r2, r5
    2fd2:	1880      	adds	r0, r0, r2
    2fd4:	f141 0100 	adc.w	r1, r1, #0
    2fd8:	fa03 f20e 	lsl.w	r2, r3, lr
    2fdc:	1880      	adds	r0, r0, r2
    2fde:	fa43 f305 	asr.w	r3, r3, r5
    2fe2:	4159      	adcs	r1, r3
    2fe4:	e00e      	b.n	3004 <__adddf3+0xd0>
    2fe6:	f1a5 0520 	sub.w	r5, r5, #32
    2fea:	f10e 0e20 	add.w	lr, lr, #32
    2fee:	2a01      	cmp	r2, #1
    2ff0:	fa03 fc0e 	lsl.w	ip, r3, lr
    2ff4:	bf28      	it	cs
    2ff6:	f04c 0c02 	orrcs.w	ip, ip, #2
    2ffa:	fa43 f305 	asr.w	r3, r3, r5
    2ffe:	18c0      	adds	r0, r0, r3
    3000:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    3004:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3008:	d507      	bpl.n	301a <__adddf3+0xe6>
    300a:	f04f 0e00 	mov.w	lr, #0
    300e:	f1dc 0c00 	rsbs	ip, ip, #0
    3012:	eb7e 0000 	sbcs.w	r0, lr, r0
    3016:	eb6e 0101 	sbc.w	r1, lr, r1
    301a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    301e:	d31b      	bcc.n	3058 <__adddf3+0x124>
    3020:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    3024:	d30c      	bcc.n	3040 <__adddf3+0x10c>
    3026:	0849      	lsrs	r1, r1, #1
    3028:	ea5f 0030 	movs.w	r0, r0, rrx
    302c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    3030:	f104 0401 	add.w	r4, r4, #1
    3034:	ea4f 5244 	mov.w	r2, r4, lsl #21
    3038:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    303c:	f080 809a 	bcs.w	3174 <__adddf3+0x240>
    3040:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    3044:	bf08      	it	eq
    3046:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    304a:	f150 0000 	adcs.w	r0, r0, #0
    304e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    3052:	ea41 0105 	orr.w	r1, r1, r5
    3056:	bd30      	pop	{r4, r5, pc}
    3058:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    305c:	4140      	adcs	r0, r0
    305e:	eb41 0101 	adc.w	r1, r1, r1
    3062:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3066:	f1a4 0401 	sub.w	r4, r4, #1
    306a:	d1e9      	bne.n	3040 <__adddf3+0x10c>
    306c:	f091 0f00 	teq	r1, #0
    3070:	bf04      	itt	eq
    3072:	4601      	moveq	r1, r0
    3074:	2000      	moveq	r0, #0
    3076:	fab1 f381 	clz	r3, r1
    307a:	bf08      	it	eq
    307c:	3320      	addeq	r3, #32
    307e:	f1a3 030b 	sub.w	r3, r3, #11
    3082:	f1b3 0220 	subs.w	r2, r3, #32
    3086:	da0c      	bge.n	30a2 <__adddf3+0x16e>
    3088:	320c      	adds	r2, #12
    308a:	dd08      	ble.n	309e <__adddf3+0x16a>
    308c:	f102 0c14 	add.w	ip, r2, #20
    3090:	f1c2 020c 	rsb	r2, r2, #12
    3094:	fa01 f00c 	lsl.w	r0, r1, ip
    3098:	fa21 f102 	lsr.w	r1, r1, r2
    309c:	e00c      	b.n	30b8 <__adddf3+0x184>
    309e:	f102 0214 	add.w	r2, r2, #20
    30a2:	bfd8      	it	le
    30a4:	f1c2 0c20 	rsble	ip, r2, #32
    30a8:	fa01 f102 	lsl.w	r1, r1, r2
    30ac:	fa20 fc0c 	lsr.w	ip, r0, ip
    30b0:	bfdc      	itt	le
    30b2:	ea41 010c 	orrle.w	r1, r1, ip
    30b6:	4090      	lslle	r0, r2
    30b8:	1ae4      	subs	r4, r4, r3
    30ba:	bfa2      	ittt	ge
    30bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    30c0:	4329      	orrge	r1, r5
    30c2:	bd30      	popge	{r4, r5, pc}
    30c4:	ea6f 0404 	mvn.w	r4, r4
    30c8:	3c1f      	subs	r4, #31
    30ca:	da1c      	bge.n	3106 <__adddf3+0x1d2>
    30cc:	340c      	adds	r4, #12
    30ce:	dc0e      	bgt.n	30ee <__adddf3+0x1ba>
    30d0:	f104 0414 	add.w	r4, r4, #20
    30d4:	f1c4 0220 	rsb	r2, r4, #32
    30d8:	fa20 f004 	lsr.w	r0, r0, r4
    30dc:	fa01 f302 	lsl.w	r3, r1, r2
    30e0:	ea40 0003 	orr.w	r0, r0, r3
    30e4:	fa21 f304 	lsr.w	r3, r1, r4
    30e8:	ea45 0103 	orr.w	r1, r5, r3
    30ec:	bd30      	pop	{r4, r5, pc}
    30ee:	f1c4 040c 	rsb	r4, r4, #12
    30f2:	f1c4 0220 	rsb	r2, r4, #32
    30f6:	fa20 f002 	lsr.w	r0, r0, r2
    30fa:	fa01 f304 	lsl.w	r3, r1, r4
    30fe:	ea40 0003 	orr.w	r0, r0, r3
    3102:	4629      	mov	r1, r5
    3104:	bd30      	pop	{r4, r5, pc}
    3106:	fa21 f004 	lsr.w	r0, r1, r4
    310a:	4629      	mov	r1, r5
    310c:	bd30      	pop	{r4, r5, pc}
    310e:	f094 0f00 	teq	r4, #0
    3112:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    3116:	bf06      	itte	eq
    3118:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    311c:	3401      	addeq	r4, #1
    311e:	3d01      	subne	r5, #1
    3120:	e74e      	b.n	2fc0 <__adddf3+0x8c>
    3122:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    3126:	bf18      	it	ne
    3128:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    312c:	d029      	beq.n	3182 <__adddf3+0x24e>
    312e:	ea94 0f05 	teq	r4, r5
    3132:	bf08      	it	eq
    3134:	ea90 0f02 	teqeq	r0, r2
    3138:	d005      	beq.n	3146 <__adddf3+0x212>
    313a:	ea54 0c00 	orrs.w	ip, r4, r0
    313e:	bf04      	itt	eq
    3140:	4619      	moveq	r1, r3
    3142:	4610      	moveq	r0, r2
    3144:	bd30      	pop	{r4, r5, pc}
    3146:	ea91 0f03 	teq	r1, r3
    314a:	bf1e      	ittt	ne
    314c:	2100      	movne	r1, #0
    314e:	2000      	movne	r0, #0
    3150:	bd30      	popne	{r4, r5, pc}
    3152:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    3156:	d105      	bne.n	3164 <__adddf3+0x230>
    3158:	0040      	lsls	r0, r0, #1
    315a:	4149      	adcs	r1, r1
    315c:	bf28      	it	cs
    315e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    3162:	bd30      	pop	{r4, r5, pc}
    3164:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    3168:	bf3c      	itt	cc
    316a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    316e:	bd30      	popcc	{r4, r5, pc}
    3170:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3174:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    3178:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    317c:	f04f 0000 	mov.w	r0, #0
    3180:	bd30      	pop	{r4, r5, pc}
    3182:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    3186:	bf1a      	itte	ne
    3188:	4619      	movne	r1, r3
    318a:	4610      	movne	r0, r2
    318c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    3190:	bf1c      	itt	ne
    3192:	460b      	movne	r3, r1
    3194:	4602      	movne	r2, r0
    3196:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    319a:	bf06      	itte	eq
    319c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    31a0:	ea91 0f03 	teqeq	r1, r3
    31a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    31a8:	bd30      	pop	{r4, r5, pc}
    31aa:	bf00      	nop

000031ac <__aeabi_ui2d>:
    31ac:	f090 0f00 	teq	r0, #0
    31b0:	bf04      	itt	eq
    31b2:	2100      	moveq	r1, #0
    31b4:	4770      	bxeq	lr
    31b6:	b530      	push	{r4, r5, lr}
    31b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    31bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    31c0:	f04f 0500 	mov.w	r5, #0
    31c4:	f04f 0100 	mov.w	r1, #0
    31c8:	e750      	b.n	306c <__adddf3+0x138>
    31ca:	bf00      	nop

000031cc <__aeabi_i2d>:
    31cc:	f090 0f00 	teq	r0, #0
    31d0:	bf04      	itt	eq
    31d2:	2100      	moveq	r1, #0
    31d4:	4770      	bxeq	lr
    31d6:	b530      	push	{r4, r5, lr}
    31d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    31dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    31e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    31e4:	bf48      	it	mi
    31e6:	4240      	negmi	r0, r0
    31e8:	f04f 0100 	mov.w	r1, #0
    31ec:	e73e      	b.n	306c <__adddf3+0x138>
    31ee:	bf00      	nop

000031f0 <__aeabi_f2d>:
    31f0:	0042      	lsls	r2, r0, #1
    31f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
    31f6:	ea4f 0131 	mov.w	r1, r1, rrx
    31fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
    31fe:	bf1f      	itttt	ne
    3200:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    3204:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    3208:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    320c:	4770      	bxne	lr
    320e:	f092 0f00 	teq	r2, #0
    3212:	bf14      	ite	ne
    3214:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    3218:	4770      	bxeq	lr
    321a:	b530      	push	{r4, r5, lr}
    321c:	f44f 7460 	mov.w	r4, #896	; 0x380
    3220:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3224:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    3228:	e720      	b.n	306c <__adddf3+0x138>
    322a:	bf00      	nop

0000322c <__aeabi_ul2d>:
    322c:	ea50 0201 	orrs.w	r2, r0, r1
    3230:	bf08      	it	eq
    3232:	4770      	bxeq	lr
    3234:	b530      	push	{r4, r5, lr}
    3236:	f04f 0500 	mov.w	r5, #0
    323a:	e00a      	b.n	3252 <__aeabi_l2d+0x16>

0000323c <__aeabi_l2d>:
    323c:	ea50 0201 	orrs.w	r2, r0, r1
    3240:	bf08      	it	eq
    3242:	4770      	bxeq	lr
    3244:	b530      	push	{r4, r5, lr}
    3246:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    324a:	d502      	bpl.n	3252 <__aeabi_l2d+0x16>
    324c:	4240      	negs	r0, r0
    324e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    3252:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3256:	f104 0432 	add.w	r4, r4, #50	; 0x32
    325a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    325e:	f43f aedc 	beq.w	301a <__adddf3+0xe6>
    3262:	f04f 0203 	mov.w	r2, #3
    3266:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    326a:	bf18      	it	ne
    326c:	3203      	addne	r2, #3
    326e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    3272:	bf18      	it	ne
    3274:	3203      	addne	r2, #3
    3276:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    327a:	f1c2 0320 	rsb	r3, r2, #32
    327e:	fa00 fc03 	lsl.w	ip, r0, r3
    3282:	fa20 f002 	lsr.w	r0, r0, r2
    3286:	fa01 fe03 	lsl.w	lr, r1, r3
    328a:	ea40 000e 	orr.w	r0, r0, lr
    328e:	fa21 f102 	lsr.w	r1, r1, r2
    3292:	4414      	add	r4, r2
    3294:	e6c1      	b.n	301a <__adddf3+0xe6>
    3296:	bf00      	nop

00003298 <__aeabi_dmul>:
    3298:	b570      	push	{r4, r5, r6, lr}
    329a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    329e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    32a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    32a6:	bf1d      	ittte	ne
    32a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    32ac:	ea94 0f0c 	teqne	r4, ip
    32b0:	ea95 0f0c 	teqne	r5, ip
    32b4:	f000 f8de 	bleq	3474 <__aeabi_dmul+0x1dc>
    32b8:	442c      	add	r4, r5
    32ba:	ea81 0603 	eor.w	r6, r1, r3
    32be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    32c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    32c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    32ca:	bf18      	it	ne
    32cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    32d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    32d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    32d8:	d038      	beq.n	334c <__aeabi_dmul+0xb4>
    32da:	fba0 ce02 	umull	ip, lr, r0, r2
    32de:	f04f 0500 	mov.w	r5, #0
    32e2:	fbe1 e502 	umlal	lr, r5, r1, r2
    32e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    32ea:	fbe0 e503 	umlal	lr, r5, r0, r3
    32ee:	f04f 0600 	mov.w	r6, #0
    32f2:	fbe1 5603 	umlal	r5, r6, r1, r3
    32f6:	f09c 0f00 	teq	ip, #0
    32fa:	bf18      	it	ne
    32fc:	f04e 0e01 	orrne.w	lr, lr, #1
    3300:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    3304:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3308:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    330c:	d204      	bcs.n	3318 <__aeabi_dmul+0x80>
    330e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    3312:	416d      	adcs	r5, r5
    3314:	eb46 0606 	adc.w	r6, r6, r6
    3318:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    331c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    3320:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    3324:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    3328:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    332c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    3330:	bf88      	it	hi
    3332:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    3336:	d81e      	bhi.n	3376 <__aeabi_dmul+0xde>
    3338:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    333c:	bf08      	it	eq
    333e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    3342:	f150 0000 	adcs.w	r0, r0, #0
    3346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    334a:	bd70      	pop	{r4, r5, r6, pc}
    334c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    3350:	ea46 0101 	orr.w	r1, r6, r1
    3354:	ea40 0002 	orr.w	r0, r0, r2
    3358:	ea81 0103 	eor.w	r1, r1, r3
    335c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    3360:	bfc2      	ittt	gt
    3362:	ebd4 050c 	rsbsgt	r5, r4, ip
    3366:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    336a:	bd70      	popgt	{r4, r5, r6, pc}
    336c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    3370:	f04f 0e00 	mov.w	lr, #0
    3374:	3c01      	subs	r4, #1
    3376:	f300 80ab 	bgt.w	34d0 <__aeabi_dmul+0x238>
    337a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    337e:	bfde      	ittt	le
    3380:	2000      	movle	r0, #0
    3382:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    3386:	bd70      	pople	{r4, r5, r6, pc}
    3388:	f1c4 0400 	rsb	r4, r4, #0
    338c:	3c20      	subs	r4, #32
    338e:	da35      	bge.n	33fc <__aeabi_dmul+0x164>
    3390:	340c      	adds	r4, #12
    3392:	dc1b      	bgt.n	33cc <__aeabi_dmul+0x134>
    3394:	f104 0414 	add.w	r4, r4, #20
    3398:	f1c4 0520 	rsb	r5, r4, #32
    339c:	fa00 f305 	lsl.w	r3, r0, r5
    33a0:	fa20 f004 	lsr.w	r0, r0, r4
    33a4:	fa01 f205 	lsl.w	r2, r1, r5
    33a8:	ea40 0002 	orr.w	r0, r0, r2
    33ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    33b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    33b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    33b8:	fa21 f604 	lsr.w	r6, r1, r4
    33bc:	eb42 0106 	adc.w	r1, r2, r6
    33c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    33c4:	bf08      	it	eq
    33c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    33ca:	bd70      	pop	{r4, r5, r6, pc}
    33cc:	f1c4 040c 	rsb	r4, r4, #12
    33d0:	f1c4 0520 	rsb	r5, r4, #32
    33d4:	fa00 f304 	lsl.w	r3, r0, r4
    33d8:	fa20 f005 	lsr.w	r0, r0, r5
    33dc:	fa01 f204 	lsl.w	r2, r1, r4
    33e0:	ea40 0002 	orr.w	r0, r0, r2
    33e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    33e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    33ec:	f141 0100 	adc.w	r1, r1, #0
    33f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    33f4:	bf08      	it	eq
    33f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    33fa:	bd70      	pop	{r4, r5, r6, pc}
    33fc:	f1c4 0520 	rsb	r5, r4, #32
    3400:	fa00 f205 	lsl.w	r2, r0, r5
    3404:	ea4e 0e02 	orr.w	lr, lr, r2
    3408:	fa20 f304 	lsr.w	r3, r0, r4
    340c:	fa01 f205 	lsl.w	r2, r1, r5
    3410:	ea43 0302 	orr.w	r3, r3, r2
    3414:	fa21 f004 	lsr.w	r0, r1, r4
    3418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    341c:	fa21 f204 	lsr.w	r2, r1, r4
    3420:	ea20 0002 	bic.w	r0, r0, r2
    3424:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    3428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    342c:	bf08      	it	eq
    342e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    3432:	bd70      	pop	{r4, r5, r6, pc}
    3434:	f094 0f00 	teq	r4, #0
    3438:	d10f      	bne.n	345a <__aeabi_dmul+0x1c2>
    343a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    343e:	0040      	lsls	r0, r0, #1
    3440:	eb41 0101 	adc.w	r1, r1, r1
    3444:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3448:	bf08      	it	eq
    344a:	3c01      	subeq	r4, #1
    344c:	d0f7      	beq.n	343e <__aeabi_dmul+0x1a6>
    344e:	ea41 0106 	orr.w	r1, r1, r6
    3452:	f095 0f00 	teq	r5, #0
    3456:	bf18      	it	ne
    3458:	4770      	bxne	lr
    345a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    345e:	0052      	lsls	r2, r2, #1
    3460:	eb43 0303 	adc.w	r3, r3, r3
    3464:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    3468:	bf08      	it	eq
    346a:	3d01      	subeq	r5, #1
    346c:	d0f7      	beq.n	345e <__aeabi_dmul+0x1c6>
    346e:	ea43 0306 	orr.w	r3, r3, r6
    3472:	4770      	bx	lr
    3474:	ea94 0f0c 	teq	r4, ip
    3478:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    347c:	bf18      	it	ne
    347e:	ea95 0f0c 	teqne	r5, ip
    3482:	d00c      	beq.n	349e <__aeabi_dmul+0x206>
    3484:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    3488:	bf18      	it	ne
    348a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    348e:	d1d1      	bne.n	3434 <__aeabi_dmul+0x19c>
    3490:	ea81 0103 	eor.w	r1, r1, r3
    3494:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    3498:	f04f 0000 	mov.w	r0, #0
    349c:	bd70      	pop	{r4, r5, r6, pc}
    349e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    34a2:	bf06      	itte	eq
    34a4:	4610      	moveq	r0, r2
    34a6:	4619      	moveq	r1, r3
    34a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    34ac:	d019      	beq.n	34e2 <__aeabi_dmul+0x24a>
    34ae:	ea94 0f0c 	teq	r4, ip
    34b2:	d102      	bne.n	34ba <__aeabi_dmul+0x222>
    34b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    34b8:	d113      	bne.n	34e2 <__aeabi_dmul+0x24a>
    34ba:	ea95 0f0c 	teq	r5, ip
    34be:	d105      	bne.n	34cc <__aeabi_dmul+0x234>
    34c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    34c4:	bf1c      	itt	ne
    34c6:	4610      	movne	r0, r2
    34c8:	4619      	movne	r1, r3
    34ca:	d10a      	bne.n	34e2 <__aeabi_dmul+0x24a>
    34cc:	ea81 0103 	eor.w	r1, r1, r3
    34d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    34d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    34d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    34dc:	f04f 0000 	mov.w	r0, #0
    34e0:	bd70      	pop	{r4, r5, r6, pc}
    34e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    34e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    34ea:	bd70      	pop	{r4, r5, r6, pc}

000034ec <__aeabi_ddiv>:
    34ec:	b570      	push	{r4, r5, r6, lr}
    34ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
    34f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    34f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    34fa:	bf1d      	ittte	ne
    34fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    3500:	ea94 0f0c 	teqne	r4, ip
    3504:	ea95 0f0c 	teqne	r5, ip
    3508:	f000 f8a7 	bleq	365a <__aeabi_ddiv+0x16e>
    350c:	eba4 0405 	sub.w	r4, r4, r5
    3510:	ea81 0e03 	eor.w	lr, r1, r3
    3514:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    3518:	ea4f 3101 	mov.w	r1, r1, lsl #12
    351c:	f000 8088 	beq.w	3630 <__aeabi_ddiv+0x144>
    3520:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3524:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    3528:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    352c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    3530:	ea4f 2202 	mov.w	r2, r2, lsl #8
    3534:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    3538:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    353c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    3540:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    3544:	429d      	cmp	r5, r3
    3546:	bf08      	it	eq
    3548:	4296      	cmpeq	r6, r2
    354a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    354e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    3552:	d202      	bcs.n	355a <__aeabi_ddiv+0x6e>
    3554:	085b      	lsrs	r3, r3, #1
    3556:	ea4f 0232 	mov.w	r2, r2, rrx
    355a:	1ab6      	subs	r6, r6, r2
    355c:	eb65 0503 	sbc.w	r5, r5, r3
    3560:	085b      	lsrs	r3, r3, #1
    3562:	ea4f 0232 	mov.w	r2, r2, rrx
    3566:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    356a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    356e:	ebb6 0e02 	subs.w	lr, r6, r2
    3572:	eb75 0e03 	sbcs.w	lr, r5, r3
    3576:	bf22      	ittt	cs
    3578:	1ab6      	subcs	r6, r6, r2
    357a:	4675      	movcs	r5, lr
    357c:	ea40 000c 	orrcs.w	r0, r0, ip
    3580:	085b      	lsrs	r3, r3, #1
    3582:	ea4f 0232 	mov.w	r2, r2, rrx
    3586:	ebb6 0e02 	subs.w	lr, r6, r2
    358a:	eb75 0e03 	sbcs.w	lr, r5, r3
    358e:	bf22      	ittt	cs
    3590:	1ab6      	subcs	r6, r6, r2
    3592:	4675      	movcs	r5, lr
    3594:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    3598:	085b      	lsrs	r3, r3, #1
    359a:	ea4f 0232 	mov.w	r2, r2, rrx
    359e:	ebb6 0e02 	subs.w	lr, r6, r2
    35a2:	eb75 0e03 	sbcs.w	lr, r5, r3
    35a6:	bf22      	ittt	cs
    35a8:	1ab6      	subcs	r6, r6, r2
    35aa:	4675      	movcs	r5, lr
    35ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    35b0:	085b      	lsrs	r3, r3, #1
    35b2:	ea4f 0232 	mov.w	r2, r2, rrx
    35b6:	ebb6 0e02 	subs.w	lr, r6, r2
    35ba:	eb75 0e03 	sbcs.w	lr, r5, r3
    35be:	bf22      	ittt	cs
    35c0:	1ab6      	subcs	r6, r6, r2
    35c2:	4675      	movcs	r5, lr
    35c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    35c8:	ea55 0e06 	orrs.w	lr, r5, r6
    35cc:	d018      	beq.n	3600 <__aeabi_ddiv+0x114>
    35ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
    35d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    35d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    35da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    35de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    35e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    35e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    35ea:	d1c0      	bne.n	356e <__aeabi_ddiv+0x82>
    35ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    35f0:	d10b      	bne.n	360a <__aeabi_ddiv+0x11e>
    35f2:	ea41 0100 	orr.w	r1, r1, r0
    35f6:	f04f 0000 	mov.w	r0, #0
    35fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    35fe:	e7b6      	b.n	356e <__aeabi_ddiv+0x82>
    3600:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3604:	bf04      	itt	eq
    3606:	4301      	orreq	r1, r0
    3608:	2000      	moveq	r0, #0
    360a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    360e:	bf88      	it	hi
    3610:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    3614:	f63f aeaf 	bhi.w	3376 <__aeabi_dmul+0xde>
    3618:	ebb5 0c03 	subs.w	ip, r5, r3
    361c:	bf04      	itt	eq
    361e:	ebb6 0c02 	subseq.w	ip, r6, r2
    3622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    3626:	f150 0000 	adcs.w	r0, r0, #0
    362a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    362e:	bd70      	pop	{r4, r5, r6, pc}
    3630:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    3634:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    3638:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    363c:	bfc2      	ittt	gt
    363e:	ebd4 050c 	rsbsgt	r5, r4, ip
    3642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    3646:	bd70      	popgt	{r4, r5, r6, pc}
    3648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    364c:	f04f 0e00 	mov.w	lr, #0
    3650:	3c01      	subs	r4, #1
    3652:	e690      	b.n	3376 <__aeabi_dmul+0xde>
    3654:	ea45 0e06 	orr.w	lr, r5, r6
    3658:	e68d      	b.n	3376 <__aeabi_dmul+0xde>
    365a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    365e:	ea94 0f0c 	teq	r4, ip
    3662:	bf08      	it	eq
    3664:	ea95 0f0c 	teqeq	r5, ip
    3668:	f43f af3b 	beq.w	34e2 <__aeabi_dmul+0x24a>
    366c:	ea94 0f0c 	teq	r4, ip
    3670:	d10a      	bne.n	3688 <__aeabi_ddiv+0x19c>
    3672:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    3676:	f47f af34 	bne.w	34e2 <__aeabi_dmul+0x24a>
    367a:	ea95 0f0c 	teq	r5, ip
    367e:	f47f af25 	bne.w	34cc <__aeabi_dmul+0x234>
    3682:	4610      	mov	r0, r2
    3684:	4619      	mov	r1, r3
    3686:	e72c      	b.n	34e2 <__aeabi_dmul+0x24a>
    3688:	ea95 0f0c 	teq	r5, ip
    368c:	d106      	bne.n	369c <__aeabi_ddiv+0x1b0>
    368e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    3692:	f43f aefd 	beq.w	3490 <__aeabi_dmul+0x1f8>
    3696:	4610      	mov	r0, r2
    3698:	4619      	mov	r1, r3
    369a:	e722      	b.n	34e2 <__aeabi_dmul+0x24a>
    369c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    36a0:	bf18      	it	ne
    36a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    36a6:	f47f aec5 	bne.w	3434 <__aeabi_dmul+0x19c>
    36aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    36ae:	f47f af0d 	bne.w	34cc <__aeabi_dmul+0x234>
    36b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    36b6:	f47f aeeb 	bne.w	3490 <__aeabi_dmul+0x1f8>
    36ba:	e712      	b.n	34e2 <__aeabi_dmul+0x24a>

000036bc <__aeabi_d2uiz>:
    36bc:	004a      	lsls	r2, r1, #1
    36be:	d211      	bcs.n	36e4 <__aeabi_d2uiz+0x28>
    36c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    36c4:	d211      	bcs.n	36ea <__aeabi_d2uiz+0x2e>
    36c6:	d50d      	bpl.n	36e4 <__aeabi_d2uiz+0x28>
    36c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    36cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    36d0:	d40e      	bmi.n	36f0 <__aeabi_d2uiz+0x34>
    36d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    36d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    36da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    36de:	fa23 f002 	lsr.w	r0, r3, r2
    36e2:	4770      	bx	lr
    36e4:	f04f 0000 	mov.w	r0, #0
    36e8:	4770      	bx	lr
    36ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    36ee:	d102      	bne.n	36f6 <__aeabi_d2uiz+0x3a>
    36f0:	f04f 30ff 	mov.w	r0, #4294967295
    36f4:	4770      	bx	lr
    36f6:	f04f 0000 	mov.w	r0, #0
    36fa:	4770      	bx	lr

000036fc <__register_exitproc>:
    36fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3700:	4698      	mov	r8, r3
    3702:	4b23      	ldr	r3, [pc, #140]	; (3790 <__register_exitproc+0x94>)
    3704:	681c      	ldr	r4, [r3, #0]
    3706:	4606      	mov	r6, r0
    3708:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    370c:	460f      	mov	r7, r1
    370e:	4691      	mov	r9, r2
    3710:	b918      	cbnz	r0, 371a <__register_exitproc+0x1e>
    3712:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    3716:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    371a:	6841      	ldr	r1, [r0, #4]
    371c:	291f      	cmp	r1, #31
    371e:	dd16      	ble.n	374e <__register_exitproc+0x52>
    3720:	481c      	ldr	r0, [pc, #112]	; (3794 <__register_exitproc+0x98>)
    3722:	b918      	cbnz	r0, 372c <__register_exitproc+0x30>
    3724:	f04f 30ff 	mov.w	r0, #4294967295
    3728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    372c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    3730:	f001 fb42 	bl	4db8 <malloc>
    3734:	2800      	cmp	r0, #0
    3736:	d0f5      	beq.n	3724 <__register_exitproc+0x28>
    3738:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    373c:	2500      	movs	r5, #0
    373e:	6045      	str	r5, [r0, #4]
    3740:	6002      	str	r2, [r0, #0]
    3742:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    3746:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
    374a:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
    374e:	b1b6      	cbz	r6, 377e <__register_exitproc+0x82>
    3750:	6844      	ldr	r4, [r0, #4]
    3752:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    3756:	2201      	movs	r2, #1
    3758:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    375c:	fa02 f204 	lsl.w	r2, r2, r4
    3760:	4311      	orrs	r1, r2
    3762:	2e02      	cmp	r6, #2
    3764:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
    3768:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    376c:	461c      	mov	r4, r3
    376e:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
    3772:	d104      	bne.n	377e <__register_exitproc+0x82>
    3774:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
    3778:	431a      	orrs	r2, r3
    377a:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
    377e:	6841      	ldr	r1, [r0, #4]
    3780:	1c8b      	adds	r3, r1, #2
    3782:	1c4a      	adds	r2, r1, #1
    3784:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    3788:	6042      	str	r2, [r0, #4]
    378a:	2000      	movs	r0, #0
    378c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3790:	00005f4c 	.word	0x00005f4c
    3794:	00004db9 	.word	0x00004db9

00003798 <__libc_fini_array>:
    3798:	b570      	push	{r4, r5, r6, lr}
    379a:	4b08      	ldr	r3, [pc, #32]	; (37bc <__libc_fini_array+0x24>)
    379c:	4c08      	ldr	r4, [pc, #32]	; (37c0 <__libc_fini_array+0x28>)
    379e:	1ae0      	subs	r0, r4, r3
    37a0:	1084      	asrs	r4, r0, #2
    37a2:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    37a6:	2500      	movs	r5, #0
    37a8:	3d04      	subs	r5, #4
    37aa:	b11c      	cbz	r4, 37b4 <__libc_fini_array+0x1c>
    37ac:	5972      	ldr	r2, [r6, r5]
    37ae:	4790      	blx	r2
    37b0:	3c01      	subs	r4, #1
    37b2:	e7f9      	b.n	37a8 <__libc_fini_array+0x10>
    37b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    37b8:	f002 bbfa 	b.w	5fb0 <_fini>
    37bc:	00005fbc 	.word	0x00005fbc
    37c0:	00005fc0 	.word	0x00005fc0

000037c4 <__libc_init_array>:
    37c4:	b538      	push	{r3, r4, r5, lr}
    37c6:	4d0e      	ldr	r5, [pc, #56]	; (3800 <__libc_init_array+0x3c>)
    37c8:	4b0e      	ldr	r3, [pc, #56]	; (3804 <__libc_init_array+0x40>)
    37ca:	1ae8      	subs	r0, r5, r3
    37cc:	1085      	asrs	r5, r0, #2
    37ce:	2400      	movs	r4, #0
    37d0:	42ac      	cmp	r4, r5
    37d2:	d005      	beq.n	37e0 <__libc_init_array+0x1c>
    37d4:	490b      	ldr	r1, [pc, #44]	; (3804 <__libc_init_array+0x40>)
    37d6:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
    37da:	4790      	blx	r2
    37dc:	3401      	adds	r4, #1
    37de:	e7f7      	b.n	37d0 <__libc_init_array+0xc>
    37e0:	f002 fbdc 	bl	5f9c <_init>
    37e4:	4908      	ldr	r1, [pc, #32]	; (3808 <__libc_init_array+0x44>)
    37e6:	4a09      	ldr	r2, [pc, #36]	; (380c <__libc_init_array+0x48>)
    37e8:	1a54      	subs	r4, r2, r1
    37ea:	10a5      	asrs	r5, r4, #2
    37ec:	2400      	movs	r4, #0
    37ee:	42ac      	cmp	r4, r5
    37f0:	d005      	beq.n	37fe <__libc_init_array+0x3a>
    37f2:	4b05      	ldr	r3, [pc, #20]	; (3808 <__libc_init_array+0x44>)
    37f4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    37f8:	4780      	blx	r0
    37fa:	3401      	adds	r4, #1
    37fc:	e7f7      	b.n	37ee <__libc_init_array+0x2a>
    37fe:	bd38      	pop	{r3, r4, r5, pc}
    3800:	00005fa8 	.word	0x00005fa8
    3804:	00005fa8 	.word	0x00005fa8
    3808:	00005fa8 	.word	0x00005fa8
    380c:	00005fb0 	.word	0x00005fb0

00003810 <iprintf>:
    3810:	b40f      	push	{r0, r1, r2, r3}
    3812:	b507      	push	{r0, r1, r2, lr}
    3814:	4906      	ldr	r1, [pc, #24]	; (3830 <iprintf+0x20>)
    3816:	ab04      	add	r3, sp, #16
    3818:	6808      	ldr	r0, [r1, #0]
    381a:	f853 2b04 	ldr.w	r2, [r3], #4
    381e:	6881      	ldr	r1, [r0, #8]
    3820:	9301      	str	r3, [sp, #4]
    3822:	f000 f8cf 	bl	39c4 <_vfiprintf_r>
    3826:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
    382a:	b004      	add	sp, #16
    382c:	4770      	bx	lr
    382e:	bf00      	nop
    3830:	20000050 	.word	0x20000050

00003834 <_iprintf_r>:
    3834:	b40e      	push	{r1, r2, r3}
    3836:	b503      	push	{r0, r1, lr}
    3838:	ab03      	add	r3, sp, #12
    383a:	6881      	ldr	r1, [r0, #8]
    383c:	f853 2b04 	ldr.w	r2, [r3], #4
    3840:	9301      	str	r3, [sp, #4]
    3842:	f000 f8bf 	bl	39c4 <_vfiprintf_r>
    3846:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
    384a:	b003      	add	sp, #12
    384c:	4770      	bx	lr
    384e:	bf00      	nop

00003850 <memset>:
    3850:	1882      	adds	r2, r0, r2
    3852:	4603      	mov	r3, r0
    3854:	4293      	cmp	r3, r2
    3856:	d002      	beq.n	385e <memset+0xe>
    3858:	f803 1b01 	strb.w	r1, [r3], #1
    385c:	e7fa      	b.n	3854 <memset+0x4>
    385e:	4770      	bx	lr

00003860 <setbuf>:
    3860:	2900      	cmp	r1, #0
    3862:	bf0c      	ite	eq
    3864:	2202      	moveq	r2, #2
    3866:	2200      	movne	r2, #0
    3868:	f44f 6380 	mov.w	r3, #1024	; 0x400
    386c:	f000 b800 	b.w	3870 <setvbuf>

00003870 <setvbuf>:
    3870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3874:	461d      	mov	r5, r3
    3876:	4b37      	ldr	r3, [pc, #220]	; (3954 <setvbuf+0xe4>)
    3878:	4604      	mov	r4, r0
    387a:	6818      	ldr	r0, [r3, #0]
    387c:	460e      	mov	r6, r1
    387e:	4617      	mov	r7, r2
    3880:	4698      	mov	r8, r3
    3882:	b118      	cbz	r0, 388c <setvbuf+0x1c>
    3884:	6b82      	ldr	r2, [r0, #56]	; 0x38
    3886:	b90a      	cbnz	r2, 388c <setvbuf+0x1c>
    3888:	f000 fe54 	bl	4534 <__sinit>
    388c:	2f02      	cmp	r7, #2
    388e:	d85d      	bhi.n	394c <setvbuf+0xdc>
    3890:	2d00      	cmp	r5, #0
    3892:	db5b      	blt.n	394c <setvbuf+0xdc>
    3894:	4621      	mov	r1, r4
    3896:	f8d8 0000 	ldr.w	r0, [r8]
    389a:	f000 fd57 	bl	434c <_fflush_r>
    389e:	89a1      	ldrh	r1, [r4, #12]
    38a0:	f001 0380 	and.w	r3, r1, #128	; 0x80
    38a4:	2000      	movs	r0, #0
    38a6:	b21a      	sxth	r2, r3
    38a8:	6060      	str	r0, [r4, #4]
    38aa:	61a0      	str	r0, [r4, #24]
    38ac:	b122      	cbz	r2, 38b8 <setvbuf+0x48>
    38ae:	4829      	ldr	r0, [pc, #164]	; (3954 <setvbuf+0xe4>)
    38b0:	6921      	ldr	r1, [r4, #16]
    38b2:	6800      	ldr	r0, [r0, #0]
    38b4:	f000 ff7c 	bl	47b0 <_free_r>
    38b8:	89a1      	ldrh	r1, [r4, #12]
    38ba:	2f02      	cmp	r7, #2
    38bc:	f021 0383 	bic.w	r3, r1, #131	; 0x83
    38c0:	81a3      	strh	r3, [r4, #12]
    38c2:	d012      	beq.n	38ea <setvbuf+0x7a>
    38c4:	bb36      	cbnz	r6, 3914 <setvbuf+0xa4>
    38c6:	2d00      	cmp	r5, #0
    38c8:	bf08      	it	eq
    38ca:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    38ce:	4628      	mov	r0, r5
    38d0:	f001 fa72 	bl	4db8 <malloc>
    38d4:	4606      	mov	r6, r0
    38d6:	b9c8      	cbnz	r0, 390c <setvbuf+0x9c>
    38d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
    38dc:	f001 fa6c 	bl	4db8 <malloc>
    38e0:	4606      	mov	r6, r0
    38e2:	b988      	cbnz	r0, 3908 <setvbuf+0x98>
    38e4:	f04f 30ff 	mov.w	r0, #4294967295
    38e8:	e000      	b.n	38ec <setvbuf+0x7c>
    38ea:	2000      	movs	r0, #0
    38ec:	89a1      	ldrh	r1, [r4, #12]
    38ee:	f041 0302 	orr.w	r3, r1, #2
    38f2:	81a3      	strh	r3, [r4, #12]
    38f4:	f104 0143 	add.w	r1, r4, #67	; 0x43
    38f8:	2200      	movs	r2, #0
    38fa:	2301      	movs	r3, #1
    38fc:	60a2      	str	r2, [r4, #8]
    38fe:	6021      	str	r1, [r4, #0]
    3900:	6121      	str	r1, [r4, #16]
    3902:	6163      	str	r3, [r4, #20]
    3904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3908:	f44f 6580 	mov.w	r5, #1024	; 0x400
    390c:	89a2      	ldrh	r2, [r4, #12]
    390e:	f042 0080 	orr.w	r0, r2, #128	; 0x80
    3912:	81a0      	strh	r0, [r4, #12]
    3914:	2f01      	cmp	r7, #1
    3916:	d105      	bne.n	3924 <setvbuf+0xb4>
    3918:	89a1      	ldrh	r1, [r4, #12]
    391a:	426a      	negs	r2, r5
    391c:	f041 0301 	orr.w	r3, r1, #1
    3920:	81a3      	strh	r3, [r4, #12]
    3922:	61a2      	str	r2, [r4, #24]
    3924:	480b      	ldr	r0, [pc, #44]	; (3954 <setvbuf+0xe4>)
    3926:	89a2      	ldrh	r2, [r4, #12]
    3928:	6801      	ldr	r1, [r0, #0]
    392a:	4b0b      	ldr	r3, [pc, #44]	; (3958 <setvbuf+0xe8>)
    392c:	f002 0008 	and.w	r0, r2, #8
    3930:	b200      	sxth	r0, r0
    3932:	63cb      	str	r3, [r1, #60]	; 0x3c
    3934:	6026      	str	r6, [r4, #0]
    3936:	6126      	str	r6, [r4, #16]
    3938:	6165      	str	r5, [r4, #20]
    393a:	b148      	cbz	r0, 3950 <setvbuf+0xe0>
    393c:	f012 0f03 	tst.w	r2, #3
    3940:	bf18      	it	ne
    3942:	2500      	movne	r5, #0
    3944:	60a5      	str	r5, [r4, #8]
    3946:	2000      	movs	r0, #0
    3948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    394c:	f04f 30ff 	mov.w	r0, #4294967295
    3950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3954:	20000050 	.word	0x20000050
    3958:	000044a9 	.word	0x000044a9

0000395c <__sprint_r>:
    395c:	6893      	ldr	r3, [r2, #8]
    395e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3962:	4681      	mov	r9, r0
    3964:	460f      	mov	r7, r1
    3966:	4614      	mov	r4, r2
    3968:	b91b      	cbnz	r3, 3972 <__sprint_r+0x16>
    396a:	6053      	str	r3, [r2, #4]
    396c:	4618      	mov	r0, r3
    396e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3972:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    3974:	049b      	lsls	r3, r3, #18
    3976:	d51e      	bpl.n	39b6 <__sprint_r+0x5a>
    3978:	6815      	ldr	r5, [r2, #0]
    397a:	68a0      	ldr	r0, [r4, #8]
    397c:	3508      	adds	r5, #8
    397e:	b1c8      	cbz	r0, 39b4 <__sprint_r+0x58>
    3980:	f855 1c04 	ldr.w	r1, [r5, #-4]
    3984:	f855 ac08 	ldr.w	sl, [r5, #-8]
    3988:	ea4f 0891 	mov.w	r8, r1, lsr #2
    398c:	2600      	movs	r6, #0
    398e:	4546      	cmp	r6, r8
    3990:	da09      	bge.n	39a6 <__sprint_r+0x4a>
    3992:	4648      	mov	r0, r9
    3994:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
    3998:	463a      	mov	r2, r7
    399a:	f000 fe47 	bl	462c <_fputwc_r>
    399e:	1c43      	adds	r3, r0, #1
    39a0:	d00b      	beq.n	39ba <__sprint_r+0x5e>
    39a2:	3601      	adds	r6, #1
    39a4:	e7f3      	b.n	398e <__sprint_r+0x32>
    39a6:	68a2      	ldr	r2, [r4, #8]
    39a8:	ea4f 0888 	mov.w	r8, r8, lsl #2
    39ac:	ebc8 0302 	rsb	r3, r8, r2
    39b0:	60a3      	str	r3, [r4, #8]
    39b2:	e7e2      	b.n	397a <__sprint_r+0x1e>
    39b4:	e001      	b.n	39ba <__sprint_r+0x5e>
    39b6:	f000 ffb1 	bl	491c <__sfvwrite_r>
    39ba:	2100      	movs	r1, #0
    39bc:	60a1      	str	r1, [r4, #8]
    39be:	6061      	str	r1, [r4, #4]
    39c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000039c4 <_vfiprintf_r>:
    39c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39c8:	4689      	mov	r9, r1
    39ca:	b0a9      	sub	sp, #164	; 0xa4
    39cc:	4614      	mov	r4, r2
    39ce:	461d      	mov	r5, r3
    39d0:	461e      	mov	r6, r3
    39d2:	4682      	mov	sl, r0
    39d4:	b118      	cbz	r0, 39de <_vfiprintf_r+0x1a>
    39d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    39d8:	b90b      	cbnz	r3, 39de <_vfiprintf_r+0x1a>
    39da:	f000 fdab 	bl	4534 <__sinit>
    39de:	f8b9 000c 	ldrh.w	r0, [r9, #12]
    39e2:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
    39e6:	b211      	sxth	r1, r2
    39e8:	b949      	cbnz	r1, 39fe <_vfiprintf_r+0x3a>
    39ea:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
    39ee:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
    39f2:	f8a9 300c 	strh.w	r3, [r9, #12]
    39f6:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
    39fa:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
    39fe:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    3a02:	f001 0308 	and.w	r3, r1, #8
    3a06:	b218      	sxth	r0, r3
    3a08:	b148      	cbz	r0, 3a1e <_vfiprintf_r+0x5a>
    3a0a:	f8d9 2010 	ldr.w	r2, [r9, #16]
    3a0e:	b132      	cbz	r2, 3a1e <_vfiprintf_r+0x5a>
    3a10:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    3a14:	f001 031a 	and.w	r3, r1, #26
    3a18:	2b0a      	cmp	r3, #10
    3a1a:	d116      	bne.n	3a4a <_vfiprintf_r+0x86>
    3a1c:	e009      	b.n	3a32 <_vfiprintf_r+0x6e>
    3a1e:	4650      	mov	r0, sl
    3a20:	4649      	mov	r1, r9
    3a22:	f000 fc27 	bl	4274 <__swsetup_r>
    3a26:	2800      	cmp	r0, #0
    3a28:	d0f2      	beq.n	3a10 <_vfiprintf_r+0x4c>
    3a2a:	f04f 32ff 	mov.w	r2, #4294967295
    3a2e:	9203      	str	r2, [sp, #12]
    3a30:	e3d5      	b.n	41de <_vfiprintf_r+0x81a>
    3a32:	f9b9 000e 	ldrsh.w	r0, [r9, #14]
    3a36:	2800      	cmp	r0, #0
    3a38:	db07      	blt.n	3a4a <_vfiprintf_r+0x86>
    3a3a:	4650      	mov	r0, sl
    3a3c:	4649      	mov	r1, r9
    3a3e:	4622      	mov	r2, r4
    3a40:	462b      	mov	r3, r5
    3a42:	f000 fbd0 	bl	41e6 <__sbprintf>
    3a46:	9003      	str	r0, [sp, #12]
    3a48:	e3c9      	b.n	41de <_vfiprintf_r+0x81a>
    3a4a:	2200      	movs	r2, #0
    3a4c:	ad18      	add	r5, sp, #96	; 0x60
    3a4e:	950b      	str	r5, [sp, #44]	; 0x2c
    3a50:	920d      	str	r2, [sp, #52]	; 0x34
    3a52:	920c      	str	r2, [sp, #48]	; 0x30
    3a54:	9401      	str	r4, [sp, #4]
    3a56:	9205      	str	r2, [sp, #20]
    3a58:	9203      	str	r2, [sp, #12]
    3a5a:	46a8      	mov	r8, r5
    3a5c:	9901      	ldr	r1, [sp, #4]
    3a5e:	460c      	mov	r4, r1
    3a60:	f811 3b01 	ldrb.w	r3, [r1], #1
    3a64:	b10b      	cbz	r3, 3a6a <_vfiprintf_r+0xa6>
    3a66:	2b25      	cmp	r3, #37	; 0x25
    3a68:	d1f9      	bne.n	3a5e <_vfiprintf_r+0x9a>
    3a6a:	9a01      	ldr	r2, [sp, #4]
    3a6c:	1aa5      	subs	r5, r4, r2
    3a6e:	d019      	beq.n	3aa4 <_vfiprintf_r+0xe0>
    3a70:	990c      	ldr	r1, [sp, #48]	; 0x30
    3a72:	980d      	ldr	r0, [sp, #52]	; 0x34
    3a74:	1c4b      	adds	r3, r1, #1
    3a76:	e888 0024 	stmia.w	r8, {r2, r5}
    3a7a:	2b07      	cmp	r3, #7
    3a7c:	eb00 0205 	add.w	r2, r0, r5
    3a80:	920d      	str	r2, [sp, #52]	; 0x34
    3a82:	f108 0808 	add.w	r8, r8, #8
    3a86:	930c      	str	r3, [sp, #48]	; 0x30
    3a88:	dd09      	ble.n	3a9e <_vfiprintf_r+0xda>
    3a8a:	4650      	mov	r0, sl
    3a8c:	4649      	mov	r1, r9
    3a8e:	aa0b      	add	r2, sp, #44	; 0x2c
    3a90:	f7ff ff64 	bl	395c <__sprint_r>
    3a94:	2800      	cmp	r0, #0
    3a96:	f040 839a 	bne.w	41ce <_vfiprintf_r+0x80a>
    3a9a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3a9e:	9803      	ldr	r0, [sp, #12]
    3aa0:	1942      	adds	r2, r0, r5
    3aa2:	9203      	str	r2, [sp, #12]
    3aa4:	7821      	ldrb	r1, [r4, #0]
    3aa6:	2900      	cmp	r1, #0
    3aa8:	f000 838a 	beq.w	41c0 <_vfiprintf_r+0x7fc>
    3aac:	2200      	movs	r2, #0
    3aae:	3401      	adds	r4, #1
    3ab0:	9401      	str	r4, [sp, #4]
    3ab2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3ab6:	f04f 3cff 	mov.w	ip, #4294967295
    3aba:	9204      	str	r2, [sp, #16]
    3abc:	4617      	mov	r7, r2
    3abe:	9801      	ldr	r0, [sp, #4]
    3ac0:	f810 3b01 	ldrb.w	r3, [r0], #1
    3ac4:	9001      	str	r0, [sp, #4]
    3ac6:	2b63      	cmp	r3, #99	; 0x63
    3ac8:	f000 80b3 	beq.w	3c32 <_vfiprintf_r+0x26e>
    3acc:	dc33      	bgt.n	3b36 <_vfiprintf_r+0x172>
    3ace:	2b39      	cmp	r3, #57	; 0x39
    3ad0:	dc1a      	bgt.n	3b08 <_vfiprintf_r+0x144>
    3ad2:	2b31      	cmp	r3, #49	; 0x31
    3ad4:	f280 8091 	bge.w	3bfa <_vfiprintf_r+0x236>
    3ad8:	2b2b      	cmp	r3, #43	; 0x2b
    3ada:	d101      	bne.n	3ae0 <_vfiprintf_r+0x11c>
    3adc:	461a      	mov	r2, r3
    3ade:	e7ee      	b.n	3abe <_vfiprintf_r+0xfa>
    3ae0:	dc0a      	bgt.n	3af8 <_vfiprintf_r+0x134>
    3ae2:	2b23      	cmp	r3, #35	; 0x23
    3ae4:	d055      	beq.n	3b92 <_vfiprintf_r+0x1ce>
    3ae6:	2b2a      	cmp	r3, #42	; 0x2a
    3ae8:	d056      	beq.n	3b98 <_vfiprintf_r+0x1d4>
    3aea:	2b20      	cmp	r3, #32
    3aec:	f040 81f7 	bne.w	3ede <_vfiprintf_r+0x51a>
    3af0:	2a00      	cmp	r2, #0
    3af2:	bf08      	it	eq
    3af4:	2220      	moveq	r2, #32
    3af6:	e7e2      	b.n	3abe <_vfiprintf_r+0xfa>
    3af8:	2b2e      	cmp	r3, #46	; 0x2e
    3afa:	d058      	beq.n	3bae <_vfiprintf_r+0x1ea>
    3afc:	2b30      	cmp	r3, #48	; 0x30
    3afe:	d079      	beq.n	3bf4 <_vfiprintf_r+0x230>
    3b00:	2b2d      	cmp	r3, #45	; 0x2d
    3b02:	f040 81ec 	bne.w	3ede <_vfiprintf_r+0x51a>
    3b06:	e04f      	b.n	3ba8 <_vfiprintf_r+0x1e4>
    3b08:	2b4f      	cmp	r3, #79	; 0x4f
    3b0a:	f000 80de 	beq.w	3cca <_vfiprintf_r+0x306>
    3b0e:	dc07      	bgt.n	3b20 <_vfiprintf_r+0x15c>
    3b10:	2b44      	cmp	r3, #68	; 0x44
    3b12:	f040 81e4 	bne.w	3ede <_vfiprintf_r+0x51a>
    3b16:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3b1a:	f047 0710 	orr.w	r7, r7, #16
    3b1e:	e090      	b.n	3c42 <_vfiprintf_r+0x27e>
    3b20:	2b55      	cmp	r3, #85	; 0x55
    3b22:	f000 811f 	beq.w	3d64 <_vfiprintf_r+0x3a0>
    3b26:	2b58      	cmp	r3, #88	; 0x58
    3b28:	f040 81d9 	bne.w	3ede <_vfiprintf_r+0x51a>
    3b2c:	4daf      	ldr	r5, [pc, #700]	; (3dec <_vfiprintf_r+0x428>)
    3b2e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3b32:	9505      	str	r5, [sp, #20]
    3b34:	e131      	b.n	3d9a <_vfiprintf_r+0x3d6>
    3b36:	2b6f      	cmp	r3, #111	; 0x6f
    3b38:	f000 80c9 	beq.w	3cce <_vfiprintf_r+0x30a>
    3b3c:	dc10      	bgt.n	3b60 <_vfiprintf_r+0x19c>
    3b3e:	2b69      	cmp	r3, #105	; 0x69
    3b40:	d024      	beq.n	3b8c <_vfiprintf_r+0x1c8>
    3b42:	dc07      	bgt.n	3b54 <_vfiprintf_r+0x190>
    3b44:	2b64      	cmp	r3, #100	; 0x64
    3b46:	d021      	beq.n	3b8c <_vfiprintf_r+0x1c8>
    3b48:	2b68      	cmp	r3, #104	; 0x68
    3b4a:	f040 81c8 	bne.w	3ede <_vfiprintf_r+0x51a>
    3b4e:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    3b52:	e7b4      	b.n	3abe <_vfiprintf_r+0xfa>
    3b54:	2b6c      	cmp	r3, #108	; 0x6c
    3b56:	d05f      	beq.n	3c18 <_vfiprintf_r+0x254>
    3b58:	2b6e      	cmp	r3, #110	; 0x6e
    3b5a:	f040 81c0 	bne.w	3ede <_vfiprintf_r+0x51a>
    3b5e:	e096      	b.n	3c8e <_vfiprintf_r+0x2ca>
    3b60:	2b73      	cmp	r3, #115	; 0x73
    3b62:	f000 80df 	beq.w	3d24 <_vfiprintf_r+0x360>
    3b66:	dc06      	bgt.n	3b76 <_vfiprintf_r+0x1b2>
    3b68:	2b70      	cmp	r3, #112	; 0x70
    3b6a:	f000 80cd 	beq.w	3d08 <_vfiprintf_r+0x344>
    3b6e:	2b71      	cmp	r3, #113	; 0x71
    3b70:	f040 81b5 	bne.w	3ede <_vfiprintf_r+0x51a>
    3b74:	e05a      	b.n	3c2c <_vfiprintf_r+0x268>
    3b76:	2b75      	cmp	r3, #117	; 0x75
    3b78:	f000 80f6 	beq.w	3d68 <_vfiprintf_r+0x3a4>
    3b7c:	2b78      	cmp	r3, #120	; 0x78
    3b7e:	f040 81ae 	bne.w	3ede <_vfiprintf_r+0x51a>
    3b82:	4d9b      	ldr	r5, [pc, #620]	; (3df0 <_vfiprintf_r+0x42c>)
    3b84:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3b88:	9505      	str	r5, [sp, #20]
    3b8a:	e106      	b.n	3d9a <_vfiprintf_r+0x3d6>
    3b8c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3b90:	e057      	b.n	3c42 <_vfiprintf_r+0x27e>
    3b92:	f047 0701 	orr.w	r7, r7, #1
    3b96:	e792      	b.n	3abe <_vfiprintf_r+0xfa>
    3b98:	1d33      	adds	r3, r6, #4
    3b9a:	6836      	ldr	r6, [r6, #0]
    3b9c:	2e00      	cmp	r6, #0
    3b9e:	9604      	str	r6, [sp, #16]
    3ba0:	da15      	bge.n	3bce <_vfiprintf_r+0x20a>
    3ba2:	4270      	negs	r0, r6
    3ba4:	9004      	str	r0, [sp, #16]
    3ba6:	461e      	mov	r6, r3
    3ba8:	f047 0704 	orr.w	r7, r7, #4
    3bac:	e787      	b.n	3abe <_vfiprintf_r+0xfa>
    3bae:	9901      	ldr	r1, [sp, #4]
    3bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
    3bb4:	2b2a      	cmp	r3, #42	; 0x2a
    3bb6:	9101      	str	r1, [sp, #4]
    3bb8:	d10b      	bne.n	3bd2 <_vfiprintf_r+0x20e>
    3bba:	f8d6 c000 	ldr.w	ip, [r6]
    3bbe:	1d33      	adds	r3, r6, #4
    3bc0:	f1bc 0f00 	cmp.w	ip, #0
    3bc4:	da03      	bge.n	3bce <_vfiprintf_r+0x20a>
    3bc6:	461e      	mov	r6, r3
    3bc8:	f04f 3cff 	mov.w	ip, #4294967295
    3bcc:	e777      	b.n	3abe <_vfiprintf_r+0xfa>
    3bce:	461e      	mov	r6, r3
    3bd0:	e775      	b.n	3abe <_vfiprintf_r+0xfa>
    3bd2:	f04f 0c00 	mov.w	ip, #0
    3bd6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    3bda:	2809      	cmp	r0, #9
    3bdc:	d807      	bhi.n	3bee <_vfiprintf_r+0x22a>
    3bde:	9901      	ldr	r1, [sp, #4]
    3be0:	230a      	movs	r3, #10
    3be2:	fb03 0c0c 	mla	ip, r3, ip, r0
    3be6:	f811 3b01 	ldrb.w	r3, [r1], #1
    3bea:	9101      	str	r1, [sp, #4]
    3bec:	e7f3      	b.n	3bd6 <_vfiprintf_r+0x212>
    3bee:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
    3bf2:	e768      	b.n	3ac6 <_vfiprintf_r+0x102>
    3bf4:	f047 0780 	orr.w	r7, r7, #128	; 0x80
    3bf8:	e761      	b.n	3abe <_vfiprintf_r+0xfa>
    3bfa:	9801      	ldr	r0, [sp, #4]
    3bfc:	2100      	movs	r1, #0
    3bfe:	3b30      	subs	r3, #48	; 0x30
    3c00:	240a      	movs	r4, #10
    3c02:	fb04 3101 	mla	r1, r4, r1, r3
    3c06:	f810 3b01 	ldrb.w	r3, [r0], #1
    3c0a:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
    3c0e:	2c09      	cmp	r4, #9
    3c10:	9001      	str	r0, [sp, #4]
    3c12:	d9f4      	bls.n	3bfe <_vfiprintf_r+0x23a>
    3c14:	9104      	str	r1, [sp, #16]
    3c16:	e756      	b.n	3ac6 <_vfiprintf_r+0x102>
    3c18:	9901      	ldr	r1, [sp, #4]
    3c1a:	780b      	ldrb	r3, [r1, #0]
    3c1c:	2b6c      	cmp	r3, #108	; 0x6c
    3c1e:	d102      	bne.n	3c26 <_vfiprintf_r+0x262>
    3c20:	1c48      	adds	r0, r1, #1
    3c22:	9001      	str	r0, [sp, #4]
    3c24:	e002      	b.n	3c2c <_vfiprintf_r+0x268>
    3c26:	f047 0710 	orr.w	r7, r7, #16
    3c2a:	e748      	b.n	3abe <_vfiprintf_r+0xfa>
    3c2c:	f047 0720 	orr.w	r7, r7, #32
    3c30:	e745      	b.n	3abe <_vfiprintf_r+0xfa>
    3c32:	6832      	ldr	r2, [r6, #0]
    3c34:	2500      	movs	r5, #0
    3c36:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    3c3a:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    3c3e:	3604      	adds	r6, #4
    3c40:	e157      	b.n	3ef2 <_vfiprintf_r+0x52e>
    3c42:	06ba      	lsls	r2, r7, #26
    3c44:	d507      	bpl.n	3c56 <_vfiprintf_r+0x292>
    3c46:	3607      	adds	r6, #7
    3c48:	f026 0507 	bic.w	r5, r6, #7
    3c4c:	f105 0608 	add.w	r6, r5, #8
    3c50:	e9d5 4500 	ldrd	r4, r5, [r5]
    3c54:	e00f      	b.n	3c76 <_vfiprintf_r+0x2b2>
    3c56:	f017 0f10 	tst.w	r7, #16
    3c5a:	f106 0104 	add.w	r1, r6, #4
    3c5e:	d001      	beq.n	3c64 <_vfiprintf_r+0x2a0>
    3c60:	6832      	ldr	r2, [r6, #0]
    3c62:	e005      	b.n	3c70 <_vfiprintf_r+0x2ac>
    3c64:	f017 0f40 	tst.w	r7, #64	; 0x40
    3c68:	6832      	ldr	r2, [r6, #0]
    3c6a:	d001      	beq.n	3c70 <_vfiprintf_r+0x2ac>
    3c6c:	b214      	sxth	r4, r2
    3c6e:	e000      	b.n	3c72 <_vfiprintf_r+0x2ae>
    3c70:	4614      	mov	r4, r2
    3c72:	17e5      	asrs	r5, r4, #31
    3c74:	460e      	mov	r6, r1
    3c76:	2c00      	cmp	r4, #0
    3c78:	f175 0200 	sbcs.w	r2, r5, #0
    3c7c:	f280 80ba 	bge.w	3df4 <_vfiprintf_r+0x430>
    3c80:	232d      	movs	r3, #45	; 0x2d
    3c82:	4264      	negs	r4, r4
    3c84:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    3c88:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    3c8c:	e0b2      	b.n	3df4 <_vfiprintf_r+0x430>
    3c8e:	f017 0f20 	tst.w	r7, #32
    3c92:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3c96:	f106 0204 	add.w	r2, r6, #4
    3c9a:	d005      	beq.n	3ca8 <_vfiprintf_r+0x2e4>
    3c9c:	9c03      	ldr	r4, [sp, #12]
    3c9e:	6835      	ldr	r5, [r6, #0]
    3ca0:	17e0      	asrs	r0, r4, #31
    3ca2:	602c      	str	r4, [r5, #0]
    3ca4:	6068      	str	r0, [r5, #4]
    3ca6:	e004      	b.n	3cb2 <_vfiprintf_r+0x2ee>
    3ca8:	06fb      	lsls	r3, r7, #27
    3caa:	d504      	bpl.n	3cb6 <_vfiprintf_r+0x2f2>
    3cac:	6833      	ldr	r3, [r6, #0]
    3cae:	9903      	ldr	r1, [sp, #12]
    3cb0:	6019      	str	r1, [r3, #0]
    3cb2:	4616      	mov	r6, r2
    3cb4:	e6d2      	b.n	3a5c <_vfiprintf_r+0x98>
    3cb6:	6830      	ldr	r0, [r6, #0]
    3cb8:	9c03      	ldr	r4, [sp, #12]
    3cba:	f017 0f40 	tst.w	r7, #64	; 0x40
    3cbe:	f106 0604 	add.w	r6, r6, #4
    3cc2:	bf14      	ite	ne
    3cc4:	8004      	strhne	r4, [r0, #0]
    3cc6:	6004      	streq	r4, [r0, #0]
    3cc8:	e6c8      	b.n	3a5c <_vfiprintf_r+0x98>
    3cca:	f047 0710 	orr.w	r7, r7, #16
    3cce:	f017 0020 	ands.w	r0, r7, #32
    3cd2:	d008      	beq.n	3ce6 <_vfiprintf_r+0x322>
    3cd4:	1df3      	adds	r3, r6, #7
    3cd6:	f023 0507 	bic.w	r5, r3, #7
    3cda:	f105 0608 	add.w	r6, r5, #8
    3cde:	e9d5 4500 	ldrd	r4, r5, [r5]
    3ce2:	2000      	movs	r0, #0
    3ce4:	e07d      	b.n	3de2 <_vfiprintf_r+0x41e>
    3ce6:	f017 0110 	ands.w	r1, r7, #16
    3cea:	f106 0204 	add.w	r2, r6, #4
    3cee:	d106      	bne.n	3cfe <_vfiprintf_r+0x33a>
    3cf0:	f017 0040 	ands.w	r0, r7, #64	; 0x40
    3cf4:	d003      	beq.n	3cfe <_vfiprintf_r+0x33a>
    3cf6:	8834      	ldrh	r4, [r6, #0]
    3cf8:	2500      	movs	r5, #0
    3cfa:	4616      	mov	r6, r2
    3cfc:	e7f1      	b.n	3ce2 <_vfiprintf_r+0x31e>
    3cfe:	6836      	ldr	r6, [r6, #0]
    3d00:	2500      	movs	r5, #0
    3d02:	4634      	mov	r4, r6
    3d04:	4616      	mov	r6, r2
    3d06:	e06c      	b.n	3de2 <_vfiprintf_r+0x41e>
    3d08:	4b39      	ldr	r3, [pc, #228]	; (3df0 <_vfiprintf_r+0x42c>)
    3d0a:	6834      	ldr	r4, [r6, #0]
    3d0c:	9305      	str	r3, [sp, #20]
    3d0e:	2130      	movs	r1, #48	; 0x30
    3d10:	2278      	movs	r2, #120	; 0x78
    3d12:	2500      	movs	r5, #0
    3d14:	f047 0702 	orr.w	r7, r7, #2
    3d18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    3d1c:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    3d20:	3604      	adds	r6, #4
    3d22:	e05d      	b.n	3de0 <_vfiprintf_r+0x41c>
    3d24:	4631      	mov	r1, r6
    3d26:	2500      	movs	r5, #0
    3d28:	f8d1 b000 	ldr.w	fp, [r1]
    3d2c:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    3d30:	3604      	adds	r6, #4
    3d32:	45ac      	cmp	ip, r5
    3d34:	4658      	mov	r0, fp
    3d36:	db11      	blt.n	3d5c <_vfiprintf_r+0x398>
    3d38:	4662      	mov	r2, ip
    3d3a:	4629      	mov	r1, r5
    3d3c:	f8cd c000 	str.w	ip, [sp]
    3d40:	f001 fa4c 	bl	51dc <memchr>
    3d44:	f8dd c000 	ldr.w	ip, [sp]
    3d48:	2800      	cmp	r0, #0
    3d4a:	f000 80d6 	beq.w	3efa <_vfiprintf_r+0x536>
    3d4e:	ebcb 0400 	rsb	r4, fp, r0
    3d52:	4564      	cmp	r4, ip
    3d54:	f340 80d3 	ble.w	3efe <_vfiprintf_r+0x53a>
    3d58:	4664      	mov	r4, ip
    3d5a:	e0d0      	b.n	3efe <_vfiprintf_r+0x53a>
    3d5c:	f001 fc42 	bl	55e4 <strlen>
    3d60:	4604      	mov	r4, r0
    3d62:	e0cc      	b.n	3efe <_vfiprintf_r+0x53a>
    3d64:	f047 0710 	orr.w	r7, r7, #16
    3d68:	06bd      	lsls	r5, r7, #26
    3d6a:	d507      	bpl.n	3d7c <_vfiprintf_r+0x3b8>
    3d6c:	1df0      	adds	r0, r6, #7
    3d6e:	f020 0407 	bic.w	r4, r0, #7
    3d72:	f104 0608 	add.w	r6, r4, #8
    3d76:	e9d4 4500 	ldrd	r4, r5, [r4]
    3d7a:	e00c      	b.n	3d96 <_vfiprintf_r+0x3d2>
    3d7c:	f017 0f10 	tst.w	r7, #16
    3d80:	f106 0304 	add.w	r3, r6, #4
    3d84:	d103      	bne.n	3d8e <_vfiprintf_r+0x3ca>
    3d86:	067c      	lsls	r4, r7, #25
    3d88:	d501      	bpl.n	3d8e <_vfiprintf_r+0x3ca>
    3d8a:	8834      	ldrh	r4, [r6, #0]
    3d8c:	e001      	b.n	3d92 <_vfiprintf_r+0x3ce>
    3d8e:	6835      	ldr	r5, [r6, #0]
    3d90:	462c      	mov	r4, r5
    3d92:	2500      	movs	r5, #0
    3d94:	461e      	mov	r6, r3
    3d96:	2001      	movs	r0, #1
    3d98:	e023      	b.n	3de2 <_vfiprintf_r+0x41e>
    3d9a:	06b8      	lsls	r0, r7, #26
    3d9c:	d507      	bpl.n	3dae <_vfiprintf_r+0x3ea>
    3d9e:	1df4      	adds	r4, r6, #7
    3da0:	f024 0107 	bic.w	r1, r4, #7
    3da4:	f101 0608 	add.w	r6, r1, #8
    3da8:	e9d1 4500 	ldrd	r4, r5, [r1]
    3dac:	e00c      	b.n	3dc8 <_vfiprintf_r+0x404>
    3dae:	f017 0f10 	tst.w	r7, #16
    3db2:	f106 0004 	add.w	r0, r6, #4
    3db6:	d103      	bne.n	3dc0 <_vfiprintf_r+0x3fc>
    3db8:	0679      	lsls	r1, r7, #25
    3dba:	d501      	bpl.n	3dc0 <_vfiprintf_r+0x3fc>
    3dbc:	8834      	ldrh	r4, [r6, #0]
    3dbe:	e001      	b.n	3dc4 <_vfiprintf_r+0x400>
    3dc0:	6836      	ldr	r6, [r6, #0]
    3dc2:	4634      	mov	r4, r6
    3dc4:	2500      	movs	r5, #0
    3dc6:	4606      	mov	r6, r0
    3dc8:	07fa      	lsls	r2, r7, #31
    3dca:	d509      	bpl.n	3de0 <_vfiprintf_r+0x41c>
    3dcc:	ea54 0205 	orrs.w	r2, r4, r5
    3dd0:	d006      	beq.n	3de0 <_vfiprintf_r+0x41c>
    3dd2:	2230      	movs	r2, #48	; 0x30
    3dd4:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
    3dd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    3ddc:	f047 0702 	orr.w	r7, r7, #2
    3de0:	2002      	movs	r0, #2
    3de2:	2100      	movs	r1, #0
    3de4:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    3de8:	e005      	b.n	3df6 <_vfiprintf_r+0x432>
    3dea:	bf00      	nop
    3dec:	00005f72 	.word	0x00005f72
    3df0:	00005f83 	.word	0x00005f83
    3df4:	2001      	movs	r0, #1
    3df6:	f1bc 0f00 	cmp.w	ip, #0
    3dfa:	bfa8      	it	ge
    3dfc:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
    3e00:	ea54 0105 	orrs.w	r1, r4, r5
    3e04:	d102      	bne.n	3e0c <_vfiprintf_r+0x448>
    3e06:	f1bc 0f00 	cmp.w	ip, #0
    3e0a:	d058      	beq.n	3ebe <_vfiprintf_r+0x4fa>
    3e0c:	2801      	cmp	r0, #1
    3e0e:	d01d      	beq.n	3e4c <_vfiprintf_r+0x488>
    3e10:	2802      	cmp	r0, #2
    3e12:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
    3e16:	d041      	beq.n	3e9c <_vfiprintf_r+0x4d8>
    3e18:	f004 0207 	and.w	r2, r4, #7
    3e1c:	08e4      	lsrs	r4, r4, #3
    3e1e:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
    3e22:	08e9      	lsrs	r1, r5, #3
    3e24:	4604      	mov	r4, r0
    3e26:	460d      	mov	r5, r1
    3e28:	3230      	adds	r2, #48	; 0x30
    3e2a:	ea54 0105 	orrs.w	r1, r4, r5
    3e2e:	469b      	mov	fp, r3
    3e30:	701a      	strb	r2, [r3, #0]
    3e32:	f103 33ff 	add.w	r3, r3, #4294967295
    3e36:	d1ef      	bne.n	3e18 <_vfiprintf_r+0x454>
    3e38:	07f8      	lsls	r0, r7, #31
    3e3a:	465d      	mov	r5, fp
    3e3c:	d54a      	bpl.n	3ed4 <_vfiprintf_r+0x510>
    3e3e:	2a30      	cmp	r2, #48	; 0x30
    3e40:	d048      	beq.n	3ed4 <_vfiprintf_r+0x510>
    3e42:	2230      	movs	r2, #48	; 0x30
    3e44:	469b      	mov	fp, r3
    3e46:	f805 2c01 	strb.w	r2, [r5, #-1]
    3e4a:	e043      	b.n	3ed4 <_vfiprintf_r+0x510>
    3e4c:	2d00      	cmp	r5, #0
    3e4e:	bf08      	it	eq
    3e50:	2c0a      	cmpeq	r4, #10
    3e52:	d203      	bcs.n	3e5c <_vfiprintf_r+0x498>
    3e54:	3430      	adds	r4, #48	; 0x30
    3e56:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
    3e5a:	e036      	b.n	3eca <_vfiprintf_r+0x506>
    3e5c:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
    3e60:	9302      	str	r3, [sp, #8]
    3e62:	4620      	mov	r0, r4
    3e64:	4629      	mov	r1, r5
    3e66:	220a      	movs	r2, #10
    3e68:	2300      	movs	r3, #0
    3e6a:	f8cd c000 	str.w	ip, [sp]
    3e6e:	f001 fd23 	bl	58b8 <__aeabi_uldivmod>
    3e72:	9802      	ldr	r0, [sp, #8]
    3e74:	f8dd b008 	ldr.w	fp, [sp, #8]
    3e78:	3230      	adds	r2, #48	; 0x30
    3e7a:	f800 2901 	strb.w	r2, [r0], #-1
    3e7e:	4629      	mov	r1, r5
    3e80:	9002      	str	r0, [sp, #8]
    3e82:	220a      	movs	r2, #10
    3e84:	4620      	mov	r0, r4
    3e86:	2300      	movs	r3, #0
    3e88:	f001 fd16 	bl	58b8 <__aeabi_uldivmod>
    3e8c:	4604      	mov	r4, r0
    3e8e:	460d      	mov	r5, r1
    3e90:	ea54 0105 	orrs.w	r1, r4, r5
    3e94:	f8dd c000 	ldr.w	ip, [sp]
    3e98:	d1e3      	bne.n	3e62 <_vfiprintf_r+0x49e>
    3e9a:	e01b      	b.n	3ed4 <_vfiprintf_r+0x510>
    3e9c:	f004 000f 	and.w	r0, r4, #15
    3ea0:	9905      	ldr	r1, [sp, #20]
    3ea2:	0924      	lsrs	r4, r4, #4
    3ea4:	5c0a      	ldrb	r2, [r1, r0]
    3ea6:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
    3eaa:	0929      	lsrs	r1, r5, #4
    3eac:	4604      	mov	r4, r0
    3eae:	460d      	mov	r5, r1
    3eb0:	469b      	mov	fp, r3
    3eb2:	f803 2901 	strb.w	r2, [r3], #-1
    3eb6:	ea54 0205 	orrs.w	r2, r4, r5
    3eba:	d1ef      	bne.n	3e9c <_vfiprintf_r+0x4d8>
    3ebc:	e00a      	b.n	3ed4 <_vfiprintf_r+0x510>
    3ebe:	b938      	cbnz	r0, 3ed0 <_vfiprintf_r+0x50c>
    3ec0:	07f9      	lsls	r1, r7, #31
    3ec2:	d505      	bpl.n	3ed0 <_vfiprintf_r+0x50c>
    3ec4:	2030      	movs	r0, #48	; 0x30
    3ec6:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
    3eca:	f10d 0b5f 	add.w	fp, sp, #95	; 0x5f
    3ece:	e001      	b.n	3ed4 <_vfiprintf_r+0x510>
    3ed0:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
    3ed4:	ad18      	add	r5, sp, #96	; 0x60
    3ed6:	ebcb 0405 	rsb	r4, fp, r5
    3eda:	4665      	mov	r5, ip
    3edc:	e00f      	b.n	3efe <_vfiprintf_r+0x53a>
    3ede:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	f000 816c 	beq.w	41c0 <_vfiprintf_r+0x7fc>
    3ee8:	2500      	movs	r5, #0
    3eea:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    3eee:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    3ef2:	2401      	movs	r4, #1
    3ef4:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    3ef8:	e001      	b.n	3efe <_vfiprintf_r+0x53a>
    3efa:	4664      	mov	r4, ip
    3efc:	4605      	mov	r5, r0
    3efe:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3f02:	42ac      	cmp	r4, r5
    3f04:	bfac      	ite	ge
    3f06:	4621      	movge	r1, r4
    3f08:	4629      	movlt	r1, r5
    3f0a:	9102      	str	r1, [sp, #8]
    3f0c:	b113      	cbz	r3, 3f14 <_vfiprintf_r+0x550>
    3f0e:	9802      	ldr	r0, [sp, #8]
    3f10:	1c42      	adds	r2, r0, #1
    3f12:	9202      	str	r2, [sp, #8]
    3f14:	f017 0102 	ands.w	r1, r7, #2
    3f18:	9106      	str	r1, [sp, #24]
    3f1a:	d002      	beq.n	3f22 <_vfiprintf_r+0x55e>
    3f1c:	9b02      	ldr	r3, [sp, #8]
    3f1e:	1c98      	adds	r0, r3, #2
    3f20:	9002      	str	r0, [sp, #8]
    3f22:	f017 0284 	ands.w	r2, r7, #132	; 0x84
    3f26:	9207      	str	r2, [sp, #28]
    3f28:	d13a      	bne.n	3fa0 <_vfiprintf_r+0x5dc>
    3f2a:	9904      	ldr	r1, [sp, #16]
    3f2c:	9b02      	ldr	r3, [sp, #8]
    3f2e:	1acb      	subs	r3, r1, r3
    3f30:	2b00      	cmp	r3, #0
    3f32:	dd35      	ble.n	3fa0 <_vfiprintf_r+0x5dc>
    3f34:	48a0      	ldr	r0, [pc, #640]	; (41b8 <_vfiprintf_r+0x7f4>)
    3f36:	2b10      	cmp	r3, #16
    3f38:	f8c8 0000 	str.w	r0, [r8]
    3f3c:	dd1a      	ble.n	3f74 <_vfiprintf_r+0x5b0>
    3f3e:	990c      	ldr	r1, [sp, #48]	; 0x30
    3f40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3f42:	2010      	movs	r0, #16
    3f44:	f8c8 0004 	str.w	r0, [r8, #4]
    3f48:	1c48      	adds	r0, r1, #1
    3f4a:	3210      	adds	r2, #16
    3f4c:	2807      	cmp	r0, #7
    3f4e:	920d      	str	r2, [sp, #52]	; 0x34
    3f50:	f108 0808 	add.w	r8, r8, #8
    3f54:	900c      	str	r0, [sp, #48]	; 0x30
    3f56:	dd0b      	ble.n	3f70 <_vfiprintf_r+0x5ac>
    3f58:	4650      	mov	r0, sl
    3f5a:	4649      	mov	r1, r9
    3f5c:	aa0b      	add	r2, sp, #44	; 0x2c
    3f5e:	9300      	str	r3, [sp, #0]
    3f60:	f7ff fcfc 	bl	395c <__sprint_r>
    3f64:	9b00      	ldr	r3, [sp, #0]
    3f66:	2800      	cmp	r0, #0
    3f68:	f040 8131 	bne.w	41ce <_vfiprintf_r+0x80a>
    3f6c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3f70:	3b10      	subs	r3, #16
    3f72:	e7df      	b.n	3f34 <_vfiprintf_r+0x570>
    3f74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3f76:	f8c8 3004 	str.w	r3, [r8, #4]
    3f7a:	18d1      	adds	r1, r2, r3
    3f7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3f7e:	910d      	str	r1, [sp, #52]	; 0x34
    3f80:	1c58      	adds	r0, r3, #1
    3f82:	2807      	cmp	r0, #7
    3f84:	f108 0808 	add.w	r8, r8, #8
    3f88:	900c      	str	r0, [sp, #48]	; 0x30
    3f8a:	dd09      	ble.n	3fa0 <_vfiprintf_r+0x5dc>
    3f8c:	4650      	mov	r0, sl
    3f8e:	4649      	mov	r1, r9
    3f90:	aa0b      	add	r2, sp, #44	; 0x2c
    3f92:	f7ff fce3 	bl	395c <__sprint_r>
    3f96:	2800      	cmp	r0, #0
    3f98:	f040 8119 	bne.w	41ce <_vfiprintf_r+0x80a>
    3f9c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3fa0:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    3fa4:	b1d2      	cbz	r2, 3fdc <_vfiprintf_r+0x618>
    3fa6:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    3faa:	f8c8 1000 	str.w	r1, [r8]
    3fae:	990c      	ldr	r1, [sp, #48]	; 0x30
    3fb0:	980d      	ldr	r0, [sp, #52]	; 0x34
    3fb2:	2301      	movs	r3, #1
    3fb4:	f8c8 3004 	str.w	r3, [r8, #4]
    3fb8:	1c4b      	adds	r3, r1, #1
    3fba:	1c42      	adds	r2, r0, #1
    3fbc:	2b07      	cmp	r3, #7
    3fbe:	920d      	str	r2, [sp, #52]	; 0x34
    3fc0:	f108 0808 	add.w	r8, r8, #8
    3fc4:	930c      	str	r3, [sp, #48]	; 0x30
    3fc6:	dd09      	ble.n	3fdc <_vfiprintf_r+0x618>
    3fc8:	4650      	mov	r0, sl
    3fca:	4649      	mov	r1, r9
    3fcc:	aa0b      	add	r2, sp, #44	; 0x2c
    3fce:	f7ff fcc5 	bl	395c <__sprint_r>
    3fd2:	2800      	cmp	r0, #0
    3fd4:	f040 80fb 	bne.w	41ce <_vfiprintf_r+0x80a>
    3fd8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    3fdc:	9806      	ldr	r0, [sp, #24]
    3fde:	b1c8      	cbz	r0, 4014 <_vfiprintf_r+0x650>
    3fe0:	aa0a      	add	r2, sp, #40	; 0x28
    3fe2:	f8c8 2000 	str.w	r2, [r8]
    3fe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3fe8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3fea:	2102      	movs	r1, #2
    3fec:	f8c8 1004 	str.w	r1, [r8, #4]
    3ff0:	1c51      	adds	r1, r2, #1
    3ff2:	1c98      	adds	r0, r3, #2
    3ff4:	2907      	cmp	r1, #7
    3ff6:	900d      	str	r0, [sp, #52]	; 0x34
    3ff8:	f108 0808 	add.w	r8, r8, #8
    3ffc:	910c      	str	r1, [sp, #48]	; 0x30
    3ffe:	dd09      	ble.n	4014 <_vfiprintf_r+0x650>
    4000:	4650      	mov	r0, sl
    4002:	4649      	mov	r1, r9
    4004:	aa0b      	add	r2, sp, #44	; 0x2c
    4006:	f7ff fca9 	bl	395c <__sprint_r>
    400a:	2800      	cmp	r0, #0
    400c:	f040 80df 	bne.w	41ce <_vfiprintf_r+0x80a>
    4010:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    4014:	9b07      	ldr	r3, [sp, #28]
    4016:	2b80      	cmp	r3, #128	; 0x80
    4018:	d13a      	bne.n	4090 <_vfiprintf_r+0x6cc>
    401a:	9804      	ldr	r0, [sp, #16]
    401c:	9a02      	ldr	r2, [sp, #8]
    401e:	1a83      	subs	r3, r0, r2
    4020:	2b00      	cmp	r3, #0
    4022:	dd35      	ble.n	4090 <_vfiprintf_r+0x6cc>
    4024:	4965      	ldr	r1, [pc, #404]	; (41bc <_vfiprintf_r+0x7f8>)
    4026:	2b10      	cmp	r3, #16
    4028:	f8c8 1000 	str.w	r1, [r8]
    402c:	dd1a      	ble.n	4064 <_vfiprintf_r+0x6a0>
    402e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4030:	980d      	ldr	r0, [sp, #52]	; 0x34
    4032:	2110      	movs	r1, #16
    4034:	f8c8 1004 	str.w	r1, [r8, #4]
    4038:	1c51      	adds	r1, r2, #1
    403a:	3010      	adds	r0, #16
    403c:	2907      	cmp	r1, #7
    403e:	900d      	str	r0, [sp, #52]	; 0x34
    4040:	f108 0808 	add.w	r8, r8, #8
    4044:	910c      	str	r1, [sp, #48]	; 0x30
    4046:	dd0b      	ble.n	4060 <_vfiprintf_r+0x69c>
    4048:	4650      	mov	r0, sl
    404a:	4649      	mov	r1, r9
    404c:	aa0b      	add	r2, sp, #44	; 0x2c
    404e:	9300      	str	r3, [sp, #0]
    4050:	f7ff fc84 	bl	395c <__sprint_r>
    4054:	9b00      	ldr	r3, [sp, #0]
    4056:	2800      	cmp	r0, #0
    4058:	f040 80b9 	bne.w	41ce <_vfiprintf_r+0x80a>
    405c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    4060:	3b10      	subs	r3, #16
    4062:	e7df      	b.n	4024 <_vfiprintf_r+0x660>
    4064:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4066:	980d      	ldr	r0, [sp, #52]	; 0x34
    4068:	f8c8 3004 	str.w	r3, [r8, #4]
    406c:	1c51      	adds	r1, r2, #1
    406e:	18c3      	adds	r3, r0, r3
    4070:	2907      	cmp	r1, #7
    4072:	930d      	str	r3, [sp, #52]	; 0x34
    4074:	f108 0808 	add.w	r8, r8, #8
    4078:	910c      	str	r1, [sp, #48]	; 0x30
    407a:	dd09      	ble.n	4090 <_vfiprintf_r+0x6cc>
    407c:	4650      	mov	r0, sl
    407e:	4649      	mov	r1, r9
    4080:	aa0b      	add	r2, sp, #44	; 0x2c
    4082:	f7ff fc6b 	bl	395c <__sprint_r>
    4086:	2800      	cmp	r0, #0
    4088:	f040 80a1 	bne.w	41ce <_vfiprintf_r+0x80a>
    408c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    4090:	1b2d      	subs	r5, r5, r4
    4092:	2d00      	cmp	r5, #0
    4094:	dd32      	ble.n	40fc <_vfiprintf_r+0x738>
    4096:	4849      	ldr	r0, [pc, #292]	; (41bc <_vfiprintf_r+0x7f8>)
    4098:	2d10      	cmp	r5, #16
    409a:	f8c8 0000 	str.w	r0, [r8]
    409e:	dd18      	ble.n	40d2 <_vfiprintf_r+0x70e>
    40a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    40a2:	980d      	ldr	r0, [sp, #52]	; 0x34
    40a4:	1c53      	adds	r3, r2, #1
    40a6:	2110      	movs	r1, #16
    40a8:	3010      	adds	r0, #16
    40aa:	2b07      	cmp	r3, #7
    40ac:	f8c8 1004 	str.w	r1, [r8, #4]
    40b0:	900d      	str	r0, [sp, #52]	; 0x34
    40b2:	f108 0808 	add.w	r8, r8, #8
    40b6:	930c      	str	r3, [sp, #48]	; 0x30
    40b8:	dd09      	ble.n	40ce <_vfiprintf_r+0x70a>
    40ba:	4650      	mov	r0, sl
    40bc:	4649      	mov	r1, r9
    40be:	aa0b      	add	r2, sp, #44	; 0x2c
    40c0:	f7ff fc4c 	bl	395c <__sprint_r>
    40c4:	2800      	cmp	r0, #0
    40c6:	f040 8082 	bne.w	41ce <_vfiprintf_r+0x80a>
    40ca:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    40ce:	3d10      	subs	r5, #16
    40d0:	e7e1      	b.n	4096 <_vfiprintf_r+0x6d2>
    40d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    40d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    40d6:	f8c8 5004 	str.w	r5, [r8, #4]
    40da:	1c51      	adds	r1, r2, #1
    40dc:	195d      	adds	r5, r3, r5
    40de:	2907      	cmp	r1, #7
    40e0:	950d      	str	r5, [sp, #52]	; 0x34
    40e2:	f108 0808 	add.w	r8, r8, #8
    40e6:	910c      	str	r1, [sp, #48]	; 0x30
    40e8:	dd08      	ble.n	40fc <_vfiprintf_r+0x738>
    40ea:	4650      	mov	r0, sl
    40ec:	4649      	mov	r1, r9
    40ee:	aa0b      	add	r2, sp, #44	; 0x2c
    40f0:	f7ff fc34 	bl	395c <__sprint_r>
    40f4:	2800      	cmp	r0, #0
    40f6:	d16a      	bne.n	41ce <_vfiprintf_r+0x80a>
    40f8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    40fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    40fe:	980d      	ldr	r0, [sp, #52]	; 0x34
    4100:	f8c8 4004 	str.w	r4, [r8, #4]
    4104:	1c51      	adds	r1, r2, #1
    4106:	1904      	adds	r4, r0, r4
    4108:	2907      	cmp	r1, #7
    410a:	f8c8 b000 	str.w	fp, [r8]
    410e:	940d      	str	r4, [sp, #52]	; 0x34
    4110:	f108 0308 	add.w	r3, r8, #8
    4114:	910c      	str	r1, [sp, #48]	; 0x30
    4116:	dd07      	ble.n	4128 <_vfiprintf_r+0x764>
    4118:	4650      	mov	r0, sl
    411a:	4649      	mov	r1, r9
    411c:	aa0b      	add	r2, sp, #44	; 0x2c
    411e:	f7ff fc1d 	bl	395c <__sprint_r>
    4122:	2800      	cmp	r0, #0
    4124:	d153      	bne.n	41ce <_vfiprintf_r+0x80a>
    4126:	ab18      	add	r3, sp, #96	; 0x60
    4128:	077a      	lsls	r2, r7, #29
    412a:	d40b      	bmi.n	4144 <_vfiprintf_r+0x780>
    412c:	9b03      	ldr	r3, [sp, #12]
    412e:	9a02      	ldr	r2, [sp, #8]
    4130:	9904      	ldr	r1, [sp, #16]
    4132:	980d      	ldr	r0, [sp, #52]	; 0x34
    4134:	428a      	cmp	r2, r1
    4136:	bfac      	ite	ge
    4138:	189b      	addge	r3, r3, r2
    413a:	185b      	addlt	r3, r3, r1
    413c:	9303      	str	r3, [sp, #12]
    413e:	2800      	cmp	r0, #0
    4140:	d035      	beq.n	41ae <_vfiprintf_r+0x7ea>
    4142:	e02e      	b.n	41a2 <_vfiprintf_r+0x7de>
    4144:	9c04      	ldr	r4, [sp, #16]
    4146:	9802      	ldr	r0, [sp, #8]
    4148:	1a24      	subs	r4, r4, r0
    414a:	2c00      	cmp	r4, #0
    414c:	ddee      	ble.n	412c <_vfiprintf_r+0x768>
    414e:	4a1a      	ldr	r2, [pc, #104]	; (41b8 <_vfiprintf_r+0x7f4>)
    4150:	2c10      	cmp	r4, #16
    4152:	601a      	str	r2, [r3, #0]
    4154:	dd14      	ble.n	4180 <_vfiprintf_r+0x7bc>
    4156:	980c      	ldr	r0, [sp, #48]	; 0x30
    4158:	990d      	ldr	r1, [sp, #52]	; 0x34
    415a:	2210      	movs	r2, #16
    415c:	605a      	str	r2, [r3, #4]
    415e:	1c42      	adds	r2, r0, #1
    4160:	3110      	adds	r1, #16
    4162:	3308      	adds	r3, #8
    4164:	2a07      	cmp	r2, #7
    4166:	910d      	str	r1, [sp, #52]	; 0x34
    4168:	920c      	str	r2, [sp, #48]	; 0x30
    416a:	dd07      	ble.n	417c <_vfiprintf_r+0x7b8>
    416c:	4650      	mov	r0, sl
    416e:	4649      	mov	r1, r9
    4170:	aa0b      	add	r2, sp, #44	; 0x2c
    4172:	f7ff fbf3 	bl	395c <__sprint_r>
    4176:	2800      	cmp	r0, #0
    4178:	d129      	bne.n	41ce <_vfiprintf_r+0x80a>
    417a:	ab18      	add	r3, sp, #96	; 0x60
    417c:	3c10      	subs	r4, #16
    417e:	e7e6      	b.n	414e <_vfiprintf_r+0x78a>
    4180:	990c      	ldr	r1, [sp, #48]	; 0x30
    4182:	605c      	str	r4, [r3, #4]
    4184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4186:	1c48      	adds	r0, r1, #1
    4188:	191c      	adds	r4, r3, r4
    418a:	2807      	cmp	r0, #7
    418c:	940d      	str	r4, [sp, #52]	; 0x34
    418e:	900c      	str	r0, [sp, #48]	; 0x30
    4190:	ddcc      	ble.n	412c <_vfiprintf_r+0x768>
    4192:	4650      	mov	r0, sl
    4194:	4649      	mov	r1, r9
    4196:	aa0b      	add	r2, sp, #44	; 0x2c
    4198:	f7ff fbe0 	bl	395c <__sprint_r>
    419c:	2800      	cmp	r0, #0
    419e:	d0c5      	beq.n	412c <_vfiprintf_r+0x768>
    41a0:	e015      	b.n	41ce <_vfiprintf_r+0x80a>
    41a2:	4650      	mov	r0, sl
    41a4:	4649      	mov	r1, r9
    41a6:	aa0b      	add	r2, sp, #44	; 0x2c
    41a8:	f7ff fbd8 	bl	395c <__sprint_r>
    41ac:	b978      	cbnz	r0, 41ce <_vfiprintf_r+0x80a>
    41ae:	2500      	movs	r5, #0
    41b0:	950c      	str	r5, [sp, #48]	; 0x30
    41b2:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    41b6:	e451      	b.n	3a5c <_vfiprintf_r+0x98>
    41b8:	00005f52 	.word	0x00005f52
    41bc:	00005f62 	.word	0x00005f62
    41c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    41c2:	b122      	cbz	r2, 41ce <_vfiprintf_r+0x80a>
    41c4:	4650      	mov	r0, sl
    41c6:	4649      	mov	r1, r9
    41c8:	aa0b      	add	r2, sp, #44	; 0x2c
    41ca:	f7ff fbc7 	bl	395c <__sprint_r>
    41ce:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    41d2:	f001 0040 	and.w	r0, r1, #64	; 0x40
    41d6:	b203      	sxth	r3, r0
    41d8:	2b00      	cmp	r3, #0
    41da:	f47f ac26 	bne.w	3a2a <_vfiprintf_r+0x66>
    41de:	9803      	ldr	r0, [sp, #12]
    41e0:	b029      	add	sp, #164	; 0xa4
    41e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000041e6 <__sbprintf>:
    41e6:	b570      	push	{r4, r5, r6, lr}
    41e8:	460c      	mov	r4, r1
    41ea:	8989      	ldrh	r1, [r1, #12]
    41ec:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
    41f0:	f021 0502 	bic.w	r5, r1, #2
    41f4:	6e61      	ldr	r1, [r4, #100]	; 0x64
    41f6:	f8ad 500c 	strh.w	r5, [sp, #12]
    41fa:	9119      	str	r1, [sp, #100]	; 0x64
    41fc:	89e5      	ldrh	r5, [r4, #14]
    41fe:	69e1      	ldr	r1, [r4, #28]
    4200:	f8ad 500e 	strh.w	r5, [sp, #14]
    4204:	9107      	str	r1, [sp, #28]
    4206:	6a65      	ldr	r5, [r4, #36]	; 0x24
    4208:	a91a      	add	r1, sp, #104	; 0x68
    420a:	9100      	str	r1, [sp, #0]
    420c:	9104      	str	r1, [sp, #16]
    420e:	2100      	movs	r1, #0
    4210:	9509      	str	r5, [sp, #36]	; 0x24
    4212:	9106      	str	r1, [sp, #24]
    4214:	f44f 6580 	mov.w	r5, #1024	; 0x400
    4218:	4669      	mov	r1, sp
    421a:	9502      	str	r5, [sp, #8]
    421c:	9505      	str	r5, [sp, #20]
    421e:	4606      	mov	r6, r0
    4220:	f7ff fbd0 	bl	39c4 <_vfiprintf_r>
    4224:	1e05      	subs	r5, r0, #0
    4226:	db07      	blt.n	4238 <__sbprintf+0x52>
    4228:	4630      	mov	r0, r6
    422a:	4669      	mov	r1, sp
    422c:	f000 f88e 	bl	434c <_fflush_r>
    4230:	2800      	cmp	r0, #0
    4232:	bf18      	it	ne
    4234:	f04f 35ff 	movne.w	r5, #4294967295
    4238:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    423c:	f003 0040 	and.w	r0, r3, #64	; 0x40
    4240:	b202      	sxth	r2, r0
    4242:	b11a      	cbz	r2, 424c <__sbprintf+0x66>
    4244:	89a1      	ldrh	r1, [r4, #12]
    4246:	f041 0340 	orr.w	r3, r1, #64	; 0x40
    424a:	81a3      	strh	r3, [r4, #12]
    424c:	4628      	mov	r0, r5
    424e:	b01a      	add	sp, #104	; 0x68
    4250:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
    4254:	bd70      	pop	{r4, r5, r6, pc}

00004256 <vfiprintf>:
    4256:	b530      	push	{r4, r5, lr}
    4258:	4613      	mov	r3, r2
    425a:	4a05      	ldr	r2, [pc, #20]	; (4270 <vfiprintf+0x1a>)
    425c:	4605      	mov	r5, r0
    425e:	460c      	mov	r4, r1
    4260:	6810      	ldr	r0, [r2, #0]
    4262:	4629      	mov	r1, r5
    4264:	4622      	mov	r2, r4
    4266:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    426a:	f7ff bbab 	b.w	39c4 <_vfiprintf_r>
    426e:	bf00      	nop
    4270:	20000050 	.word	0x20000050

00004274 <__swsetup_r>:
    4274:	b538      	push	{r3, r4, r5, lr}
    4276:	4b2c      	ldr	r3, [pc, #176]	; (4328 <__swsetup_r+0xb4>)
    4278:	4605      	mov	r5, r0
    427a:	6818      	ldr	r0, [r3, #0]
    427c:	460c      	mov	r4, r1
    427e:	b118      	cbz	r0, 4288 <__swsetup_r+0x14>
    4280:	6b82      	ldr	r2, [r0, #56]	; 0x38
    4282:	b90a      	cbnz	r2, 4288 <__swsetup_r+0x14>
    4284:	f000 f956 	bl	4534 <__sinit>
    4288:	89a0      	ldrh	r0, [r4, #12]
    428a:	f000 0108 	and.w	r1, r0, #8
    428e:	b20b      	sxth	r3, r1
    4290:	bb0b      	cbnz	r3, 42d6 <__swsetup_r+0x62>
    4292:	f000 0210 	and.w	r2, r0, #16
    4296:	b211      	sxth	r1, r2
    4298:	b911      	cbnz	r1, 42a0 <__swsetup_r+0x2c>
    429a:	f04f 30ff 	mov.w	r0, #4294967295
    429e:	bd38      	pop	{r3, r4, r5, pc}
    42a0:	f000 0004 	and.w	r0, r0, #4
    42a4:	b203      	sxth	r3, r0
    42a6:	b193      	cbz	r3, 42ce <__swsetup_r+0x5a>
    42a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    42aa:	b141      	cbz	r1, 42be <__swsetup_r+0x4a>
    42ac:	f104 0240 	add.w	r2, r4, #64	; 0x40
    42b0:	4291      	cmp	r1, r2
    42b2:	d002      	beq.n	42ba <__swsetup_r+0x46>
    42b4:	4628      	mov	r0, r5
    42b6:	f000 fa7b 	bl	47b0 <_free_r>
    42ba:	2100      	movs	r1, #0
    42bc:	6321      	str	r1, [r4, #48]	; 0x30
    42be:	89a0      	ldrh	r0, [r4, #12]
    42c0:	6921      	ldr	r1, [r4, #16]
    42c2:	f020 0324 	bic.w	r3, r0, #36	; 0x24
    42c6:	2200      	movs	r2, #0
    42c8:	81a3      	strh	r3, [r4, #12]
    42ca:	6062      	str	r2, [r4, #4]
    42cc:	6021      	str	r1, [r4, #0]
    42ce:	89a0      	ldrh	r0, [r4, #12]
    42d0:	f040 0308 	orr.w	r3, r0, #8
    42d4:	81a3      	strh	r3, [r4, #12]
    42d6:	6922      	ldr	r2, [r4, #16]
    42d8:	b94a      	cbnz	r2, 42ee <__swsetup_r+0x7a>
    42da:	89a1      	ldrh	r1, [r4, #12]
    42dc:	f401 7020 	and.w	r0, r1, #640	; 0x280
    42e0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    42e4:	d003      	beq.n	42ee <__swsetup_r+0x7a>
    42e6:	4628      	mov	r0, r5
    42e8:	4621      	mov	r1, r4
    42ea:	f000 fcf9 	bl	4ce0 <__smakebuf_r>
    42ee:	89a3      	ldrh	r3, [r4, #12]
    42f0:	f013 0201 	ands.w	r2, r3, #1
    42f4:	d005      	beq.n	4302 <__swsetup_r+0x8e>
    42f6:	6961      	ldr	r1, [r4, #20]
    42f8:	2200      	movs	r2, #0
    42fa:	4248      	negs	r0, r1
    42fc:	60a2      	str	r2, [r4, #8]
    42fe:	61a0      	str	r0, [r4, #24]
    4300:	e007      	b.n	4312 <__swsetup_r+0x9e>
    4302:	f003 0102 	and.w	r1, r3, #2
    4306:	b208      	sxth	r0, r1
    4308:	b908      	cbnz	r0, 430e <__swsetup_r+0x9a>
    430a:	6963      	ldr	r3, [r4, #20]
    430c:	e000      	b.n	4310 <__swsetup_r+0x9c>
    430e:	4613      	mov	r3, r2
    4310:	60a3      	str	r3, [r4, #8]
    4312:	6923      	ldr	r3, [r4, #16]
    4314:	b933      	cbnz	r3, 4324 <__swsetup_r+0xb0>
    4316:	89a2      	ldrh	r2, [r4, #12]
    4318:	f002 0180 	and.w	r1, r2, #128	; 0x80
    431c:	b208      	sxth	r0, r1
    431e:	2800      	cmp	r0, #0
    4320:	d1bb      	bne.n	429a <__swsetup_r+0x26>
    4322:	bd38      	pop	{r3, r4, r5, pc}
    4324:	2000      	movs	r0, #0
    4326:	bd38      	pop	{r3, r4, r5, pc}
    4328:	20000050 	.word	0x20000050

0000432c <register_fini>:
    432c:	4b02      	ldr	r3, [pc, #8]	; (4338 <register_fini+0xc>)
    432e:	b113      	cbz	r3, 4336 <register_fini+0xa>
    4330:	4802      	ldr	r0, [pc, #8]	; (433c <register_fini+0x10>)
    4332:	f000 b805 	b.w	4340 <atexit>
    4336:	4770      	bx	lr
    4338:	00000000 	.word	0x00000000
    433c:	00003799 	.word	0x00003799

00004340 <atexit>:
    4340:	4601      	mov	r1, r0
    4342:	2000      	movs	r0, #0
    4344:	4602      	mov	r2, r0
    4346:	4603      	mov	r3, r0
    4348:	f7ff b9d8 	b.w	36fc <__register_exitproc>

0000434c <_fflush_r>:
    434c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4350:	460c      	mov	r4, r1
    4352:	4605      	mov	r5, r0
    4354:	b118      	cbz	r0, 435e <_fflush_r+0x12>
    4356:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4358:	b90b      	cbnz	r3, 435e <_fflush_r+0x12>
    435a:	f000 f8eb 	bl	4534 <__sinit>
    435e:	89a2      	ldrh	r2, [r4, #12]
    4360:	b332      	cbz	r2, 43b0 <_fflush_r+0x64>
    4362:	f002 0008 	and.w	r0, r2, #8
    4366:	b201      	sxth	r1, r0
    4368:	2900      	cmp	r1, #0
    436a:	d162      	bne.n	4432 <_fflush_r+0xe6>
    436c:	6861      	ldr	r1, [r4, #4]
    436e:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
    4372:	2900      	cmp	r1, #0
    4374:	81a0      	strh	r0, [r4, #12]
    4376:	dc02      	bgt.n	437e <_fflush_r+0x32>
    4378:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    437a:	2b00      	cmp	r3, #0
    437c:	dd18      	ble.n	43b0 <_fflush_r+0x64>
    437e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4380:	b1b6      	cbz	r6, 43b0 <_fflush_r+0x64>
    4382:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    4386:	2000      	movs	r0, #0
    4388:	b212      	sxth	r2, r2
    438a:	682f      	ldr	r7, [r5, #0]
    438c:	6028      	str	r0, [r5, #0]
    438e:	b10a      	cbz	r2, 4394 <_fflush_r+0x48>
    4390:	6d22      	ldr	r2, [r4, #80]	; 0x50
    4392:	e010      	b.n	43b6 <_fflush_r+0x6a>
    4394:	2301      	movs	r3, #1
    4396:	4628      	mov	r0, r5
    4398:	69e1      	ldr	r1, [r4, #28]
    439a:	47b0      	blx	r6
    439c:	4602      	mov	r2, r0
    439e:	3001      	adds	r0, #1
    43a0:	d109      	bne.n	43b6 <_fflush_r+0x6a>
    43a2:	6829      	ldr	r1, [r5, #0]
    43a4:	b139      	cbz	r1, 43b6 <_fflush_r+0x6a>
    43a6:	291d      	cmp	r1, #29
    43a8:	d001      	beq.n	43ae <_fflush_r+0x62>
    43aa:	2916      	cmp	r1, #22
    43ac:	d14f      	bne.n	444e <_fflush_r+0x102>
    43ae:	602f      	str	r7, [r5, #0]
    43b0:	2000      	movs	r0, #0
    43b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43b6:	89a6      	ldrh	r6, [r4, #12]
    43b8:	f006 0104 	and.w	r1, r6, #4
    43bc:	b20b      	sxth	r3, r1
    43be:	b12b      	cbz	r3, 43cc <_fflush_r+0x80>
    43c0:	6860      	ldr	r0, [r4, #4]
    43c2:	6b26      	ldr	r6, [r4, #48]	; 0x30
    43c4:	1a12      	subs	r2, r2, r0
    43c6:	b10e      	cbz	r6, 43cc <_fflush_r+0x80>
    43c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    43ca:	1a52      	subs	r2, r2, r1
    43cc:	69e1      	ldr	r1, [r4, #28]
    43ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    43d0:	2300      	movs	r3, #0
    43d2:	4628      	mov	r0, r5
    43d4:	47b0      	blx	r6
    43d6:	1c41      	adds	r1, r0, #1
    43d8:	d105      	bne.n	43e6 <_fflush_r+0x9a>
    43da:	682a      	ldr	r2, [r5, #0]
    43dc:	b11a      	cbz	r2, 43e6 <_fflush_r+0x9a>
    43de:	2a1d      	cmp	r2, #29
    43e0:	d001      	beq.n	43e6 <_fflush_r+0x9a>
    43e2:	2a16      	cmp	r2, #22
    43e4:	d11f      	bne.n	4426 <_fflush_r+0xda>
    43e6:	89a3      	ldrh	r3, [r4, #12]
    43e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    43ec:	2100      	movs	r1, #0
    43ee:	81a2      	strh	r2, [r4, #12]
    43f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    43f4:	6922      	ldr	r2, [r4, #16]
    43f6:	6061      	str	r1, [r4, #4]
    43f8:	b219      	sxth	r1, r3
    43fa:	6022      	str	r2, [r4, #0]
    43fc:	b121      	cbz	r1, 4408 <_fflush_r+0xbc>
    43fe:	1c42      	adds	r2, r0, #1
    4400:	d101      	bne.n	4406 <_fflush_r+0xba>
    4402:	682a      	ldr	r2, [r5, #0]
    4404:	b902      	cbnz	r2, 4408 <_fflush_r+0xbc>
    4406:	6520      	str	r0, [r4, #80]	; 0x50
    4408:	6b21      	ldr	r1, [r4, #48]	; 0x30
    440a:	602f      	str	r7, [r5, #0]
    440c:	2900      	cmp	r1, #0
    440e:	d0cf      	beq.n	43b0 <_fflush_r+0x64>
    4410:	f104 0040 	add.w	r0, r4, #64	; 0x40
    4414:	4281      	cmp	r1, r0
    4416:	d002      	beq.n	441e <_fflush_r+0xd2>
    4418:	4628      	mov	r0, r5
    441a:	f000 f9c9 	bl	47b0 <_free_r>
    441e:	2000      	movs	r0, #0
    4420:	6320      	str	r0, [r4, #48]	; 0x30
    4422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4426:	89a3      	ldrh	r3, [r4, #12]
    4428:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    442c:	81a1      	strh	r1, [r4, #12]
    442e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4432:	6926      	ldr	r6, [r4, #16]
    4434:	2e00      	cmp	r6, #0
    4436:	d0bb      	beq.n	43b0 <_fflush_r+0x64>
    4438:	0792      	lsls	r2, r2, #30
    443a:	6823      	ldr	r3, [r4, #0]
    443c:	bf08      	it	eq
    443e:	6962      	ldreq	r2, [r4, #20]
    4440:	6026      	str	r6, [r4, #0]
    4442:	bf18      	it	ne
    4444:	2200      	movne	r2, #0
    4446:	ebc6 0803 	rsb	r8, r6, r3
    444a:	60a2      	str	r2, [r4, #8]
    444c:	e012      	b.n	4474 <_fflush_r+0x128>
    444e:	89a3      	ldrh	r3, [r4, #12]
    4450:	f043 0040 	orr.w	r0, r3, #64	; 0x40
    4454:	81a0      	strh	r0, [r4, #12]
    4456:	f04f 30ff 	mov.w	r0, #4294967295
    445a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    445e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    4460:	69e1      	ldr	r1, [r4, #28]
    4462:	4628      	mov	r0, r5
    4464:	4632      	mov	r2, r6
    4466:	4643      	mov	r3, r8
    4468:	47b8      	blx	r7
    446a:	2800      	cmp	r0, #0
    446c:	ddef      	ble.n	444e <_fflush_r+0x102>
    446e:	1836      	adds	r6, r6, r0
    4470:	ebc0 0808 	rsb	r8, r0, r8
    4474:	f1b8 0f00 	cmp.w	r8, #0
    4478:	dcf1      	bgt.n	445e <_fflush_r+0x112>
    447a:	e799      	b.n	43b0 <_fflush_r+0x64>

0000447c <fflush>:
    447c:	4601      	mov	r1, r0
    447e:	b920      	cbnz	r0, 448a <fflush+0xe>
    4480:	4804      	ldr	r0, [pc, #16]	; (4494 <fflush+0x18>)
    4482:	4905      	ldr	r1, [pc, #20]	; (4498 <fflush+0x1c>)
    4484:	6800      	ldr	r0, [r0, #0]
    4486:	f000 bbc5 	b.w	4c14 <_fwalk_reent>
    448a:	4b04      	ldr	r3, [pc, #16]	; (449c <fflush+0x20>)
    448c:	6818      	ldr	r0, [r3, #0]
    448e:	f7ff bf5d 	b.w	434c <_fflush_r>
    4492:	bf00      	nop
    4494:	00005f4c 	.word	0x00005f4c
    4498:	0000434d 	.word	0x0000434d
    449c:	20000050 	.word	0x20000050

000044a0 <__fp_lock>:
    44a0:	2000      	movs	r0, #0
    44a2:	4770      	bx	lr

000044a4 <__fp_unlock>:
    44a4:	2000      	movs	r0, #0
    44a6:	4770      	bx	lr

000044a8 <_cleanup_r>:
    44a8:	4901      	ldr	r1, [pc, #4]	; (44b0 <_cleanup_r+0x8>)
    44aa:	f000 bb92 	b.w	4bd2 <_fwalk>
    44ae:	bf00      	nop
    44b0:	0000581d 	.word	0x0000581d

000044b4 <std.isra.0>:
    44b4:	2300      	movs	r3, #0
    44b6:	b510      	push	{r4, lr}
    44b8:	4604      	mov	r4, r0
    44ba:	6003      	str	r3, [r0, #0]
    44bc:	6043      	str	r3, [r0, #4]
    44be:	6083      	str	r3, [r0, #8]
    44c0:	8181      	strh	r1, [r0, #12]
    44c2:	6643      	str	r3, [r0, #100]	; 0x64
    44c4:	81c2      	strh	r2, [r0, #14]
    44c6:	6103      	str	r3, [r0, #16]
    44c8:	6143      	str	r3, [r0, #20]
    44ca:	6183      	str	r3, [r0, #24]
    44cc:	4619      	mov	r1, r3
    44ce:	2208      	movs	r2, #8
    44d0:	f100 005c 	add.w	r0, r0, #92	; 0x5c
    44d4:	f7ff f9bc 	bl	3850 <memset>
    44d8:	4804      	ldr	r0, [pc, #16]	; (44ec <std.isra.0+0x38>)
    44da:	4905      	ldr	r1, [pc, #20]	; (44f0 <std.isra.0+0x3c>)
    44dc:	4a05      	ldr	r2, [pc, #20]	; (44f4 <std.isra.0+0x40>)
    44de:	4b06      	ldr	r3, [pc, #24]	; (44f8 <std.isra.0+0x44>)
    44e0:	61e4      	str	r4, [r4, #28]
    44e2:	6220      	str	r0, [r4, #32]
    44e4:	6261      	str	r1, [r4, #36]	; 0x24
    44e6:	62a2      	str	r2, [r4, #40]	; 0x28
    44e8:	62e3      	str	r3, [r4, #44]	; 0x2c
    44ea:	bd10      	pop	{r4, pc}
    44ec:	00005541 	.word	0x00005541
    44f0:	00005567 	.word	0x00005567
    44f4:	000055a3 	.word	0x000055a3
    44f8:	000055c7 	.word	0x000055c7

000044fc <__sfmoreglue>:
    44fc:	b570      	push	{r4, r5, r6, lr}
    44fe:	2568      	movs	r5, #104	; 0x68
    4500:	434d      	muls	r5, r1
    4502:	460e      	mov	r6, r1
    4504:	f105 010c 	add.w	r1, r5, #12
    4508:	f000 fc66 	bl	4dd8 <_malloc_r>
    450c:	4604      	mov	r4, r0
    450e:	b140      	cbz	r0, 4522 <__sfmoreglue+0x26>
    4510:	f100 000c 	add.w	r0, r0, #12
    4514:	2100      	movs	r1, #0
    4516:	e884 0042 	stmia.w	r4, {r1, r6}
    451a:	60a0      	str	r0, [r4, #8]
    451c:	462a      	mov	r2, r5
    451e:	f7ff f997 	bl	3850 <memset>
    4522:	4620      	mov	r0, r4
    4524:	bd70      	pop	{r4, r5, r6, pc}

00004526 <_cleanup>:
    4526:	4b02      	ldr	r3, [pc, #8]	; (4530 <_cleanup+0xa>)
    4528:	6818      	ldr	r0, [r3, #0]
    452a:	f7ff bfbd 	b.w	44a8 <_cleanup_r>
    452e:	bf00      	nop
    4530:	00005f4c 	.word	0x00005f4c

00004534 <__sinit>:
    4534:	b538      	push	{r3, r4, r5, lr}
    4536:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4538:	4604      	mov	r4, r0
    453a:	b9eb      	cbnz	r3, 4578 <__sinit+0x44>
    453c:	4a0f      	ldr	r2, [pc, #60]	; (457c <__sinit+0x48>)
    453e:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
    4542:	2501      	movs	r5, #1
    4544:	63c2      	str	r2, [r0, #60]	; 0x3c
    4546:	6385      	str	r5, [r0, #56]	; 0x38
    4548:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
    454c:	2003      	movs	r0, #3
    454e:	461a      	mov	r2, r3
    4550:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
    4554:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
    4558:	6860      	ldr	r0, [r4, #4]
    455a:	2104      	movs	r1, #4
    455c:	f7ff ffaa 	bl	44b4 <std.isra.0>
    4560:	68a0      	ldr	r0, [r4, #8]
    4562:	2109      	movs	r1, #9
    4564:	462a      	mov	r2, r5
    4566:	f7ff ffa5 	bl	44b4 <std.isra.0>
    456a:	68e0      	ldr	r0, [r4, #12]
    456c:	2112      	movs	r1, #18
    456e:	2202      	movs	r2, #2
    4570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4574:	f7ff bf9e 	b.w	44b4 <std.isra.0>
    4578:	bd38      	pop	{r3, r4, r5, pc}
    457a:	bf00      	nop
    457c:	000044a9 	.word	0x000044a9

00004580 <__sfp>:
    4580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4582:	4b1d      	ldr	r3, [pc, #116]	; (45f8 <__sfp+0x78>)
    4584:	681e      	ldr	r6, [r3, #0]
    4586:	4607      	mov	r7, r0
    4588:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    458a:	b910      	cbnz	r0, 4592 <__sfp+0x12>
    458c:	4630      	mov	r0, r6
    458e:	f7ff ffd1 	bl	4534 <__sinit>
    4592:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
    4596:	68b4      	ldr	r4, [r6, #8]
    4598:	6871      	ldr	r1, [r6, #4]
    459a:	3901      	subs	r1, #1
    459c:	d404      	bmi.n	45a8 <__sfp+0x28>
    459e:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    45a2:	b185      	cbz	r5, 45c6 <__sfp+0x46>
    45a4:	3468      	adds	r4, #104	; 0x68
    45a6:	e7f8      	b.n	459a <__sfp+0x1a>
    45a8:	6832      	ldr	r2, [r6, #0]
    45aa:	b10a      	cbz	r2, 45b0 <__sfp+0x30>
    45ac:	6836      	ldr	r6, [r6, #0]
    45ae:	e7f2      	b.n	4596 <__sfp+0x16>
    45b0:	4638      	mov	r0, r7
    45b2:	2104      	movs	r1, #4
    45b4:	f7ff ffa2 	bl	44fc <__sfmoreglue>
    45b8:	6030      	str	r0, [r6, #0]
    45ba:	2800      	cmp	r0, #0
    45bc:	d1f6      	bne.n	45ac <__sfp+0x2c>
    45be:	240c      	movs	r4, #12
    45c0:	603c      	str	r4, [r7, #0]
    45c2:	4604      	mov	r4, r0
    45c4:	e015      	b.n	45f2 <__sfp+0x72>
    45c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    45ca:	2001      	movs	r0, #1
    45cc:	81a0      	strh	r0, [r4, #12]
    45ce:	81e3      	strh	r3, [r4, #14]
    45d0:	6665      	str	r5, [r4, #100]	; 0x64
    45d2:	6025      	str	r5, [r4, #0]
    45d4:	60a5      	str	r5, [r4, #8]
    45d6:	6065      	str	r5, [r4, #4]
    45d8:	6125      	str	r5, [r4, #16]
    45da:	6165      	str	r5, [r4, #20]
    45dc:	61a5      	str	r5, [r4, #24]
    45de:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    45e2:	4629      	mov	r1, r5
    45e4:	2208      	movs	r2, #8
    45e6:	f7ff f933 	bl	3850 <memset>
    45ea:	6325      	str	r5, [r4, #48]	; 0x30
    45ec:	6365      	str	r5, [r4, #52]	; 0x34
    45ee:	6465      	str	r5, [r4, #68]	; 0x44
    45f0:	64a5      	str	r5, [r4, #72]	; 0x48
    45f2:	4620      	mov	r0, r4
    45f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45f6:	bf00      	nop
    45f8:	00005f4c 	.word	0x00005f4c

000045fc <__sfp_lock_acquire>:
    45fc:	4770      	bx	lr

000045fe <__sfp_lock_release>:
    45fe:	4770      	bx	lr

00004600 <__sinit_lock_acquire>:
    4600:	4770      	bx	lr

00004602 <__sinit_lock_release>:
    4602:	4770      	bx	lr

00004604 <__fp_lock_all>:
    4604:	4b02      	ldr	r3, [pc, #8]	; (4610 <__fp_lock_all+0xc>)
    4606:	4903      	ldr	r1, [pc, #12]	; (4614 <__fp_lock_all+0x10>)
    4608:	6818      	ldr	r0, [r3, #0]
    460a:	f000 bae2 	b.w	4bd2 <_fwalk>
    460e:	bf00      	nop
    4610:	20000050 	.word	0x20000050
    4614:	000044a1 	.word	0x000044a1

00004618 <__fp_unlock_all>:
    4618:	4b02      	ldr	r3, [pc, #8]	; (4624 <__fp_unlock_all+0xc>)
    461a:	4903      	ldr	r1, [pc, #12]	; (4628 <__fp_unlock_all+0x10>)
    461c:	6818      	ldr	r0, [r3, #0]
    461e:	f000 bad8 	b.w	4bd2 <_fwalk>
    4622:	bf00      	nop
    4624:	20000050 	.word	0x20000050
    4628:	000044a5 	.word	0x000044a5

0000462c <_fputwc_r>:
    462c:	8993      	ldrh	r3, [r2, #12]
    462e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4632:	4614      	mov	r4, r2
    4634:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
    4638:	4680      	mov	r8, r0
    463a:	b210      	sxth	r0, r2
    463c:	460e      	mov	r6, r1
    463e:	b930      	cbnz	r0, 464e <_fputwc_r+0x22>
    4640:	6e67      	ldr	r7, [r4, #100]	; 0x64
    4642:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
    4646:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
    464a:	81a1      	strh	r1, [r4, #12]
    464c:	6663      	str	r3, [r4, #100]	; 0x64
    464e:	f000 fb29 	bl	4ca4 <__locale_mb_cur_max>
    4652:	2801      	cmp	r0, #1
    4654:	d106      	bne.n	4664 <_fputwc_r+0x38>
    4656:	b12e      	cbz	r6, 4664 <_fputwc_r+0x38>
    4658:	2eff      	cmp	r6, #255	; 0xff
    465a:	d803      	bhi.n	4664 <_fputwc_r+0x38>
    465c:	f88d 6004 	strb.w	r6, [sp, #4]
    4660:	4607      	mov	r7, r0
    4662:	e00f      	b.n	4684 <_fputwc_r+0x58>
    4664:	4632      	mov	r2, r6
    4666:	4640      	mov	r0, r8
    4668:	a901      	add	r1, sp, #4
    466a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    466e:	f001 f81b 	bl	56a8 <_wcrtomb_r>
    4672:	1c42      	adds	r2, r0, #1
    4674:	4607      	mov	r7, r0
    4676:	d105      	bne.n	4684 <_fputwc_r+0x58>
    4678:	89a2      	ldrh	r2, [r4, #12]
    467a:	f042 0040 	orr.w	r0, r2, #64	; 0x40
    467e:	81a0      	strh	r0, [r4, #12]
    4680:	4638      	mov	r0, r7
    4682:	e031      	b.n	46e8 <_fputwc_r+0xbc>
    4684:	2500      	movs	r5, #0
    4686:	42bd      	cmp	r5, r7
    4688:	d02a      	beq.n	46e0 <_fputwc_r+0xb4>
    468a:	68a1      	ldr	r1, [r4, #8]
    468c:	1e4a      	subs	r2, r1, #1
    468e:	2a00      	cmp	r2, #0
    4690:	60a2      	str	r2, [r4, #8]
    4692:	ab01      	add	r3, sp, #4
    4694:	da1a      	bge.n	46cc <_fputwc_r+0xa0>
    4696:	69a0      	ldr	r0, [r4, #24]
    4698:	4282      	cmp	r2, r0
    469a:	db0c      	blt.n	46b6 <_fputwc_r+0x8a>
    469c:	6821      	ldr	r1, [r4, #0]
    469e:	5d5a      	ldrb	r2, [r3, r5]
    46a0:	700a      	strb	r2, [r1, #0]
    46a2:	6823      	ldr	r3, [r4, #0]
    46a4:	7819      	ldrb	r1, [r3, #0]
    46a6:	290a      	cmp	r1, #10
    46a8:	d003      	beq.n	46b2 <_fputwc_r+0x86>
    46aa:	3301      	adds	r3, #1
    46ac:	2200      	movs	r2, #0
    46ae:	6023      	str	r3, [r4, #0]
    46b0:	e013      	b.n	46da <_fputwc_r+0xae>
    46b2:	4640      	mov	r0, r8
    46b4:	e001      	b.n	46ba <_fputwc_r+0x8e>
    46b6:	5d59      	ldrb	r1, [r3, r5]
    46b8:	4640      	mov	r0, r8
    46ba:	4622      	mov	r2, r4
    46bc:	f000 ff9a 	bl	55f4 <__swbuf_r>
    46c0:	f1b0 31ff 	subs.w	r1, r0, #4294967295
    46c4:	4248      	negs	r0, r1
    46c6:	eb50 0201 	adcs.w	r2, r0, r1
    46ca:	e006      	b.n	46da <_fputwc_r+0xae>
    46cc:	6820      	ldr	r0, [r4, #0]
    46ce:	5d59      	ldrb	r1, [r3, r5]
    46d0:	7001      	strb	r1, [r0, #0]
    46d2:	6822      	ldr	r2, [r4, #0]
    46d4:	1c53      	adds	r3, r2, #1
    46d6:	6023      	str	r3, [r4, #0]
    46d8:	e000      	b.n	46dc <_fputwc_r+0xb0>
    46da:	b91a      	cbnz	r2, 46e4 <_fputwc_r+0xb8>
    46dc:	3501      	adds	r5, #1
    46de:	e7d2      	b.n	4686 <_fputwc_r+0x5a>
    46e0:	4630      	mov	r0, r6
    46e2:	e001      	b.n	46e8 <_fputwc_r+0xbc>
    46e4:	f04f 30ff 	mov.w	r0, #4294967295
    46e8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

000046ec <fputwc>:
    46ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46ee:	4c08      	ldr	r4, [pc, #32]	; (4710 <fputwc+0x24>)
    46f0:	4607      	mov	r7, r0
    46f2:	6820      	ldr	r0, [r4, #0]
    46f4:	460e      	mov	r6, r1
    46f6:	b118      	cbz	r0, 4700 <fputwc+0x14>
    46f8:	6b85      	ldr	r5, [r0, #56]	; 0x38
    46fa:	b90d      	cbnz	r5, 4700 <fputwc+0x14>
    46fc:	f7ff ff1a 	bl	4534 <__sinit>
    4700:	6820      	ldr	r0, [r4, #0]
    4702:	4639      	mov	r1, r7
    4704:	4632      	mov	r2, r6
    4706:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    470a:	f7ff bf8f 	b.w	462c <_fputwc_r>
    470e:	bf00      	nop
    4710:	20000050 	.word	0x20000050

00004714 <_malloc_trim_r>:
    4714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4716:	4d23      	ldr	r5, [pc, #140]	; (47a4 <_malloc_trim_r+0x90>)
    4718:	460e      	mov	r6, r1
    471a:	4604      	mov	r4, r0
    471c:	f000 fd8f 	bl	523e <__malloc_lock>
    4720:	68ab      	ldr	r3, [r5, #8]
    4722:	685f      	ldr	r7, [r3, #4]
    4724:	f027 0703 	bic.w	r7, r7, #3
    4728:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
    472c:	1b81      	subs	r1, r0, r6
    472e:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
    4732:	f022 060f 	bic.w	r6, r2, #15
    4736:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
    473a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
    473e:	da04      	bge.n	474a <_malloc_trim_r+0x36>
    4740:	4620      	mov	r0, r4
    4742:	f000 fd7d 	bl	5240 <__malloc_unlock>
    4746:	2000      	movs	r0, #0
    4748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    474a:	2100      	movs	r1, #0
    474c:	4620      	mov	r0, r4
    474e:	f000 fee7 	bl	5520 <_sbrk_r>
    4752:	68ab      	ldr	r3, [r5, #8]
    4754:	19d9      	adds	r1, r3, r7
    4756:	4288      	cmp	r0, r1
    4758:	d1f2      	bne.n	4740 <_malloc_trim_r+0x2c>
    475a:	4271      	negs	r1, r6
    475c:	4620      	mov	r0, r4
    475e:	f000 fedf 	bl	5520 <_sbrk_r>
    4762:	3001      	adds	r0, #1
    4764:	d110      	bne.n	4788 <_malloc_trim_r+0x74>
    4766:	2100      	movs	r1, #0
    4768:	4620      	mov	r0, r4
    476a:	f000 fed9 	bl	5520 <_sbrk_r>
    476e:	68ab      	ldr	r3, [r5, #8]
    4770:	1ac2      	subs	r2, r0, r3
    4772:	2a0f      	cmp	r2, #15
    4774:	dde4      	ble.n	4740 <_malloc_trim_r+0x2c>
    4776:	490c      	ldr	r1, [pc, #48]	; (47a8 <_malloc_trim_r+0x94>)
    4778:	6809      	ldr	r1, [r1, #0]
    477a:	1a40      	subs	r0, r0, r1
    477c:	490b      	ldr	r1, [pc, #44]	; (47ac <_malloc_trim_r+0x98>)
    477e:	f042 0201 	orr.w	r2, r2, #1
    4782:	6008      	str	r0, [r1, #0]
    4784:	605a      	str	r2, [r3, #4]
    4786:	e7db      	b.n	4740 <_malloc_trim_r+0x2c>
    4788:	4b08      	ldr	r3, [pc, #32]	; (47ac <_malloc_trim_r+0x98>)
    478a:	68a8      	ldr	r0, [r5, #8]
    478c:	681a      	ldr	r2, [r3, #0]
    478e:	1bbf      	subs	r7, r7, r6
    4790:	f047 0701 	orr.w	r7, r7, #1
    4794:	6047      	str	r7, [r0, #4]
    4796:	1b96      	subs	r6, r2, r6
    4798:	4620      	mov	r0, r4
    479a:	601e      	str	r6, [r3, #0]
    479c:	f000 fd50 	bl	5240 <__malloc_unlock>
    47a0:	2001      	movs	r0, #1
    47a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47a4:	200004fc 	.word	0x200004fc
    47a8:	20000904 	.word	0x20000904
    47ac:	20000980 	.word	0x20000980

000047b0 <_free_r>:
    47b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47b2:	4606      	mov	r6, r0
    47b4:	460d      	mov	r5, r1
    47b6:	2900      	cmp	r1, #0
    47b8:	f000 80a6 	beq.w	4908 <_free_r+0x158>
    47bc:	f000 fd3f 	bl	523e <__malloc_lock>
    47c0:	f855 cc04 	ldr.w	ip, [r5, #-4]
    47c4:	4f51      	ldr	r7, [pc, #324]	; (490c <_free_r+0x15c>)
    47c6:	f1a5 0308 	sub.w	r3, r5, #8
    47ca:	f02c 0201 	bic.w	r2, ip, #1
    47ce:	189c      	adds	r4, r3, r2
    47d0:	68b9      	ldr	r1, [r7, #8]
    47d2:	6860      	ldr	r0, [r4, #4]
    47d4:	428c      	cmp	r4, r1
    47d6:	f020 0003 	bic.w	r0, r0, #3
    47da:	f00c 0101 	and.w	r1, ip, #1
    47de:	d11c      	bne.n	481a <_free_r+0x6a>
    47e0:	1882      	adds	r2, r0, r2
    47e2:	b939      	cbnz	r1, 47f4 <_free_r+0x44>
    47e4:	f855 1c08 	ldr.w	r1, [r5, #-8]
    47e8:	1a5b      	subs	r3, r3, r1
    47ea:	1852      	adds	r2, r2, r1
    47ec:	6898      	ldr	r0, [r3, #8]
    47ee:	68d9      	ldr	r1, [r3, #12]
    47f0:	60c1      	str	r1, [r0, #12]
    47f2:	6088      	str	r0, [r1, #8]
    47f4:	4845      	ldr	r0, [pc, #276]	; (490c <_free_r+0x15c>)
    47f6:	f042 0101 	orr.w	r1, r2, #1
    47fa:	6059      	str	r1, [r3, #4]
    47fc:	6083      	str	r3, [r0, #8]
    47fe:	4b44      	ldr	r3, [pc, #272]	; (4910 <_free_r+0x160>)
    4800:	6819      	ldr	r1, [r3, #0]
    4802:	428a      	cmp	r2, r1
    4804:	d304      	bcc.n	4810 <_free_r+0x60>
    4806:	4a43      	ldr	r2, [pc, #268]	; (4914 <_free_r+0x164>)
    4808:	4630      	mov	r0, r6
    480a:	6811      	ldr	r1, [r2, #0]
    480c:	f7ff ff82 	bl	4714 <_malloc_trim_r>
    4810:	4630      	mov	r0, r6
    4812:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4816:	f000 bd13 	b.w	5240 <__malloc_unlock>
    481a:	6060      	str	r0, [r4, #4]
    481c:	b959      	cbnz	r1, 4836 <_free_r+0x86>
    481e:	f855 5c08 	ldr.w	r5, [r5, #-8]
    4822:	1b5b      	subs	r3, r3, r5
    4824:	1952      	adds	r2, r2, r5
    4826:	689d      	ldr	r5, [r3, #8]
    4828:	3708      	adds	r7, #8
    482a:	42bd      	cmp	r5, r7
    482c:	d005      	beq.n	483a <_free_r+0x8a>
    482e:	68df      	ldr	r7, [r3, #12]
    4830:	60ef      	str	r7, [r5, #12]
    4832:	60bd      	str	r5, [r7, #8]
    4834:	e002      	b.n	483c <_free_r+0x8c>
    4836:	2100      	movs	r1, #0
    4838:	e000      	b.n	483c <_free_r+0x8c>
    483a:	2101      	movs	r1, #1
    483c:	1825      	adds	r5, r4, r0
    483e:	686d      	ldr	r5, [r5, #4]
    4840:	f015 0f01 	tst.w	r5, #1
    4844:	d10f      	bne.n	4866 <_free_r+0xb6>
    4846:	1812      	adds	r2, r2, r0
    4848:	b949      	cbnz	r1, 485e <_free_r+0xae>
    484a:	68a0      	ldr	r0, [r4, #8]
    484c:	4d32      	ldr	r5, [pc, #200]	; (4918 <_free_r+0x168>)
    484e:	42a8      	cmp	r0, r5
    4850:	d105      	bne.n	485e <_free_r+0xae>
    4852:	60eb      	str	r3, [r5, #12]
    4854:	60ab      	str	r3, [r5, #8]
    4856:	60d8      	str	r0, [r3, #12]
    4858:	6098      	str	r0, [r3, #8]
    485a:	2101      	movs	r1, #1
    485c:	e003      	b.n	4866 <_free_r+0xb6>
    485e:	68e0      	ldr	r0, [r4, #12]
    4860:	68a4      	ldr	r4, [r4, #8]
    4862:	60e0      	str	r0, [r4, #12]
    4864:	6084      	str	r4, [r0, #8]
    4866:	f042 0001 	orr.w	r0, r2, #1
    486a:	6058      	str	r0, [r3, #4]
    486c:	509a      	str	r2, [r3, r2]
    486e:	2900      	cmp	r1, #0
    4870:	d1ce      	bne.n	4810 <_free_r+0x60>
    4872:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    4876:	d20c      	bcs.n	4892 <_free_r+0xe2>
    4878:	4924      	ldr	r1, [pc, #144]	; (490c <_free_r+0x15c>)
    487a:	08d2      	lsrs	r2, r2, #3
    487c:	1090      	asrs	r0, r2, #2
    487e:	2401      	movs	r4, #1
    4880:	fa04 f400 	lsl.w	r4, r4, r0
    4884:	6848      	ldr	r0, [r1, #4]
    4886:	4320      	orrs	r0, r4
    4888:	6048      	str	r0, [r1, #4]
    488a:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    488e:	6881      	ldr	r1, [r0, #8]
    4890:	e035      	b.n	48fe <_free_r+0x14e>
    4892:	0a54      	lsrs	r4, r2, #9
    4894:	2c04      	cmp	r4, #4
    4896:	d802      	bhi.n	489e <_free_r+0xee>
    4898:	0994      	lsrs	r4, r2, #6
    489a:	3438      	adds	r4, #56	; 0x38
    489c:	e016      	b.n	48cc <_free_r+0x11c>
    489e:	2c14      	cmp	r4, #20
    48a0:	d801      	bhi.n	48a6 <_free_r+0xf6>
    48a2:	345b      	adds	r4, #91	; 0x5b
    48a4:	e012      	b.n	48cc <_free_r+0x11c>
    48a6:	2c54      	cmp	r4, #84	; 0x54
    48a8:	d802      	bhi.n	48b0 <_free_r+0x100>
    48aa:	0b14      	lsrs	r4, r2, #12
    48ac:	346e      	adds	r4, #110	; 0x6e
    48ae:	e00d      	b.n	48cc <_free_r+0x11c>
    48b0:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
    48b4:	d802      	bhi.n	48bc <_free_r+0x10c>
    48b6:	0bd4      	lsrs	r4, r2, #15
    48b8:	3477      	adds	r4, #119	; 0x77
    48ba:	e007      	b.n	48cc <_free_r+0x11c>
    48bc:	f240 5554 	movw	r5, #1364	; 0x554
    48c0:	42ac      	cmp	r4, r5
    48c2:	d802      	bhi.n	48ca <_free_r+0x11a>
    48c4:	0c94      	lsrs	r4, r2, #18
    48c6:	347c      	adds	r4, #124	; 0x7c
    48c8:	e000      	b.n	48cc <_free_r+0x11c>
    48ca:	247e      	movs	r4, #126	; 0x7e
    48cc:	4d0f      	ldr	r5, [pc, #60]	; (490c <_free_r+0x15c>)
    48ce:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    48d2:	6881      	ldr	r1, [r0, #8]
    48d4:	4281      	cmp	r1, r0
    48d6:	d10c      	bne.n	48f2 <_free_r+0x142>
    48d8:	6868      	ldr	r0, [r5, #4]
    48da:	2201      	movs	r2, #1
    48dc:	10a4      	asrs	r4, r4, #2
    48de:	fa02 f404 	lsl.w	r4, r2, r4
    48e2:	ea44 0200 	orr.w	r2, r4, r0
    48e6:	606a      	str	r2, [r5, #4]
    48e8:	4608      	mov	r0, r1
    48ea:	e008      	b.n	48fe <_free_r+0x14e>
    48ec:	6889      	ldr	r1, [r1, #8]
    48ee:	4281      	cmp	r1, r0
    48f0:	d004      	beq.n	48fc <_free_r+0x14c>
    48f2:	684c      	ldr	r4, [r1, #4]
    48f4:	f024 0403 	bic.w	r4, r4, #3
    48f8:	42a2      	cmp	r2, r4
    48fa:	d3f7      	bcc.n	48ec <_free_r+0x13c>
    48fc:	68c8      	ldr	r0, [r1, #12]
    48fe:	60d8      	str	r0, [r3, #12]
    4900:	6099      	str	r1, [r3, #8]
    4902:	6083      	str	r3, [r0, #8]
    4904:	60cb      	str	r3, [r1, #12]
    4906:	e783      	b.n	4810 <_free_r+0x60>
    4908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    490a:	bf00      	nop
    490c:	200004fc 	.word	0x200004fc
    4910:	20000908 	.word	0x20000908
    4914:	2000097c 	.word	0x2000097c
    4918:	20000504 	.word	0x20000504

0000491c <__sfvwrite_r>:
    491c:	6893      	ldr	r3, [r2, #8]
    491e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4922:	4606      	mov	r6, r0
    4924:	460c      	mov	r4, r1
    4926:	4691      	mov	r9, r2
    4928:	b90b      	cbnz	r3, 492e <__sfvwrite_r+0x12>
    492a:	2000      	movs	r0, #0
    492c:	e14f      	b.n	4bce <__sfvwrite_r+0x2b2>
    492e:	8988      	ldrh	r0, [r1, #12]
    4930:	f000 0108 	and.w	r1, r0, #8
    4934:	b20a      	sxth	r2, r1
    4936:	b10a      	cbz	r2, 493c <__sfvwrite_r+0x20>
    4938:	6923      	ldr	r3, [r4, #16]
    493a:	b95b      	cbnz	r3, 4954 <__sfvwrite_r+0x38>
    493c:	4630      	mov	r0, r6
    493e:	4621      	mov	r1, r4
    4940:	f7ff fc98 	bl	4274 <__swsetup_r>
    4944:	b130      	cbz	r0, 4954 <__sfvwrite_r+0x38>
    4946:	89a1      	ldrh	r1, [r4, #12]
    4948:	2209      	movs	r2, #9
    494a:	f041 0040 	orr.w	r0, r1, #64	; 0x40
    494e:	81a0      	strh	r0, [r4, #12]
    4950:	6032      	str	r2, [r6, #0]
    4952:	e13a      	b.n	4bca <__sfvwrite_r+0x2ae>
    4954:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
    4958:	f8d9 8000 	ldr.w	r8, [r9]
    495c:	f00a 0c02 	and.w	ip, sl, #2
    4960:	fa0f f58c 	sxth.w	r5, ip
    4964:	b315      	cbz	r5, 49ac <__sfvwrite_r+0x90>
    4966:	f04f 0a00 	mov.w	sl, #0
    496a:	4657      	mov	r7, sl
    496c:	b937      	cbnz	r7, 497c <__sfvwrite_r+0x60>
    496e:	f8d8 a000 	ldr.w	sl, [r8]
    4972:	f8d8 7004 	ldr.w	r7, [r8, #4]
    4976:	f108 0808 	add.w	r8, r8, #8
    497a:	e7f7      	b.n	496c <__sfvwrite_r+0x50>
    497c:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    4980:	bf34      	ite	cc
    4982:	463b      	movcc	r3, r7
    4984:	f44f 6380 	movcs.w	r3, #1024	; 0x400
    4988:	4630      	mov	r0, r6
    498a:	69e1      	ldr	r1, [r4, #28]
    498c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    498e:	4652      	mov	r2, sl
    4990:	47a8      	blx	r5
    4992:	2800      	cmp	r0, #0
    4994:	f340 8115 	ble.w	4bc2 <__sfvwrite_r+0x2a6>
    4998:	f8d9 1008 	ldr.w	r1, [r9, #8]
    499c:	4482      	add	sl, r0
    499e:	1a3f      	subs	r7, r7, r0
    49a0:	1a08      	subs	r0, r1, r0
    49a2:	f8c9 0008 	str.w	r0, [r9, #8]
    49a6:	2800      	cmp	r0, #0
    49a8:	d1e0      	bne.n	496c <__sfvwrite_r+0x50>
    49aa:	e7be      	b.n	492a <__sfvwrite_r+0xe>
    49ac:	f01a 0a01 	ands.w	sl, sl, #1
    49b0:	d004      	beq.n	49bc <__sfvwrite_r+0xa0>
    49b2:	46ab      	mov	fp, r5
    49b4:	9501      	str	r5, [sp, #4]
    49b6:	462f      	mov	r7, r5
    49b8:	46aa      	mov	sl, r5
    49ba:	e0c7      	b.n	4b4c <__sfvwrite_r+0x230>
    49bc:	4655      	mov	r5, sl
    49be:	b935      	cbnz	r5, 49ce <__sfvwrite_r+0xb2>
    49c0:	f8d8 a000 	ldr.w	sl, [r8]
    49c4:	f8d8 5004 	ldr.w	r5, [r8, #4]
    49c8:	f108 0808 	add.w	r8, r8, #8
    49cc:	e7f7      	b.n	49be <__sfvwrite_r+0xa2>
    49ce:	89a2      	ldrh	r2, [r4, #12]
    49d0:	f8d4 b008 	ldr.w	fp, [r4, #8]
    49d4:	f402 7000 	and.w	r0, r2, #512	; 0x200
    49d8:	b203      	sxth	r3, r0
    49da:	2b00      	cmp	r3, #0
    49dc:	d052      	beq.n	4a84 <__sfvwrite_r+0x168>
    49de:	455d      	cmp	r5, fp
    49e0:	d340      	bcc.n	4a64 <__sfvwrite_r+0x148>
    49e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
    49e6:	d03b      	beq.n	4a60 <__sfvwrite_r+0x144>
    49e8:	6921      	ldr	r1, [r4, #16]
    49ea:	6827      	ldr	r7, [r4, #0]
    49ec:	6963      	ldr	r3, [r4, #20]
    49ee:	f04f 0b03 	mov.w	fp, #3
    49f2:	fb0b f303 	mul.w	r3, fp, r3
    49f6:	2002      	movs	r0, #2
    49f8:	1a7f      	subs	r7, r7, r1
    49fa:	fb93 fcf0 	sdiv	ip, r3, r0
    49fe:	1c7b      	adds	r3, r7, #1
    4a00:	1958      	adds	r0, r3, r5
    4a02:	f402 6280 	and.w	r2, r2, #1024	; 0x400
    4a06:	4584      	cmp	ip, r0
    4a08:	bf28      	it	cs
    4a0a:	4660      	movcs	r0, ip
    4a0c:	b213      	sxth	r3, r2
    4a0e:	9001      	str	r0, [sp, #4]
    4a10:	4630      	mov	r0, r6
    4a12:	b17b      	cbz	r3, 4a34 <__sfvwrite_r+0x118>
    4a14:	9901      	ldr	r1, [sp, #4]
    4a16:	f000 f9df 	bl	4dd8 <_malloc_r>
    4a1a:	4683      	mov	fp, r0
    4a1c:	b198      	cbz	r0, 4a46 <__sfvwrite_r+0x12a>
    4a1e:	6921      	ldr	r1, [r4, #16]
    4a20:	463a      	mov	r2, r7
    4a22:	f000 fbe9 	bl	51f8 <memcpy>
    4a26:	89a1      	ldrh	r1, [r4, #12]
    4a28:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
    4a2c:	f040 0280 	orr.w	r2, r0, #128	; 0x80
    4a30:	81a2      	strh	r2, [r4, #12]
    4a32:	e00b      	b.n	4a4c <__sfvwrite_r+0x130>
    4a34:	9a01      	ldr	r2, [sp, #4]
    4a36:	f000 fc05 	bl	5244 <_realloc_r>
    4a3a:	4683      	mov	fp, r0
    4a3c:	b930      	cbnz	r0, 4a4c <__sfvwrite_r+0x130>
    4a3e:	4630      	mov	r0, r6
    4a40:	6921      	ldr	r1, [r4, #16]
    4a42:	f7ff feb5 	bl	47b0 <_free_r>
    4a46:	230c      	movs	r3, #12
    4a48:	6033      	str	r3, [r6, #0]
    4a4a:	e0ba      	b.n	4bc2 <__sfvwrite_r+0x2a6>
    4a4c:	9901      	ldr	r1, [sp, #4]
    4a4e:	f8c4 b010 	str.w	fp, [r4, #16]
    4a52:	eb0b 0307 	add.w	r3, fp, r7
    4a56:	1bcf      	subs	r7, r1, r7
    4a58:	6023      	str	r3, [r4, #0]
    4a5a:	6161      	str	r1, [r4, #20]
    4a5c:	46ab      	mov	fp, r5
    4a5e:	60a7      	str	r7, [r4, #8]
    4a60:	455d      	cmp	r5, fp
    4a62:	d200      	bcs.n	4a66 <__sfvwrite_r+0x14a>
    4a64:	46ab      	mov	fp, r5
    4a66:	465a      	mov	r2, fp
    4a68:	4651      	mov	r1, sl
    4a6a:	6820      	ldr	r0, [r4, #0]
    4a6c:	f000 fbcd 	bl	520a <memmove>
    4a70:	68a0      	ldr	r0, [r4, #8]
    4a72:	6823      	ldr	r3, [r4, #0]
    4a74:	ebcb 0200 	rsb	r2, fp, r0
    4a78:	eb03 010b 	add.w	r1, r3, fp
    4a7c:	60a2      	str	r2, [r4, #8]
    4a7e:	6021      	str	r1, [r4, #0]
    4a80:	46ab      	mov	fp, r5
    4a82:	e02a      	b.n	4ada <__sfvwrite_r+0x1be>
    4a84:	6820      	ldr	r0, [r4, #0]
    4a86:	6921      	ldr	r1, [r4, #16]
    4a88:	4288      	cmp	r0, r1
    4a8a:	d90f      	bls.n	4aac <__sfvwrite_r+0x190>
    4a8c:	455d      	cmp	r5, fp
    4a8e:	d90d      	bls.n	4aac <__sfvwrite_r+0x190>
    4a90:	4651      	mov	r1, sl
    4a92:	465a      	mov	r2, fp
    4a94:	f000 fbb9 	bl	520a <memmove>
    4a98:	6822      	ldr	r2, [r4, #0]
    4a9a:	eb02 000b 	add.w	r0, r2, fp
    4a9e:	6020      	str	r0, [r4, #0]
    4aa0:	4621      	mov	r1, r4
    4aa2:	4630      	mov	r0, r6
    4aa4:	f7ff fc52 	bl	434c <_fflush_r>
    4aa8:	b1b8      	cbz	r0, 4ada <__sfvwrite_r+0x1be>
    4aaa:	e08a      	b.n	4bc2 <__sfvwrite_r+0x2a6>
    4aac:	6963      	ldr	r3, [r4, #20]
    4aae:	429d      	cmp	r5, r3
    4ab0:	d308      	bcc.n	4ac4 <__sfvwrite_r+0x1a8>
    4ab2:	6a67      	ldr	r7, [r4, #36]	; 0x24
    4ab4:	69e1      	ldr	r1, [r4, #28]
    4ab6:	4630      	mov	r0, r6
    4ab8:	4652      	mov	r2, sl
    4aba:	47b8      	blx	r7
    4abc:	f1b0 0b00 	subs.w	fp, r0, #0
    4ac0:	dc0b      	bgt.n	4ada <__sfvwrite_r+0x1be>
    4ac2:	e07e      	b.n	4bc2 <__sfvwrite_r+0x2a6>
    4ac4:	4651      	mov	r1, sl
    4ac6:	462a      	mov	r2, r5
    4ac8:	f000 fb9f 	bl	520a <memmove>
    4acc:	68a2      	ldr	r2, [r4, #8]
    4ace:	6823      	ldr	r3, [r4, #0]
    4ad0:	1b50      	subs	r0, r2, r5
    4ad2:	1959      	adds	r1, r3, r5
    4ad4:	46ab      	mov	fp, r5
    4ad6:	60a0      	str	r0, [r4, #8]
    4ad8:	6021      	str	r1, [r4, #0]
    4ada:	f8d9 0008 	ldr.w	r0, [r9, #8]
    4ade:	ebcb 0200 	rsb	r2, fp, r0
    4ae2:	44da      	add	sl, fp
    4ae4:	ebcb 0505 	rsb	r5, fp, r5
    4ae8:	f8c9 2008 	str.w	r2, [r9, #8]
    4aec:	2a00      	cmp	r2, #0
    4aee:	f47f af66 	bne.w	49be <__sfvwrite_r+0xa2>
    4af2:	e71a      	b.n	492a <__sfvwrite_r+0xe>
    4af4:	9801      	ldr	r0, [sp, #4]
    4af6:	2800      	cmp	r0, #0
    4af8:	d032      	beq.n	4b60 <__sfvwrite_r+0x244>
    4afa:	6820      	ldr	r0, [r4, #0]
    4afc:	6921      	ldr	r1, [r4, #16]
    4afe:	68a5      	ldr	r5, [r4, #8]
    4b00:	f8d4 e014 	ldr.w	lr, [r4, #20]
    4b04:	45d3      	cmp	fp, sl
    4b06:	bf34      	ite	cc
    4b08:	465b      	movcc	r3, fp
    4b0a:	4653      	movcs	r3, sl
    4b0c:	4288      	cmp	r0, r1
    4b0e:	d937      	bls.n	4b80 <__sfvwrite_r+0x264>
    4b10:	4475      	add	r5, lr
    4b12:	42ab      	cmp	r3, r5
    4b14:	dd34      	ble.n	4b80 <__sfvwrite_r+0x264>
    4b16:	4639      	mov	r1, r7
    4b18:	462a      	mov	r2, r5
    4b1a:	f000 fb76 	bl	520a <memmove>
    4b1e:	6820      	ldr	r0, [r4, #0]
    4b20:	1943      	adds	r3, r0, r5
    4b22:	6023      	str	r3, [r4, #0]
    4b24:	4630      	mov	r0, r6
    4b26:	4621      	mov	r1, r4
    4b28:	f7ff fc10 	bl	434c <_fflush_r>
    4b2c:	2800      	cmp	r0, #0
    4b2e:	d148      	bne.n	4bc2 <__sfvwrite_r+0x2a6>
    4b30:	ebbb 0b05 	subs.w	fp, fp, r5
    4b34:	d03d      	beq.n	4bb2 <__sfvwrite_r+0x296>
    4b36:	f8d9 2008 	ldr.w	r2, [r9, #8]
    4b3a:	197f      	adds	r7, r7, r5
    4b3c:	ebc5 0a0a 	rsb	sl, r5, sl
    4b40:	1b55      	subs	r5, r2, r5
    4b42:	f8c9 5008 	str.w	r5, [r9, #8]
    4b46:	2d00      	cmp	r5, #0
    4b48:	f43f aeef 	beq.w	492a <__sfvwrite_r+0xe>
    4b4c:	f1ba 0f00 	cmp.w	sl, #0
    4b50:	d1d0      	bne.n	4af4 <__sfvwrite_r+0x1d8>
    4b52:	2100      	movs	r1, #0
    4b54:	e898 0480 	ldmia.w	r8, {r7, sl}
    4b58:	9101      	str	r1, [sp, #4]
    4b5a:	f108 0808 	add.w	r8, r8, #8
    4b5e:	e7f5      	b.n	4b4c <__sfvwrite_r+0x230>
    4b60:	4638      	mov	r0, r7
    4b62:	210a      	movs	r1, #10
    4b64:	4652      	mov	r2, sl
    4b66:	f000 fb39 	bl	51dc <memchr>
    4b6a:	b120      	cbz	r0, 4b76 <__sfvwrite_r+0x25a>
    4b6c:	f100 0101 	add.w	r1, r0, #1
    4b70:	ebc7 0b01 	rsb	fp, r7, r1
    4b74:	e001      	b.n	4b7a <__sfvwrite_r+0x25e>
    4b76:	f10a 0b01 	add.w	fp, sl, #1
    4b7a:	2201      	movs	r2, #1
    4b7c:	9201      	str	r2, [sp, #4]
    4b7e:	e7bc      	b.n	4afa <__sfvwrite_r+0x1de>
    4b80:	4573      	cmp	r3, lr
    4b82:	db08      	blt.n	4b96 <__sfvwrite_r+0x27a>
    4b84:	6a65      	ldr	r5, [r4, #36]	; 0x24
    4b86:	69e1      	ldr	r1, [r4, #28]
    4b88:	4630      	mov	r0, r6
    4b8a:	463a      	mov	r2, r7
    4b8c:	4673      	mov	r3, lr
    4b8e:	47a8      	blx	r5
    4b90:	1e05      	subs	r5, r0, #0
    4b92:	dccd      	bgt.n	4b30 <__sfvwrite_r+0x214>
    4b94:	e015      	b.n	4bc2 <__sfvwrite_r+0x2a6>
    4b96:	461a      	mov	r2, r3
    4b98:	4639      	mov	r1, r7
    4b9a:	9300      	str	r3, [sp, #0]
    4b9c:	f000 fb35 	bl	520a <memmove>
    4ba0:	9b00      	ldr	r3, [sp, #0]
    4ba2:	6825      	ldr	r5, [r4, #0]
    4ba4:	68a0      	ldr	r0, [r4, #8]
    4ba6:	18e9      	adds	r1, r5, r3
    4ba8:	1ac2      	subs	r2, r0, r3
    4baa:	60a2      	str	r2, [r4, #8]
    4bac:	6021      	str	r1, [r4, #0]
    4bae:	461d      	mov	r5, r3
    4bb0:	e7be      	b.n	4b30 <__sfvwrite_r+0x214>
    4bb2:	4630      	mov	r0, r6
    4bb4:	4621      	mov	r1, r4
    4bb6:	f7ff fbc9 	bl	434c <_fflush_r>
    4bba:	b910      	cbnz	r0, 4bc2 <__sfvwrite_r+0x2a6>
    4bbc:	f8cd b004 	str.w	fp, [sp, #4]
    4bc0:	e7b9      	b.n	4b36 <__sfvwrite_r+0x21a>
    4bc2:	89a2      	ldrh	r2, [r4, #12]
    4bc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    4bc8:	81a3      	strh	r3, [r4, #12]
    4bca:	f04f 30ff 	mov.w	r0, #4294967295
    4bce:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004bd2 <_fwalk>:
    4bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bd6:	4604      	mov	r4, r0
    4bd8:	4688      	mov	r8, r1
    4bda:	f7ff fd0f 	bl	45fc <__sfp_lock_acquire>
    4bde:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
    4be2:	2600      	movs	r6, #0
    4be4:	b18c      	cbz	r4, 4c0a <_fwalk+0x38>
    4be6:	68a5      	ldr	r5, [r4, #8]
    4be8:	6867      	ldr	r7, [r4, #4]
    4bea:	3f01      	subs	r7, #1
    4bec:	d40b      	bmi.n	4c06 <_fwalk+0x34>
    4bee:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    4bf2:	b133      	cbz	r3, 4c02 <_fwalk+0x30>
    4bf4:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
    4bf8:	1c43      	adds	r3, r0, #1
    4bfa:	d002      	beq.n	4c02 <_fwalk+0x30>
    4bfc:	4628      	mov	r0, r5
    4bfe:	47c0      	blx	r8
    4c00:	4306      	orrs	r6, r0
    4c02:	3568      	adds	r5, #104	; 0x68
    4c04:	e7f1      	b.n	4bea <_fwalk+0x18>
    4c06:	6824      	ldr	r4, [r4, #0]
    4c08:	e7ec      	b.n	4be4 <_fwalk+0x12>
    4c0a:	f7ff fcf8 	bl	45fe <__sfp_lock_release>
    4c0e:	4630      	mov	r0, r6
    4c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004c14 <_fwalk_reent>:
    4c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4c18:	4680      	mov	r8, r0
    4c1a:	4689      	mov	r9, r1
    4c1c:	f7ff fcee 	bl	45fc <__sfp_lock_acquire>
    4c20:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
    4c24:	2600      	movs	r6, #0
    4c26:	b194      	cbz	r4, 4c4e <_fwalk_reent+0x3a>
    4c28:	68a5      	ldr	r5, [r4, #8]
    4c2a:	6867      	ldr	r7, [r4, #4]
    4c2c:	3f01      	subs	r7, #1
    4c2e:	d40c      	bmi.n	4c4a <_fwalk_reent+0x36>
    4c30:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    4c34:	b13b      	cbz	r3, 4c46 <_fwalk_reent+0x32>
    4c36:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
    4c3a:	1c43      	adds	r3, r0, #1
    4c3c:	d003      	beq.n	4c46 <_fwalk_reent+0x32>
    4c3e:	4640      	mov	r0, r8
    4c40:	4629      	mov	r1, r5
    4c42:	47c8      	blx	r9
    4c44:	4306      	orrs	r6, r0
    4c46:	3568      	adds	r5, #104	; 0x68
    4c48:	e7f0      	b.n	4c2c <_fwalk_reent+0x18>
    4c4a:	6824      	ldr	r4, [r4, #0]
    4c4c:	e7eb      	b.n	4c26 <_fwalk_reent+0x12>
    4c4e:	f7ff fcd6 	bl	45fe <__sfp_lock_release>
    4c52:	4630      	mov	r0, r6
    4c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004c58 <_setlocale_r>:
    4c58:	b510      	push	{r4, lr}
    4c5a:	4614      	mov	r4, r2
    4c5c:	b90a      	cbnz	r2, 4c62 <_setlocale_r+0xa>
    4c5e:	480c      	ldr	r0, [pc, #48]	; (4c90 <_setlocale_r+0x38>)
    4c60:	bd10      	pop	{r4, pc}
    4c62:	4610      	mov	r0, r2
    4c64:	490b      	ldr	r1, [pc, #44]	; (4c94 <_setlocale_r+0x3c>)
    4c66:	f000 fcb2 	bl	55ce <strcmp>
    4c6a:	2800      	cmp	r0, #0
    4c6c:	d0f7      	beq.n	4c5e <_setlocale_r+0x6>
    4c6e:	4620      	mov	r0, r4
    4c70:	4907      	ldr	r1, [pc, #28]	; (4c90 <_setlocale_r+0x38>)
    4c72:	f000 fcac 	bl	55ce <strcmp>
    4c76:	2800      	cmp	r0, #0
    4c78:	d0f1      	beq.n	4c5e <_setlocale_r+0x6>
    4c7a:	4620      	mov	r0, r4
    4c7c:	4906      	ldr	r1, [pc, #24]	; (4c98 <_setlocale_r+0x40>)
    4c7e:	f000 fca6 	bl	55ce <strcmp>
    4c82:	4b03      	ldr	r3, [pc, #12]	; (4c90 <_setlocale_r+0x38>)
    4c84:	2800      	cmp	r0, #0
    4c86:	bf0c      	ite	eq
    4c88:	4618      	moveq	r0, r3
    4c8a:	2000      	movne	r0, #0
    4c8c:	bd10      	pop	{r4, pc}
    4c8e:	bf00      	nop
    4c90:	00005f50 	.word	0x00005f50
    4c94:	00005f94 	.word	0x00005f94
    4c98:	00005f9b 	.word	0x00005f9b

00004c9c <__locale_charset>:
    4c9c:	4800      	ldr	r0, [pc, #0]	; (4ca0 <__locale_charset+0x4>)
    4c9e:	4770      	bx	lr
    4ca0:	20000480 	.word	0x20000480

00004ca4 <__locale_mb_cur_max>:
    4ca4:	4b01      	ldr	r3, [pc, #4]	; (4cac <__locale_mb_cur_max+0x8>)
    4ca6:	6a18      	ldr	r0, [r3, #32]
    4ca8:	4770      	bx	lr
    4caa:	bf00      	nop
    4cac:	20000480 	.word	0x20000480

00004cb0 <__locale_msgcharset>:
    4cb0:	4800      	ldr	r0, [pc, #0]	; (4cb4 <__locale_msgcharset+0x4>)
    4cb2:	4770      	bx	lr
    4cb4:	200004a4 	.word	0x200004a4

00004cb8 <__locale_cjk_lang>:
    4cb8:	2000      	movs	r0, #0
    4cba:	4770      	bx	lr

00004cbc <_localeconv_r>:
    4cbc:	4800      	ldr	r0, [pc, #0]	; (4cc0 <_localeconv_r+0x4>)
    4cbe:	4770      	bx	lr
    4cc0:	200004c4 	.word	0x200004c4

00004cc4 <setlocale>:
    4cc4:	460a      	mov	r2, r1
    4cc6:	4903      	ldr	r1, [pc, #12]	; (4cd4 <setlocale+0x10>)
    4cc8:	4603      	mov	r3, r0
    4cca:	6808      	ldr	r0, [r1, #0]
    4ccc:	4619      	mov	r1, r3
    4cce:	f7ff bfc3 	b.w	4c58 <_setlocale_r>
    4cd2:	bf00      	nop
    4cd4:	20000050 	.word	0x20000050

00004cd8 <localeconv>:
    4cd8:	4800      	ldr	r0, [pc, #0]	; (4cdc <localeconv+0x4>)
    4cda:	4770      	bx	lr
    4cdc:	200004c4 	.word	0x200004c4

00004ce0 <__smakebuf_r>:
    4ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ce2:	898b      	ldrh	r3, [r1, #12]
    4ce4:	460c      	mov	r4, r1
    4ce6:	f003 0102 	and.w	r1, r3, #2
    4cea:	b20a      	sxth	r2, r1
    4cec:	b091      	sub	sp, #68	; 0x44
    4cee:	4606      	mov	r6, r0
    4cf0:	2a00      	cmp	r2, #0
    4cf2:	d13f      	bne.n	4d74 <__smakebuf_r+0x94>
    4cf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    4cf8:	2900      	cmp	r1, #0
    4cfa:	da0d      	bge.n	4d18 <__smakebuf_r+0x38>
    4cfc:	89a7      	ldrh	r7, [r4, #12]
    4cfe:	f007 0280 	and.w	r2, r7, #128	; 0x80
    4d02:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
    4d06:	b210      	sxth	r0, r2
    4d08:	2800      	cmp	r0, #0
    4d0a:	bf0c      	ite	eq
    4d0c:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    4d10:	2540      	movne	r5, #64	; 0x40
    4d12:	81a3      	strh	r3, [r4, #12]
    4d14:	2700      	movs	r7, #0
    4d16:	e020      	b.n	4d5a <__smakebuf_r+0x7a>
    4d18:	aa01      	add	r2, sp, #4
    4d1a:	f000 fd87 	bl	582c <_fstat_r>
    4d1e:	2800      	cmp	r0, #0
    4d20:	dbec      	blt.n	4cfc <__smakebuf_r+0x1c>
    4d22:	9802      	ldr	r0, [sp, #8]
    4d24:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
    4d28:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
    4d2c:	425f      	negs	r7, r3
    4d2e:	415f      	adcs	r7, r3
    4d30:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    4d34:	d10b      	bne.n	4d4e <__smakebuf_r+0x6e>
    4d36:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4d38:	4a1d      	ldr	r2, [pc, #116]	; (4db0 <__smakebuf_r+0xd0>)
    4d3a:	4291      	cmp	r1, r2
    4d3c:	d107      	bne.n	4d4e <__smakebuf_r+0x6e>
    4d3e:	89a3      	ldrh	r3, [r4, #12]
    4d40:	f44f 6580 	mov.w	r5, #1024	; 0x400
    4d44:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
    4d48:	81a1      	strh	r1, [r4, #12]
    4d4a:	64e5      	str	r5, [r4, #76]	; 0x4c
    4d4c:	e005      	b.n	4d5a <__smakebuf_r+0x7a>
    4d4e:	89a0      	ldrh	r0, [r4, #12]
    4d50:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
    4d54:	81a5      	strh	r5, [r4, #12]
    4d56:	f44f 6580 	mov.w	r5, #1024	; 0x400
    4d5a:	4630      	mov	r0, r6
    4d5c:	4629      	mov	r1, r5
    4d5e:	f000 f83b 	bl	4dd8 <_malloc_r>
    4d62:	b970      	cbnz	r0, 4d82 <__smakebuf_r+0xa2>
    4d64:	89a3      	ldrh	r3, [r4, #12]
    4d66:	f403 7200 	and.w	r2, r3, #512	; 0x200
    4d6a:	b210      	sxth	r0, r2
    4d6c:	b9e8      	cbnz	r0, 4daa <__smakebuf_r+0xca>
    4d6e:	f043 0102 	orr.w	r1, r3, #2
    4d72:	81a1      	strh	r1, [r4, #12]
    4d74:	f104 0343 	add.w	r3, r4, #67	; 0x43
    4d78:	2201      	movs	r2, #1
    4d7a:	6023      	str	r3, [r4, #0]
    4d7c:	6123      	str	r3, [r4, #16]
    4d7e:	6162      	str	r2, [r4, #20]
    4d80:	e013      	b.n	4daa <__smakebuf_r+0xca>
    4d82:	89a2      	ldrh	r2, [r4, #12]
    4d84:	490b      	ldr	r1, [pc, #44]	; (4db4 <__smakebuf_r+0xd4>)
    4d86:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    4d8a:	63f1      	str	r1, [r6, #60]	; 0x3c
    4d8c:	81a3      	strh	r3, [r4, #12]
    4d8e:	6020      	str	r0, [r4, #0]
    4d90:	6120      	str	r0, [r4, #16]
    4d92:	6165      	str	r5, [r4, #20]
    4d94:	b14f      	cbz	r7, 4daa <__smakebuf_r+0xca>
    4d96:	4630      	mov	r0, r6
    4d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    4d9c:	f000 fd58 	bl	5850 <_isatty_r>
    4da0:	b118      	cbz	r0, 4daa <__smakebuf_r+0xca>
    4da2:	89a0      	ldrh	r0, [r4, #12]
    4da4:	f040 0101 	orr.w	r1, r0, #1
    4da8:	81a1      	strh	r1, [r4, #12]
    4daa:	b011      	add	sp, #68	; 0x44
    4dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4dae:	bf00      	nop
    4db0:	000055a3 	.word	0x000055a3
    4db4:	000044a9 	.word	0x000044a9

00004db8 <malloc>:
    4db8:	4b02      	ldr	r3, [pc, #8]	; (4dc4 <malloc+0xc>)
    4dba:	4601      	mov	r1, r0
    4dbc:	6818      	ldr	r0, [r3, #0]
    4dbe:	f000 b80b 	b.w	4dd8 <_malloc_r>
    4dc2:	bf00      	nop
    4dc4:	20000050 	.word	0x20000050

00004dc8 <free>:
    4dc8:	4b02      	ldr	r3, [pc, #8]	; (4dd4 <free+0xc>)
    4dca:	4601      	mov	r1, r0
    4dcc:	6818      	ldr	r0, [r3, #0]
    4dce:	f7ff bcef 	b.w	47b0 <_free_r>
    4dd2:	bf00      	nop
    4dd4:	20000050 	.word	0x20000050

00004dd8 <_malloc_r>:
    4dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ddc:	f101 040b 	add.w	r4, r1, #11
    4de0:	2c16      	cmp	r4, #22
    4de2:	4606      	mov	r6, r0
    4de4:	d903      	bls.n	4dee <_malloc_r+0x16>
    4de6:	f034 0407 	bics.w	r4, r4, #7
    4dea:	d501      	bpl.n	4df0 <_malloc_r+0x18>
    4dec:	e002      	b.n	4df4 <_malloc_r+0x1c>
    4dee:	2410      	movs	r4, #16
    4df0:	428c      	cmp	r4, r1
    4df2:	d202      	bcs.n	4dfa <_malloc_r+0x22>
    4df4:	250c      	movs	r5, #12
    4df6:	6035      	str	r5, [r6, #0]
    4df8:	e1d9      	b.n	51ae <_malloc_r+0x3d6>
    4dfa:	4630      	mov	r0, r6
    4dfc:	f000 fa1f 	bl	523e <__malloc_lock>
    4e00:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
    4e04:	d214      	bcs.n	4e30 <_malloc_r+0x58>
    4e06:	4da0      	ldr	r5, [pc, #640]	; (5088 <_malloc_r+0x2b0>)
    4e08:	08e1      	lsrs	r1, r4, #3
    4e0a:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
    4e0e:	68c5      	ldr	r5, [r0, #12]
    4e10:	4285      	cmp	r5, r0
    4e12:	d105      	bne.n	4e20 <_malloc_r+0x48>
    4e14:	f105 0308 	add.w	r3, r5, #8
    4e18:	696d      	ldr	r5, [r5, #20]
    4e1a:	1c8a      	adds	r2, r1, #2
    4e1c:	429d      	cmp	r5, r3
    4e1e:	d044      	beq.n	4eaa <_malloc_r+0xd2>
    4e20:	68e8      	ldr	r0, [r5, #12]
    4e22:	68a9      	ldr	r1, [r5, #8]
    4e24:	686a      	ldr	r2, [r5, #4]
    4e26:	60c8      	str	r0, [r1, #12]
    4e28:	f022 0303 	bic.w	r3, r2, #3
    4e2c:	6081      	str	r1, [r0, #8]
    4e2e:	e059      	b.n	4ee4 <_malloc_r+0x10c>
    4e30:	0a62      	lsrs	r2, r4, #9
    4e32:	d101      	bne.n	4e38 <_malloc_r+0x60>
    4e34:	08e2      	lsrs	r2, r4, #3
    4e36:	e01b      	b.n	4e70 <_malloc_r+0x98>
    4e38:	2a04      	cmp	r2, #4
    4e3a:	d802      	bhi.n	4e42 <_malloc_r+0x6a>
    4e3c:	09a2      	lsrs	r2, r4, #6
    4e3e:	3238      	adds	r2, #56	; 0x38
    4e40:	e016      	b.n	4e70 <_malloc_r+0x98>
    4e42:	2a14      	cmp	r2, #20
    4e44:	d801      	bhi.n	4e4a <_malloc_r+0x72>
    4e46:	325b      	adds	r2, #91	; 0x5b
    4e48:	e012      	b.n	4e70 <_malloc_r+0x98>
    4e4a:	2a54      	cmp	r2, #84	; 0x54
    4e4c:	d802      	bhi.n	4e54 <_malloc_r+0x7c>
    4e4e:	0b22      	lsrs	r2, r4, #12
    4e50:	326e      	adds	r2, #110	; 0x6e
    4e52:	e00d      	b.n	4e70 <_malloc_r+0x98>
    4e54:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    4e58:	d802      	bhi.n	4e60 <_malloc_r+0x88>
    4e5a:	0be2      	lsrs	r2, r4, #15
    4e5c:	3277      	adds	r2, #119	; 0x77
    4e5e:	e007      	b.n	4e70 <_malloc_r+0x98>
    4e60:	f240 5354 	movw	r3, #1364	; 0x554
    4e64:	429a      	cmp	r2, r3
    4e66:	d802      	bhi.n	4e6e <_malloc_r+0x96>
    4e68:	0ca2      	lsrs	r2, r4, #18
    4e6a:	327c      	adds	r2, #124	; 0x7c
    4e6c:	e000      	b.n	4e70 <_malloc_r+0x98>
    4e6e:	227e      	movs	r2, #126	; 0x7e
    4e70:	4885      	ldr	r0, [pc, #532]	; (5088 <_malloc_r+0x2b0>)
    4e72:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
    4e76:	68dd      	ldr	r5, [r3, #12]
    4e78:	429d      	cmp	r5, r3
    4e7a:	d015      	beq.n	4ea8 <_malloc_r+0xd0>
    4e7c:	6869      	ldr	r1, [r5, #4]
    4e7e:	f021 0103 	bic.w	r1, r1, #3
    4e82:	1b08      	subs	r0, r1, r4
    4e84:	280f      	cmp	r0, #15
    4e86:	dd01      	ble.n	4e8c <_malloc_r+0xb4>
    4e88:	3a01      	subs	r2, #1
    4e8a:	e00d      	b.n	4ea8 <_malloc_r+0xd0>
    4e8c:	2800      	cmp	r0, #0
    4e8e:	db09      	blt.n	4ea4 <_malloc_r+0xcc>
    4e90:	68eb      	ldr	r3, [r5, #12]
    4e92:	68aa      	ldr	r2, [r5, #8]
    4e94:	60d3      	str	r3, [r2, #12]
    4e96:	609a      	str	r2, [r3, #8]
    4e98:	186b      	adds	r3, r5, r1
    4e9a:	685a      	ldr	r2, [r3, #4]
    4e9c:	f042 0001 	orr.w	r0, r2, #1
    4ea0:	6058      	str	r0, [r3, #4]
    4ea2:	e190      	b.n	51c6 <_malloc_r+0x3ee>
    4ea4:	68ed      	ldr	r5, [r5, #12]
    4ea6:	e7e7      	b.n	4e78 <_malloc_r+0xa0>
    4ea8:	3201      	adds	r2, #1
    4eaa:	4977      	ldr	r1, [pc, #476]	; (5088 <_malloc_r+0x2b0>)
    4eac:	690d      	ldr	r5, [r1, #16]
    4eae:	f101 0708 	add.w	r7, r1, #8
    4eb2:	42bd      	cmp	r5, r7
    4eb4:	d068      	beq.n	4f88 <_malloc_r+0x1b0>
    4eb6:	6868      	ldr	r0, [r5, #4]
    4eb8:	f020 0303 	bic.w	r3, r0, #3
    4ebc:	1b18      	subs	r0, r3, r4
    4ebe:	280f      	cmp	r0, #15
    4ec0:	dd0c      	ble.n	4edc <_malloc_r+0x104>
    4ec2:	192b      	adds	r3, r5, r4
    4ec4:	614b      	str	r3, [r1, #20]
    4ec6:	610b      	str	r3, [r1, #16]
    4ec8:	f044 0401 	orr.w	r4, r4, #1
    4ecc:	f040 0101 	orr.w	r1, r0, #1
    4ed0:	606c      	str	r4, [r5, #4]
    4ed2:	60df      	str	r7, [r3, #12]
    4ed4:	609f      	str	r7, [r3, #8]
    4ed6:	6059      	str	r1, [r3, #4]
    4ed8:	5018      	str	r0, [r3, r0]
    4eda:	e174      	b.n	51c6 <_malloc_r+0x3ee>
    4edc:	2800      	cmp	r0, #0
    4ede:	614f      	str	r7, [r1, #20]
    4ee0:	610f      	str	r7, [r1, #16]
    4ee2:	db01      	blt.n	4ee8 <_malloc_r+0x110>
    4ee4:	18eb      	adds	r3, r5, r3
    4ee6:	e7d8      	b.n	4e9a <_malloc_r+0xc2>
    4ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4eec:	d20f      	bcs.n	4f0e <_malloc_r+0x136>
    4eee:	08db      	lsrs	r3, r3, #3
    4ef0:	1098      	asrs	r0, r3, #2
    4ef2:	2701      	movs	r7, #1
    4ef4:	fa07 f700 	lsl.w	r7, r7, r0
    4ef8:	6848      	ldr	r0, [r1, #4]
    4efa:	4307      	orrs	r7, r0
    4efc:	604f      	str	r7, [r1, #4]
    4efe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    4f02:	60e9      	str	r1, [r5, #12]
    4f04:	688b      	ldr	r3, [r1, #8]
    4f06:	60ab      	str	r3, [r5, #8]
    4f08:	60dd      	str	r5, [r3, #12]
    4f0a:	608d      	str	r5, [r1, #8]
    4f0c:	e03c      	b.n	4f88 <_malloc_r+0x1b0>
    4f0e:	0a58      	lsrs	r0, r3, #9
    4f10:	2804      	cmp	r0, #4
    4f12:	d802      	bhi.n	4f1a <_malloc_r+0x142>
    4f14:	0998      	lsrs	r0, r3, #6
    4f16:	3038      	adds	r0, #56	; 0x38
    4f18:	e016      	b.n	4f48 <_malloc_r+0x170>
    4f1a:	2814      	cmp	r0, #20
    4f1c:	d801      	bhi.n	4f22 <_malloc_r+0x14a>
    4f1e:	305b      	adds	r0, #91	; 0x5b
    4f20:	e012      	b.n	4f48 <_malloc_r+0x170>
    4f22:	2854      	cmp	r0, #84	; 0x54
    4f24:	d802      	bhi.n	4f2c <_malloc_r+0x154>
    4f26:	0b18      	lsrs	r0, r3, #12
    4f28:	306e      	adds	r0, #110	; 0x6e
    4f2a:	e00d      	b.n	4f48 <_malloc_r+0x170>
    4f2c:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
    4f30:	d802      	bhi.n	4f38 <_malloc_r+0x160>
    4f32:	0bd8      	lsrs	r0, r3, #15
    4f34:	3077      	adds	r0, #119	; 0x77
    4f36:	e007      	b.n	4f48 <_malloc_r+0x170>
    4f38:	f240 5754 	movw	r7, #1364	; 0x554
    4f3c:	42b8      	cmp	r0, r7
    4f3e:	d802      	bhi.n	4f46 <_malloc_r+0x16e>
    4f40:	0c98      	lsrs	r0, r3, #18
    4f42:	307c      	adds	r0, #124	; 0x7c
    4f44:	e000      	b.n	4f48 <_malloc_r+0x170>
    4f46:	207e      	movs	r0, #126	; 0x7e
    4f48:	f8df e13c 	ldr.w	lr, [pc, #316]	; 5088 <_malloc_r+0x2b0>
    4f4c:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
    4f50:	68b9      	ldr	r1, [r7, #8]
    4f52:	42b9      	cmp	r1, r7
    4f54:	d10e      	bne.n	4f74 <_malloc_r+0x19c>
    4f56:	1087      	asrs	r7, r0, #2
    4f58:	2301      	movs	r3, #1
    4f5a:	fa03 f007 	lsl.w	r0, r3, r7
    4f5e:	f8de 7004 	ldr.w	r7, [lr, #4]
    4f62:	ea40 0307 	orr.w	r3, r0, r7
    4f66:	f8ce 3004 	str.w	r3, [lr, #4]
    4f6a:	4608      	mov	r0, r1
    4f6c:	e008      	b.n	4f80 <_malloc_r+0x1a8>
    4f6e:	6889      	ldr	r1, [r1, #8]
    4f70:	42b9      	cmp	r1, r7
    4f72:	d004      	beq.n	4f7e <_malloc_r+0x1a6>
    4f74:	6848      	ldr	r0, [r1, #4]
    4f76:	f020 0003 	bic.w	r0, r0, #3
    4f7a:	4283      	cmp	r3, r0
    4f7c:	d3f7      	bcc.n	4f6e <_malloc_r+0x196>
    4f7e:	68c8      	ldr	r0, [r1, #12]
    4f80:	60e8      	str	r0, [r5, #12]
    4f82:	60a9      	str	r1, [r5, #8]
    4f84:	60cd      	str	r5, [r1, #12]
    4f86:	6085      	str	r5, [r0, #8]
    4f88:	4f3f      	ldr	r7, [pc, #252]	; (5088 <_malloc_r+0x2b0>)
    4f8a:	1095      	asrs	r5, r2, #2
    4f8c:	2001      	movs	r0, #1
    4f8e:	6879      	ldr	r1, [r7, #4]
    4f90:	fa00 f305 	lsl.w	r3, r0, r5
    4f94:	428b      	cmp	r3, r1
    4f96:	d85d      	bhi.n	5054 <_malloc_r+0x27c>
    4f98:	420b      	tst	r3, r1
    4f9a:	d105      	bne.n	4fa8 <_malloc_r+0x1d0>
    4f9c:	f022 0203 	bic.w	r2, r2, #3
    4fa0:	005b      	lsls	r3, r3, #1
    4fa2:	3204      	adds	r2, #4
    4fa4:	420b      	tst	r3, r1
    4fa6:	d0fb      	beq.n	4fa0 <_malloc_r+0x1c8>
    4fa8:	4d37      	ldr	r5, [pc, #220]	; (5088 <_malloc_r+0x2b0>)
    4faa:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
    4fae:	4677      	mov	r7, lr
    4fb0:	4610      	mov	r0, r2
    4fb2:	68fd      	ldr	r5, [r7, #12]
    4fb4:	42bd      	cmp	r5, r7
    4fb6:	d02d      	beq.n	5014 <_malloc_r+0x23c>
    4fb8:	6869      	ldr	r1, [r5, #4]
    4fba:	f021 0c03 	bic.w	ip, r1, #3
    4fbe:	ebc4 010c 	rsb	r1, r4, ip
    4fc2:	290f      	cmp	r1, #15
    4fc4:	dd13      	ble.n	4fee <_malloc_r+0x216>
    4fc6:	192b      	adds	r3, r5, r4
    4fc8:	f044 0401 	orr.w	r4, r4, #1
    4fcc:	68ea      	ldr	r2, [r5, #12]
    4fce:	606c      	str	r4, [r5, #4]
    4fd0:	f855 0f08 	ldr.w	r0, [r5, #8]!
    4fd4:	5059      	str	r1, [r3, r1]
    4fd6:	60c2      	str	r2, [r0, #12]
    4fd8:	6090      	str	r0, [r2, #8]
    4fda:	4a2b      	ldr	r2, [pc, #172]	; (5088 <_malloc_r+0x2b0>)
    4fdc:	f041 0001 	orr.w	r0, r1, #1
    4fe0:	6153      	str	r3, [r2, #20]
    4fe2:	6113      	str	r3, [r2, #16]
    4fe4:	3208      	adds	r2, #8
    4fe6:	60da      	str	r2, [r3, #12]
    4fe8:	609a      	str	r2, [r3, #8]
    4fea:	6058      	str	r0, [r3, #4]
    4fec:	e00c      	b.n	5008 <_malloc_r+0x230>
    4fee:	2900      	cmp	r1, #0
    4ff0:	db0e      	blt.n	5010 <_malloc_r+0x238>
    4ff2:	eb05 000c 	add.w	r0, r5, ip
    4ff6:	68e9      	ldr	r1, [r5, #12]
    4ff8:	6842      	ldr	r2, [r0, #4]
    4ffa:	f042 0301 	orr.w	r3, r2, #1
    4ffe:	6043      	str	r3, [r0, #4]
    5000:	f855 0f08 	ldr.w	r0, [r5, #8]!
    5004:	60c1      	str	r1, [r0, #12]
    5006:	6088      	str	r0, [r1, #8]
    5008:	4630      	mov	r0, r6
    500a:	f000 f919 	bl	5240 <__malloc_unlock>
    500e:	e0de      	b.n	51ce <_malloc_r+0x3f6>
    5010:	68ed      	ldr	r5, [r5, #12]
    5012:	e7cf      	b.n	4fb4 <_malloc_r+0x1dc>
    5014:	3001      	adds	r0, #1
    5016:	0781      	lsls	r1, r0, #30
    5018:	f105 0708 	add.w	r7, r5, #8
    501c:	d1c9      	bne.n	4fb2 <_malloc_r+0x1da>
    501e:	4671      	mov	r1, lr
    5020:	0795      	lsls	r5, r2, #30
    5022:	d105      	bne.n	5030 <_malloc_r+0x258>
    5024:	4a18      	ldr	r2, [pc, #96]	; (5088 <_malloc_r+0x2b0>)
    5026:	6855      	ldr	r5, [r2, #4]
    5028:	ea25 0503 	bic.w	r5, r5, r3
    502c:	6055      	str	r5, [r2, #4]
    502e:	e005      	b.n	503c <_malloc_r+0x264>
    5030:	f1a1 0708 	sub.w	r7, r1, #8
    5034:	6809      	ldr	r1, [r1, #0]
    5036:	3a01      	subs	r2, #1
    5038:	42b9      	cmp	r1, r7
    503a:	d0f1      	beq.n	5020 <_malloc_r+0x248>
    503c:	4f12      	ldr	r7, [pc, #72]	; (5088 <_malloc_r+0x2b0>)
    503e:	687f      	ldr	r7, [r7, #4]
    5040:	005b      	lsls	r3, r3, #1
    5042:	42bb      	cmp	r3, r7
    5044:	d806      	bhi.n	5054 <_malloc_r+0x27c>
    5046:	b12b      	cbz	r3, 5054 <_malloc_r+0x27c>
    5048:	4602      	mov	r2, r0
    504a:	423b      	tst	r3, r7
    504c:	d1ac      	bne.n	4fa8 <_malloc_r+0x1d0>
    504e:	3204      	adds	r2, #4
    5050:	005b      	lsls	r3, r3, #1
    5052:	e7fa      	b.n	504a <_malloc_r+0x272>
    5054:	4b0c      	ldr	r3, [pc, #48]	; (5088 <_malloc_r+0x2b0>)
    5056:	689f      	ldr	r7, [r3, #8]
    5058:	6878      	ldr	r0, [r7, #4]
    505a:	f020 0903 	bic.w	r9, r0, #3
    505e:	45a1      	cmp	r9, r4
    5060:	4619      	mov	r1, r3
    5062:	d304      	bcc.n	506e <_malloc_r+0x296>
    5064:	ebc4 0009 	rsb	r0, r4, r9
    5068:	280f      	cmp	r0, #15
    506a:	f300 80a2 	bgt.w	51b2 <_malloc_r+0x3da>
    506e:	4a07      	ldr	r2, [pc, #28]	; (508c <_malloc_r+0x2b4>)
    5070:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
    5074:	6815      	ldr	r5, [r2, #0]
    5076:	3301      	adds	r3, #1
    5078:	eb07 0a09 	add.w	sl, r7, r9
    507c:	eb04 0805 	add.w	r8, r4, r5
    5080:	d106      	bne.n	5090 <_malloc_r+0x2b8>
    5082:	f108 0810 	add.w	r8, r8, #16
    5086:	e00b      	b.n	50a0 <_malloc_r+0x2c8>
    5088:	200004fc 	.word	0x200004fc
    508c:	2000097c 	.word	0x2000097c
    5090:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
    5094:	f100 010f 	add.w	r1, r0, #15
    5098:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
    509c:	f022 080f 	bic.w	r8, r2, #15
    50a0:	4630      	mov	r0, r6
    50a2:	4641      	mov	r1, r8
    50a4:	f000 fa3c 	bl	5520 <_sbrk_r>
    50a8:	1c42      	adds	r2, r0, #1
    50aa:	4605      	mov	r5, r0
    50ac:	d071      	beq.n	5192 <_malloc_r+0x3ba>
    50ae:	4550      	cmp	r0, sl
    50b0:	d202      	bcs.n	50b8 <_malloc_r+0x2e0>
    50b2:	4b48      	ldr	r3, [pc, #288]	; (51d4 <_malloc_r+0x3fc>)
    50b4:	429f      	cmp	r7, r3
    50b6:	d16c      	bne.n	5192 <_malloc_r+0x3ba>
    50b8:	4847      	ldr	r0, [pc, #284]	; (51d8 <_malloc_r+0x400>)
    50ba:	4a46      	ldr	r2, [pc, #280]	; (51d4 <_malloc_r+0x3fc>)
    50bc:	6841      	ldr	r1, [r0, #4]
    50be:	4555      	cmp	r5, sl
    50c0:	eb08 0301 	add.w	r3, r8, r1
    50c4:	6043      	str	r3, [r0, #4]
    50c6:	d107      	bne.n	50d8 <_malloc_r+0x300>
    50c8:	0529      	lsls	r1, r5, #20
    50ca:	d105      	bne.n	50d8 <_malloc_r+0x300>
    50cc:	6895      	ldr	r5, [r2, #8]
    50ce:	44c8      	add	r8, r9
    50d0:	f048 0001 	orr.w	r0, r8, #1
    50d4:	6068      	str	r0, [r5, #4]
    50d6:	e051      	b.n	517c <_malloc_r+0x3a4>
    50d8:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
    50dc:	1c42      	adds	r2, r0, #1
    50de:	d103      	bne.n	50e8 <_malloc_r+0x310>
    50e0:	4a3c      	ldr	r2, [pc, #240]	; (51d4 <_malloc_r+0x3fc>)
    50e2:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
    50e6:	e005      	b.n	50f4 <_malloc_r+0x31c>
    50e8:	ebca 0a05 	rsb	sl, sl, r5
    50ec:	eb03 010a 	add.w	r1, r3, sl
    50f0:	4b39      	ldr	r3, [pc, #228]	; (51d8 <_malloc_r+0x400>)
    50f2:	6059      	str	r1, [r3, #4]
    50f4:	f015 0007 	ands.w	r0, r5, #7
    50f8:	bf1c      	itt	ne
    50fa:	f1c0 0008 	rsbne	r0, r0, #8
    50fe:	182d      	addne	r5, r5, r0
    5100:	eb05 0c08 	add.w	ip, r5, r8
    5104:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    5108:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
    510c:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
    5110:	4641      	mov	r1, r8
    5112:	4630      	mov	r0, r6
    5114:	f000 fa04 	bl	5520 <_sbrk_r>
    5118:	4a2f      	ldr	r2, [pc, #188]	; (51d8 <_malloc_r+0x400>)
    511a:	1c43      	adds	r3, r0, #1
    511c:	6853      	ldr	r3, [r2, #4]
    511e:	bf08      	it	eq
    5120:	f04f 0800 	moveq.w	r8, #0
    5124:	eb08 0103 	add.w	r1, r8, r3
    5128:	bf08      	it	eq
    512a:	4628      	moveq	r0, r5
    512c:	6051      	str	r1, [r2, #4]
    512e:	1b40      	subs	r0, r0, r5
    5130:	4a28      	ldr	r2, [pc, #160]	; (51d4 <_malloc_r+0x3fc>)
    5132:	eb00 0308 	add.w	r3, r0, r8
    5136:	f043 0101 	orr.w	r1, r3, #1
    513a:	4297      	cmp	r7, r2
    513c:	6095      	str	r5, [r2, #8]
    513e:	6069      	str	r1, [r5, #4]
    5140:	d01c      	beq.n	517c <_malloc_r+0x3a4>
    5142:	f1b9 0f0f 	cmp.w	r9, #15
    5146:	d802      	bhi.n	514e <_malloc_r+0x376>
    5148:	2201      	movs	r2, #1
    514a:	606a      	str	r2, [r5, #4]
    514c:	e021      	b.n	5192 <_malloc_r+0x3ba>
    514e:	687d      	ldr	r5, [r7, #4]
    5150:	f1a9 090c 	sub.w	r9, r9, #12
    5154:	f029 0907 	bic.w	r9, r9, #7
    5158:	eb07 0309 	add.w	r3, r7, r9
    515c:	f005 0201 	and.w	r2, r5, #1
    5160:	2105      	movs	r1, #5
    5162:	ea49 0002 	orr.w	r0, r9, r2
    5166:	f1b9 0f0f 	cmp.w	r9, #15
    516a:	6078      	str	r0, [r7, #4]
    516c:	6059      	str	r1, [r3, #4]
    516e:	6099      	str	r1, [r3, #8]
    5170:	d904      	bls.n	517c <_malloc_r+0x3a4>
    5172:	4630      	mov	r0, r6
    5174:	f107 0108 	add.w	r1, r7, #8
    5178:	f7ff fb1a 	bl	47b0 <_free_r>
    517c:	4a16      	ldr	r2, [pc, #88]	; (51d8 <_malloc_r+0x400>)
    517e:	6853      	ldr	r3, [r2, #4]
    5180:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    5182:	6b15      	ldr	r5, [r2, #48]	; 0x30
    5184:	428b      	cmp	r3, r1
    5186:	bf88      	it	hi
    5188:	62d3      	strhi	r3, [r2, #44]	; 0x2c
    518a:	42ab      	cmp	r3, r5
    518c:	bf84      	itt	hi
    518e:	4d12      	ldrhi	r5, [pc, #72]	; (51d8 <_malloc_r+0x400>)
    5190:	632b      	strhi	r3, [r5, #48]	; 0x30
    5192:	4810      	ldr	r0, [pc, #64]	; (51d4 <_malloc_r+0x3fc>)
    5194:	6882      	ldr	r2, [r0, #8]
    5196:	6853      	ldr	r3, [r2, #4]
    5198:	f023 0103 	bic.w	r1, r3, #3
    519c:	42a1      	cmp	r1, r4
    519e:	ebc4 0001 	rsb	r0, r4, r1
    51a2:	d301      	bcc.n	51a8 <_malloc_r+0x3d0>
    51a4:	280f      	cmp	r0, #15
    51a6:	dc04      	bgt.n	51b2 <_malloc_r+0x3da>
    51a8:	4630      	mov	r0, r6
    51aa:	f000 f849 	bl	5240 <__malloc_unlock>
    51ae:	2500      	movs	r5, #0
    51b0:	e00d      	b.n	51ce <_malloc_r+0x3f6>
    51b2:	4a08      	ldr	r2, [pc, #32]	; (51d4 <_malloc_r+0x3fc>)
    51b4:	6895      	ldr	r5, [r2, #8]
    51b6:	f044 0301 	orr.w	r3, r4, #1
    51ba:	192c      	adds	r4, r5, r4
    51bc:	f040 0101 	orr.w	r1, r0, #1
    51c0:	606b      	str	r3, [r5, #4]
    51c2:	6094      	str	r4, [r2, #8]
    51c4:	6061      	str	r1, [r4, #4]
    51c6:	4630      	mov	r0, r6
    51c8:	f000 f83a 	bl	5240 <__malloc_unlock>
    51cc:	3508      	adds	r5, #8
    51ce:	4628      	mov	r0, r5
    51d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    51d4:	200004fc 	.word	0x200004fc
    51d8:	2000097c 	.word	0x2000097c

000051dc <memchr>:
    51dc:	b510      	push	{r4, lr}
    51de:	b2c9      	uxtb	r1, r1
    51e0:	4603      	mov	r3, r0
    51e2:	1882      	adds	r2, r0, r2
    51e4:	4293      	cmp	r3, r2
    51e6:	4618      	mov	r0, r3
    51e8:	d004      	beq.n	51f4 <memchr+0x18>
    51ea:	7804      	ldrb	r4, [r0, #0]
    51ec:	3301      	adds	r3, #1
    51ee:	428c      	cmp	r4, r1
    51f0:	d1f8      	bne.n	51e4 <memchr+0x8>
    51f2:	e000      	b.n	51f6 <memchr+0x1a>
    51f4:	2000      	movs	r0, #0
    51f6:	bd10      	pop	{r4, pc}

000051f8 <memcpy>:
    51f8:	b510      	push	{r4, lr}
    51fa:	2300      	movs	r3, #0
    51fc:	4293      	cmp	r3, r2
    51fe:	d003      	beq.n	5208 <memcpy+0x10>
    5200:	5ccc      	ldrb	r4, [r1, r3]
    5202:	54c4      	strb	r4, [r0, r3]
    5204:	3301      	adds	r3, #1
    5206:	e7f9      	b.n	51fc <memcpy+0x4>
    5208:	bd10      	pop	{r4, pc}

0000520a <memmove>:
    520a:	4281      	cmp	r1, r0
    520c:	b570      	push	{r4, r5, r6, lr}
    520e:	d20e      	bcs.n	522e <memmove+0x24>
    5210:	188c      	adds	r4, r1, r2
    5212:	42a0      	cmp	r0, r4
    5214:	d20b      	bcs.n	522e <memmove+0x24>
    5216:	1885      	adds	r5, r0, r2
    5218:	4613      	mov	r3, r2
    521a:	f113 33ff 	adds.w	r3, r3, #4294967295
    521e:	d305      	bcc.n	522c <memmove+0x22>
    5220:	4251      	negs	r1, r2
    5222:	1866      	adds	r6, r4, r1
    5224:	1869      	adds	r1, r5, r1
    5226:	5cf6      	ldrb	r6, [r6, r3]
    5228:	54ce      	strb	r6, [r1, r3]
    522a:	e7f6      	b.n	521a <memmove+0x10>
    522c:	bd70      	pop	{r4, r5, r6, pc}
    522e:	2300      	movs	r3, #0
    5230:	4293      	cmp	r3, r2
    5232:	d003      	beq.n	523c <memmove+0x32>
    5234:	5ccc      	ldrb	r4, [r1, r3]
    5236:	54c4      	strb	r4, [r0, r3]
    5238:	3301      	adds	r3, #1
    523a:	e7f9      	b.n	5230 <memmove+0x26>
    523c:	bd70      	pop	{r4, r5, r6, pc}

0000523e <__malloc_lock>:
    523e:	4770      	bx	lr

00005240 <__malloc_unlock>:
    5240:	4770      	bx	lr
	...

00005244 <_realloc_r>:
    5244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5248:	4681      	mov	r9, r0
    524a:	4616      	mov	r6, r2
    524c:	460c      	mov	r4, r1
    524e:	b921      	cbnz	r1, 525a <_realloc_r+0x16>
    5250:	4611      	mov	r1, r2
    5252:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5256:	f7ff bdbf 	b.w	4dd8 <_malloc_r>
    525a:	f7ff fff0 	bl	523e <__malloc_lock>
    525e:	f106 070b 	add.w	r7, r6, #11
    5262:	f854 5c04 	ldr.w	r5, [r4, #-4]
    5266:	2f16      	cmp	r7, #22
    5268:	f1a4 0b08 	sub.w	fp, r4, #8
    526c:	f025 0803 	bic.w	r8, r5, #3
    5270:	d903      	bls.n	527a <_realloc_r+0x36>
    5272:	f037 0707 	bics.w	r7, r7, #7
    5276:	d501      	bpl.n	527c <_realloc_r+0x38>
    5278:	e002      	b.n	5280 <_realloc_r+0x3c>
    527a:	2710      	movs	r7, #16
    527c:	42b7      	cmp	r7, r6
    527e:	d204      	bcs.n	528a <_realloc_r+0x46>
    5280:	200c      	movs	r0, #12
    5282:	f8c9 0000 	str.w	r0, [r9]
    5286:	2600      	movs	r6, #0
    5288:	e145      	b.n	5516 <_realloc_r+0x2d2>
    528a:	45b8      	cmp	r8, r7
    528c:	f280 811a 	bge.w	54c4 <_realloc_r+0x280>
    5290:	4aa2      	ldr	r2, [pc, #648]	; (551c <_realloc_r+0x2d8>)
    5292:	6891      	ldr	r1, [r2, #8]
    5294:	eb0b 0308 	add.w	r3, fp, r8
    5298:	428b      	cmp	r3, r1
    529a:	d006      	beq.n	52aa <_realloc_r+0x66>
    529c:	6858      	ldr	r0, [r3, #4]
    529e:	f020 0201 	bic.w	r2, r0, #1
    52a2:	1898      	adds	r0, r3, r2
    52a4:	6842      	ldr	r2, [r0, #4]
    52a6:	07d0      	lsls	r0, r2, #31
    52a8:	d426      	bmi.n	52f8 <_realloc_r+0xb4>
    52aa:	685a      	ldr	r2, [r3, #4]
    52ac:	428b      	cmp	r3, r1
    52ae:	f022 0003 	bic.w	r0, r2, #3
    52b2:	eb00 0a08 	add.w	sl, r0, r8
    52b6:	d118      	bne.n	52ea <_realloc_r+0xa6>
    52b8:	f107 0210 	add.w	r2, r7, #16
    52bc:	4592      	cmp	sl, r2
    52be:	db1d      	blt.n	52fc <_realloc_r+0xb8>
    52c0:	eb0b 0507 	add.w	r5, fp, r7
    52c4:	ebc7 0a0a 	rsb	sl, r7, sl
    52c8:	f04a 0101 	orr.w	r1, sl, #1
    52cc:	6069      	str	r1, [r5, #4]
    52ce:	f854 2c04 	ldr.w	r2, [r4, #-4]
    52d2:	4e92      	ldr	r6, [pc, #584]	; (551c <_realloc_r+0x2d8>)
    52d4:	f002 0301 	and.w	r3, r2, #1
    52d8:	431f      	orrs	r7, r3
    52da:	60b5      	str	r5, [r6, #8]
    52dc:	f844 7c04 	str.w	r7, [r4, #-4]
    52e0:	4648      	mov	r0, r9
    52e2:	f7ff ffad 	bl	5240 <__malloc_unlock>
    52e6:	4626      	mov	r6, r4
    52e8:	e115      	b.n	5516 <_realloc_r+0x2d2>
    52ea:	45ba      	cmp	sl, r7
    52ec:	db06      	blt.n	52fc <_realloc_r+0xb8>
    52ee:	68dd      	ldr	r5, [r3, #12]
    52f0:	689e      	ldr	r6, [r3, #8]
    52f2:	60f5      	str	r5, [r6, #12]
    52f4:	60ae      	str	r6, [r5, #8]
    52f6:	e0e6      	b.n	54c6 <_realloc_r+0x282>
    52f8:	2000      	movs	r0, #0
    52fa:	4603      	mov	r3, r0
    52fc:	07ea      	lsls	r2, r5, #31
    52fe:	f100 8091 	bmi.w	5424 <_realloc_r+0x1e0>
    5302:	f854 5c08 	ldr.w	r5, [r4, #-8]
    5306:	ebc5 050b 	rsb	r5, r5, fp
    530a:	686a      	ldr	r2, [r5, #4]
    530c:	f022 0203 	bic.w	r2, r2, #3
    5310:	2b00      	cmp	r3, #0
    5312:	d051      	beq.n	53b8 <_realloc_r+0x174>
    5314:	eb02 0a08 	add.w	sl, r2, r8
    5318:	428b      	cmp	r3, r1
    531a:	4482      	add	sl, r0
    531c:	d145      	bne.n	53aa <_realloc_r+0x166>
    531e:	f107 0310 	add.w	r3, r7, #16
    5322:	459a      	cmp	sl, r3
    5324:	db48      	blt.n	53b8 <_realloc_r+0x174>
    5326:	462e      	mov	r6, r5
    5328:	68e9      	ldr	r1, [r5, #12]
    532a:	f856 3f08 	ldr.w	r3, [r6, #8]!
    532e:	f1a8 0204 	sub.w	r2, r8, #4
    5332:	2a24      	cmp	r2, #36	; 0x24
    5334:	60d9      	str	r1, [r3, #12]
    5336:	608b      	str	r3, [r1, #8]
    5338:	d825      	bhi.n	5386 <_realloc_r+0x142>
    533a:	2a13      	cmp	r2, #19
    533c:	d91b      	bls.n	5376 <_realloc_r+0x132>
    533e:	6821      	ldr	r1, [r4, #0]
    5340:	60a9      	str	r1, [r5, #8]
    5342:	6863      	ldr	r3, [r4, #4]
    5344:	2a1b      	cmp	r2, #27
    5346:	60eb      	str	r3, [r5, #12]
    5348:	d803      	bhi.n	5352 <_realloc_r+0x10e>
    534a:	f105 0010 	add.w	r0, r5, #16
    534e:	3408      	adds	r4, #8
    5350:	e012      	b.n	5378 <_realloc_r+0x134>
    5352:	68a0      	ldr	r0, [r4, #8]
    5354:	6128      	str	r0, [r5, #16]
    5356:	68e1      	ldr	r1, [r4, #12]
    5358:	2a24      	cmp	r2, #36	; 0x24
    535a:	6169      	str	r1, [r5, #20]
    535c:	d003      	beq.n	5366 <_realloc_r+0x122>
    535e:	f105 0018 	add.w	r0, r5, #24
    5362:	3410      	adds	r4, #16
    5364:	e008      	b.n	5378 <_realloc_r+0x134>
    5366:	6922      	ldr	r2, [r4, #16]
    5368:	61aa      	str	r2, [r5, #24]
    536a:	6963      	ldr	r3, [r4, #20]
    536c:	f105 0020 	add.w	r0, r5, #32
    5370:	61eb      	str	r3, [r5, #28]
    5372:	3418      	adds	r4, #24
    5374:	e000      	b.n	5378 <_realloc_r+0x134>
    5376:	4630      	mov	r0, r6
    5378:	6821      	ldr	r1, [r4, #0]
    537a:	6001      	str	r1, [r0, #0]
    537c:	6862      	ldr	r2, [r4, #4]
    537e:	6042      	str	r2, [r0, #4]
    5380:	68a3      	ldr	r3, [r4, #8]
    5382:	6083      	str	r3, [r0, #8]
    5384:	e003      	b.n	538e <_realloc_r+0x14a>
    5386:	4630      	mov	r0, r6
    5388:	4621      	mov	r1, r4
    538a:	f7ff ff3e 	bl	520a <memmove>
    538e:	19e8      	adds	r0, r5, r7
    5390:	ebc7 0a0a 	rsb	sl, r7, sl
    5394:	f04a 0201 	orr.w	r2, sl, #1
    5398:	6042      	str	r2, [r0, #4]
    539a:	686b      	ldr	r3, [r5, #4]
    539c:	495f      	ldr	r1, [pc, #380]	; (551c <_realloc_r+0x2d8>)
    539e:	6088      	str	r0, [r1, #8]
    53a0:	f003 0001 	and.w	r0, r3, #1
    53a4:	4307      	orrs	r7, r0
    53a6:	606f      	str	r7, [r5, #4]
    53a8:	e088      	b.n	54bc <_realloc_r+0x278>
    53aa:	45ba      	cmp	sl, r7
    53ac:	db04      	blt.n	53b8 <_realloc_r+0x174>
    53ae:	68d9      	ldr	r1, [r3, #12]
    53b0:	6898      	ldr	r0, [r3, #8]
    53b2:	60c1      	str	r1, [r0, #12]
    53b4:	6088      	str	r0, [r1, #8]
    53b6:	e003      	b.n	53c0 <_realloc_r+0x17c>
    53b8:	eb02 0a08 	add.w	sl, r2, r8
    53bc:	45ba      	cmp	sl, r7
    53be:	db31      	blt.n	5424 <_realloc_r+0x1e0>
    53c0:	4628      	mov	r0, r5
    53c2:	68eb      	ldr	r3, [r5, #12]
    53c4:	f850 1f08 	ldr.w	r1, [r0, #8]!
    53c8:	f1a8 0204 	sub.w	r2, r8, #4
    53cc:	2a24      	cmp	r2, #36	; 0x24
    53ce:	60cb      	str	r3, [r1, #12]
    53d0:	6099      	str	r1, [r3, #8]
    53d2:	d823      	bhi.n	541c <_realloc_r+0x1d8>
    53d4:	2a13      	cmp	r2, #19
    53d6:	d91a      	bls.n	540e <_realloc_r+0x1ca>
    53d8:	6820      	ldr	r0, [r4, #0]
    53da:	60a8      	str	r0, [r5, #8]
    53dc:	6866      	ldr	r6, [r4, #4]
    53de:	2a1b      	cmp	r2, #27
    53e0:	60ee      	str	r6, [r5, #12]
    53e2:	d803      	bhi.n	53ec <_realloc_r+0x1a8>
    53e4:	f105 0010 	add.w	r0, r5, #16
    53e8:	3408      	adds	r4, #8
    53ea:	e010      	b.n	540e <_realloc_r+0x1ca>
    53ec:	68a3      	ldr	r3, [r4, #8]
    53ee:	612b      	str	r3, [r5, #16]
    53f0:	68e1      	ldr	r1, [r4, #12]
    53f2:	2a24      	cmp	r2, #36	; 0x24
    53f4:	6169      	str	r1, [r5, #20]
    53f6:	d003      	beq.n	5400 <_realloc_r+0x1bc>
    53f8:	f105 0018 	add.w	r0, r5, #24
    53fc:	3410      	adds	r4, #16
    53fe:	e006      	b.n	540e <_realloc_r+0x1ca>
    5400:	6922      	ldr	r2, [r4, #16]
    5402:	61aa      	str	r2, [r5, #24]
    5404:	6960      	ldr	r0, [r4, #20]
    5406:	3418      	adds	r4, #24
    5408:	61e8      	str	r0, [r5, #28]
    540a:	f105 0020 	add.w	r0, r5, #32
    540e:	6826      	ldr	r6, [r4, #0]
    5410:	6006      	str	r6, [r0, #0]
    5412:	6863      	ldr	r3, [r4, #4]
    5414:	6043      	str	r3, [r0, #4]
    5416:	68a1      	ldr	r1, [r4, #8]
    5418:	6081      	str	r1, [r0, #8]
    541a:	e055      	b.n	54c8 <_realloc_r+0x284>
    541c:	4621      	mov	r1, r4
    541e:	f7ff fef4 	bl	520a <memmove>
    5422:	e051      	b.n	54c8 <_realloc_r+0x284>
    5424:	4631      	mov	r1, r6
    5426:	4648      	mov	r0, r9
    5428:	f7ff fcd6 	bl	4dd8 <_malloc_r>
    542c:	4606      	mov	r6, r0
    542e:	2800      	cmp	r0, #0
    5430:	d044      	beq.n	54bc <_realloc_r+0x278>
    5432:	f854 1c04 	ldr.w	r1, [r4, #-4]
    5436:	f021 0301 	bic.w	r3, r1, #1
    543a:	f1a0 0208 	sub.w	r2, r0, #8
    543e:	eb0b 0103 	add.w	r1, fp, r3
    5442:	428a      	cmp	r2, r1
    5444:	d106      	bne.n	5454 <_realloc_r+0x210>
    5446:	f850 6c04 	ldr.w	r6, [r0, #-4]
    544a:	f026 0503 	bic.w	r5, r6, #3
    544e:	eb05 0a08 	add.w	sl, r5, r8
    5452:	e038      	b.n	54c6 <_realloc_r+0x282>
    5454:	f1a8 0204 	sub.w	r2, r8, #4
    5458:	2a24      	cmp	r2, #36	; 0x24
    545a:	d828      	bhi.n	54ae <_realloc_r+0x26a>
    545c:	2a13      	cmp	r2, #19
    545e:	d91e      	bls.n	549e <_realloc_r+0x25a>
    5460:	6823      	ldr	r3, [r4, #0]
    5462:	6003      	str	r3, [r0, #0]
    5464:	6861      	ldr	r1, [r4, #4]
    5466:	2a1b      	cmp	r2, #27
    5468:	6041      	str	r1, [r0, #4]
    546a:	d804      	bhi.n	5476 <_realloc_r+0x232>
    546c:	f100 0008 	add.w	r0, r0, #8
    5470:	f104 0208 	add.w	r2, r4, #8
    5474:	e014      	b.n	54a0 <_realloc_r+0x25c>
    5476:	68a0      	ldr	r0, [r4, #8]
    5478:	60b0      	str	r0, [r6, #8]
    547a:	68e3      	ldr	r3, [r4, #12]
    547c:	2a24      	cmp	r2, #36	; 0x24
    547e:	60f3      	str	r3, [r6, #12]
    5480:	d004      	beq.n	548c <_realloc_r+0x248>
    5482:	f106 0010 	add.w	r0, r6, #16
    5486:	f104 0210 	add.w	r2, r4, #16
    548a:	e009      	b.n	54a0 <_realloc_r+0x25c>
    548c:	6922      	ldr	r2, [r4, #16]
    548e:	6132      	str	r2, [r6, #16]
    5490:	6961      	ldr	r1, [r4, #20]
    5492:	f106 0018 	add.w	r0, r6, #24
    5496:	6171      	str	r1, [r6, #20]
    5498:	f104 0218 	add.w	r2, r4, #24
    549c:	e000      	b.n	54a0 <_realloc_r+0x25c>
    549e:	4622      	mov	r2, r4
    54a0:	6813      	ldr	r3, [r2, #0]
    54a2:	6003      	str	r3, [r0, #0]
    54a4:	6851      	ldr	r1, [r2, #4]
    54a6:	6041      	str	r1, [r0, #4]
    54a8:	6892      	ldr	r2, [r2, #8]
    54aa:	6082      	str	r2, [r0, #8]
    54ac:	e002      	b.n	54b4 <_realloc_r+0x270>
    54ae:	4621      	mov	r1, r4
    54b0:	f7ff feab 	bl	520a <memmove>
    54b4:	4648      	mov	r0, r9
    54b6:	4621      	mov	r1, r4
    54b8:	f7ff f97a 	bl	47b0 <_free_r>
    54bc:	4648      	mov	r0, r9
    54be:	f7ff febf 	bl	5240 <__malloc_unlock>
    54c2:	e028      	b.n	5516 <_realloc_r+0x2d2>
    54c4:	46c2      	mov	sl, r8
    54c6:	465d      	mov	r5, fp
    54c8:	ebc7 000a 	rsb	r0, r7, sl
    54cc:	280f      	cmp	r0, #15
    54ce:	686a      	ldr	r2, [r5, #4]
    54d0:	d911      	bls.n	54f6 <_realloc_r+0x2b2>
    54d2:	19e9      	adds	r1, r5, r7
    54d4:	f002 0601 	and.w	r6, r2, #1
    54d8:	4337      	orrs	r7, r6
    54da:	f040 0301 	orr.w	r3, r0, #1
    54de:	1808      	adds	r0, r1, r0
    54e0:	606f      	str	r7, [r5, #4]
    54e2:	604b      	str	r3, [r1, #4]
    54e4:	6842      	ldr	r2, [r0, #4]
    54e6:	f042 0601 	orr.w	r6, r2, #1
    54ea:	6046      	str	r6, [r0, #4]
    54ec:	3108      	adds	r1, #8
    54ee:	4648      	mov	r0, r9
    54f0:	f7ff f95e 	bl	47b0 <_free_r>
    54f4:	e00a      	b.n	550c <_realloc_r+0x2c8>
    54f6:	f002 0601 	and.w	r6, r2, #1
    54fa:	eb05 010a 	add.w	r1, r5, sl
    54fe:	ea4a 0306 	orr.w	r3, sl, r6
    5502:	606b      	str	r3, [r5, #4]
    5504:	6848      	ldr	r0, [r1, #4]
    5506:	f040 0201 	orr.w	r2, r0, #1
    550a:	604a      	str	r2, [r1, #4]
    550c:	4648      	mov	r0, r9
    550e:	f7ff fe97 	bl	5240 <__malloc_unlock>
    5512:	f105 0608 	add.w	r6, r5, #8
    5516:	4630      	mov	r0, r6
    5518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    551c:	200004fc 	.word	0x200004fc

00005520 <_sbrk_r>:
    5520:	b538      	push	{r3, r4, r5, lr}
    5522:	4c06      	ldr	r4, [pc, #24]	; (553c <_sbrk_r+0x1c>)
    5524:	2300      	movs	r3, #0
    5526:	4605      	mov	r5, r0
    5528:	4608      	mov	r0, r1
    552a:	6023      	str	r3, [r4, #0]
    552c:	f7fd f9ce 	bl	28cc <_sbrk>
    5530:	1c43      	adds	r3, r0, #1
    5532:	d102      	bne.n	553a <_sbrk_r+0x1a>
    5534:	6821      	ldr	r1, [r4, #0]
    5536:	b101      	cbz	r1, 553a <_sbrk_r+0x1a>
    5538:	6029      	str	r1, [r5, #0]
    553a:	bd38      	pop	{r3, r4, r5, pc}
    553c:	200009fc 	.word	0x200009fc

00005540 <__sread>:
    5540:	b510      	push	{r4, lr}
    5542:	460c      	mov	r4, r1
    5544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5548:	f000 f9a4 	bl	5894 <_read_r>
    554c:	2800      	cmp	r0, #0
    554e:	db03      	blt.n	5558 <__sread+0x18>
    5550:	6d22      	ldr	r2, [r4, #80]	; 0x50
    5552:	1813      	adds	r3, r2, r0
    5554:	6523      	str	r3, [r4, #80]	; 0x50
    5556:	bd10      	pop	{r4, pc}
    5558:	89a3      	ldrh	r3, [r4, #12]
    555a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
    555e:	81a1      	strh	r1, [r4, #12]
    5560:	bd10      	pop	{r4, pc}

00005562 <__seofread>:
    5562:	2000      	movs	r0, #0
    5564:	4770      	bx	lr

00005566 <__swrite>:
    5566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    556a:	461d      	mov	r5, r3
    556c:	898b      	ldrh	r3, [r1, #12]
    556e:	460c      	mov	r4, r1
    5570:	f403 7180 	and.w	r1, r3, #256	; 0x100
    5574:	4616      	mov	r6, r2
    5576:	b20a      	sxth	r2, r1
    5578:	4607      	mov	r7, r0
    557a:	b12a      	cbz	r2, 5588 <__swrite+0x22>
    557c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5580:	2200      	movs	r2, #0
    5582:	2302      	movs	r3, #2
    5584:	f000 f974 	bl	5870 <_lseek_r>
    5588:	89a0      	ldrh	r0, [r4, #12]
    558a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    558e:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
    5592:	81a3      	strh	r3, [r4, #12]
    5594:	4638      	mov	r0, r7
    5596:	4632      	mov	r2, r6
    5598:	462b      	mov	r3, r5
    559a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    559e:	f000 b8d9 	b.w	5754 <_write_r>

000055a2 <__sseek>:
    55a2:	b510      	push	{r4, lr}
    55a4:	460c      	mov	r4, r1
    55a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    55aa:	f000 f961 	bl	5870 <_lseek_r>
    55ae:	1c43      	adds	r3, r0, #1
    55b0:	89a3      	ldrh	r3, [r4, #12]
    55b2:	d103      	bne.n	55bc <__sseek+0x1a>
    55b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    55b8:	81a2      	strh	r2, [r4, #12]
    55ba:	bd10      	pop	{r4, pc}
    55bc:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
    55c0:	81a1      	strh	r1, [r4, #12]
    55c2:	6520      	str	r0, [r4, #80]	; 0x50
    55c4:	bd10      	pop	{r4, pc}

000055c6 <__sclose>:
    55c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    55ca:	f000 b8d5 	b.w	5778 <_close_r>

000055ce <strcmp>:
    55ce:	f810 2b01 	ldrb.w	r2, [r0], #1
    55d2:	f811 3b01 	ldrb.w	r3, [r1], #1
    55d6:	2a01      	cmp	r2, #1
    55d8:	bf28      	it	cs
    55da:	429a      	cmpcs	r2, r3
    55dc:	d0f7      	beq.n	55ce <strcmp>
    55de:	eba2 0003 	sub.w	r0, r2, r3
    55e2:	4770      	bx	lr

000055e4 <strlen>:
    55e4:	4603      	mov	r3, r0
    55e6:	f813 2b01 	ldrb.w	r2, [r3], #1
    55ea:	2a00      	cmp	r2, #0
    55ec:	d1fb      	bne.n	55e6 <strlen+0x2>
    55ee:	1a18      	subs	r0, r3, r0
    55f0:	3801      	subs	r0, #1
    55f2:	4770      	bx	lr

000055f4 <__swbuf_r>:
    55f4:	b570      	push	{r4, r5, r6, lr}
    55f6:	460d      	mov	r5, r1
    55f8:	4614      	mov	r4, r2
    55fa:	4606      	mov	r6, r0
    55fc:	b118      	cbz	r0, 5606 <__swbuf_r+0x12>
    55fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5600:	b90b      	cbnz	r3, 5606 <__swbuf_r+0x12>
    5602:	f7fe ff97 	bl	4534 <__sinit>
    5606:	89a1      	ldrh	r1, [r4, #12]
    5608:	69a0      	ldr	r0, [r4, #24]
    560a:	f001 0208 	and.w	r2, r1, #8
    560e:	b213      	sxth	r3, r2
    5610:	60a0      	str	r0, [r4, #8]
    5612:	b10b      	cbz	r3, 5618 <__swbuf_r+0x24>
    5614:	6920      	ldr	r0, [r4, #16]
    5616:	b958      	cbnz	r0, 5630 <__swbuf_r+0x3c>
    5618:	4630      	mov	r0, r6
    561a:	4621      	mov	r1, r4
    561c:	f7fe fe2a 	bl	4274 <__swsetup_r>
    5620:	b130      	cbz	r0, 5630 <__swbuf_r+0x3c>
    5622:	89a5      	ldrh	r5, [r4, #12]
    5624:	2009      	movs	r0, #9
    5626:	f045 0140 	orr.w	r1, r5, #64	; 0x40
    562a:	81a1      	strh	r1, [r4, #12]
    562c:	6030      	str	r0, [r6, #0]
    562e:	e017      	b.n	5660 <__swbuf_r+0x6c>
    5630:	89a1      	ldrh	r1, [r4, #12]
    5632:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
    5636:	b213      	sxth	r3, r2
    5638:	b2ed      	uxtb	r5, r5
    563a:	b933      	cbnz	r3, 564a <__swbuf_r+0x56>
    563c:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
    5640:	6e61      	ldr	r1, [r4, #100]	; 0x64
    5642:	81a0      	strh	r0, [r4, #12]
    5644:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
    5648:	6662      	str	r2, [r4, #100]	; 0x64
    564a:	6820      	ldr	r0, [r4, #0]
    564c:	6923      	ldr	r3, [r4, #16]
    564e:	6961      	ldr	r1, [r4, #20]
    5650:	1ac0      	subs	r0, r0, r3
    5652:	4288      	cmp	r0, r1
    5654:	db07      	blt.n	5666 <__swbuf_r+0x72>
    5656:	4630      	mov	r0, r6
    5658:	4621      	mov	r1, r4
    565a:	f7fe fe77 	bl	434c <_fflush_r>
    565e:	b110      	cbz	r0, 5666 <__swbuf_r+0x72>
    5660:	f04f 35ff 	mov.w	r5, #4294967295
    5664:	e015      	b.n	5692 <__swbuf_r+0x9e>
    5666:	68a2      	ldr	r2, [r4, #8]
    5668:	6821      	ldr	r1, [r4, #0]
    566a:	1e53      	subs	r3, r2, #1
    566c:	60a3      	str	r3, [r4, #8]
    566e:	f801 5b01 	strb.w	r5, [r1], #1
    5672:	6962      	ldr	r2, [r4, #20]
    5674:	6021      	str	r1, [r4, #0]
    5676:	3001      	adds	r0, #1
    5678:	4290      	cmp	r0, r2
    567a:	d004      	beq.n	5686 <__swbuf_r+0x92>
    567c:	89a3      	ldrh	r3, [r4, #12]
    567e:	07db      	lsls	r3, r3, #31
    5680:	d507      	bpl.n	5692 <__swbuf_r+0x9e>
    5682:	2d0a      	cmp	r5, #10
    5684:	d105      	bne.n	5692 <__swbuf_r+0x9e>
    5686:	4630      	mov	r0, r6
    5688:	4621      	mov	r1, r4
    568a:	f7fe fe5f 	bl	434c <_fflush_r>
    568e:	2800      	cmp	r0, #0
    5690:	d1e6      	bne.n	5660 <__swbuf_r+0x6c>
    5692:	4628      	mov	r0, r5
    5694:	bd70      	pop	{r4, r5, r6, pc}

00005696 <__swbuf>:
    5696:	460a      	mov	r2, r1
    5698:	4902      	ldr	r1, [pc, #8]	; (56a4 <__swbuf+0xe>)
    569a:	4603      	mov	r3, r0
    569c:	6808      	ldr	r0, [r1, #0]
    569e:	4619      	mov	r1, r3
    56a0:	f7ff bfa8 	b.w	55f4 <__swbuf_r>
    56a4:	20000050 	.word	0x20000050

000056a8 <_wcrtomb_r>:
    56a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56ac:	461d      	mov	r5, r3
    56ae:	4b10      	ldr	r3, [pc, #64]	; (56f0 <_wcrtomb_r+0x48>)
    56b0:	b086      	sub	sp, #24
    56b2:	4604      	mov	r4, r0
    56b4:	4690      	mov	r8, r2
    56b6:	460e      	mov	r6, r1
    56b8:	681f      	ldr	r7, [r3, #0]
    56ba:	b939      	cbnz	r1, 56cc <_wcrtomb_r+0x24>
    56bc:	f7ff faee 	bl	4c9c <__locale_charset>
    56c0:	9500      	str	r5, [sp, #0]
    56c2:	4603      	mov	r3, r0
    56c4:	a903      	add	r1, sp, #12
    56c6:	4620      	mov	r0, r4
    56c8:	4632      	mov	r2, r6
    56ca:	e006      	b.n	56da <_wcrtomb_r+0x32>
    56cc:	f7ff fae6 	bl	4c9c <__locale_charset>
    56d0:	9500      	str	r5, [sp, #0]
    56d2:	4603      	mov	r3, r0
    56d4:	4631      	mov	r1, r6
    56d6:	4620      	mov	r0, r4
    56d8:	4642      	mov	r2, r8
    56da:	47b8      	blx	r7
    56dc:	1c43      	adds	r3, r0, #1
    56de:	d103      	bne.n	56e8 <_wcrtomb_r+0x40>
    56e0:	2100      	movs	r1, #0
    56e2:	228a      	movs	r2, #138	; 0x8a
    56e4:	6029      	str	r1, [r5, #0]
    56e6:	6022      	str	r2, [r4, #0]
    56e8:	b006      	add	sp, #24
    56ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    56ee:	bf00      	nop
    56f0:	2000090c 	.word	0x2000090c

000056f4 <wcrtomb>:
    56f4:	b530      	push	{r4, r5, lr}
    56f6:	4613      	mov	r3, r2
    56f8:	4a04      	ldr	r2, [pc, #16]	; (570c <wcrtomb+0x18>)
    56fa:	4605      	mov	r5, r0
    56fc:	460c      	mov	r4, r1
    56fe:	6810      	ldr	r0, [r2, #0]
    5700:	4629      	mov	r1, r5
    5702:	4622      	mov	r2, r4
    5704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5708:	f7ff bfce 	b.w	56a8 <_wcrtomb_r>
    570c:	20000050 	.word	0x20000050

00005710 <__ascii_wctomb>:
    5710:	b149      	cbz	r1, 5726 <__ascii_wctomb+0x16>
    5712:	2aff      	cmp	r2, #255	; 0xff
    5714:	d904      	bls.n	5720 <__ascii_wctomb+0x10>
    5716:	238a      	movs	r3, #138	; 0x8a
    5718:	6003      	str	r3, [r0, #0]
    571a:	f04f 30ff 	mov.w	r0, #4294967295
    571e:	4770      	bx	lr
    5720:	700a      	strb	r2, [r1, #0]
    5722:	2001      	movs	r0, #1
    5724:	4770      	bx	lr
    5726:	4608      	mov	r0, r1
    5728:	4770      	bx	lr

0000572a <_wctomb_r>:
    572a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    572e:	4698      	mov	r8, r3
    5730:	4b07      	ldr	r3, [pc, #28]	; (5750 <_wctomb_r+0x26>)
    5732:	4605      	mov	r5, r0
    5734:	460f      	mov	r7, r1
    5736:	4616      	mov	r6, r2
    5738:	681c      	ldr	r4, [r3, #0]
    573a:	f7ff faaf 	bl	4c9c <__locale_charset>
    573e:	f8cd 8000 	str.w	r8, [sp]
    5742:	4603      	mov	r3, r0
    5744:	4639      	mov	r1, r7
    5746:	4628      	mov	r0, r5
    5748:	4632      	mov	r2, r6
    574a:	47a0      	blx	r4
    574c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    5750:	2000090c 	.word	0x2000090c

00005754 <_write_r>:
    5754:	b538      	push	{r3, r4, r5, lr}
    5756:	4c07      	ldr	r4, [pc, #28]	; (5774 <_write_r+0x20>)
    5758:	4605      	mov	r5, r0
    575a:	2000      	movs	r0, #0
    575c:	6020      	str	r0, [r4, #0]
    575e:	4608      	mov	r0, r1
    5760:	4611      	mov	r1, r2
    5762:	461a      	mov	r2, r3
    5764:	f7fc fabe 	bl	1ce4 <_write>
    5768:	1c43      	adds	r3, r0, #1
    576a:	d102      	bne.n	5772 <_write_r+0x1e>
    576c:	6823      	ldr	r3, [r4, #0]
    576e:	b103      	cbz	r3, 5772 <_write_r+0x1e>
    5770:	602b      	str	r3, [r5, #0]
    5772:	bd38      	pop	{r3, r4, r5, pc}
    5774:	200009fc 	.word	0x200009fc

00005778 <_close_r>:
    5778:	b538      	push	{r3, r4, r5, lr}
    577a:	4c06      	ldr	r4, [pc, #24]	; (5794 <_close_r+0x1c>)
    577c:	2300      	movs	r3, #0
    577e:	4605      	mov	r5, r0
    5780:	4608      	mov	r0, r1
    5782:	6023      	str	r3, [r4, #0]
    5784:	f7fd f8ba 	bl	28fc <_close>
    5788:	1c43      	adds	r3, r0, #1
    578a:	d102      	bne.n	5792 <_close_r+0x1a>
    578c:	6821      	ldr	r1, [r4, #0]
    578e:	b101      	cbz	r1, 5792 <_close_r+0x1a>
    5790:	6029      	str	r1, [r5, #0]
    5792:	bd38      	pop	{r3, r4, r5, pc}
    5794:	200009fc 	.word	0x200009fc

00005798 <_fclose_r>:
    5798:	b570      	push	{r4, r5, r6, lr}
    579a:	4605      	mov	r5, r0
    579c:	460c      	mov	r4, r1
    579e:	2900      	cmp	r1, #0
    57a0:	d039      	beq.n	5816 <_fclose_r+0x7e>
    57a2:	f7fe ff2b 	bl	45fc <__sfp_lock_acquire>
    57a6:	b125      	cbz	r5, 57b2 <_fclose_r+0x1a>
    57a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
    57aa:	b913      	cbnz	r3, 57b2 <_fclose_r+0x1a>
    57ac:	4628      	mov	r0, r5
    57ae:	f7fe fec1 	bl	4534 <__sinit>
    57b2:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
    57b6:	b35e      	cbz	r6, 5810 <_fclose_r+0x78>
    57b8:	4628      	mov	r0, r5
    57ba:	4621      	mov	r1, r4
    57bc:	f7fe fdc6 	bl	434c <_fflush_r>
    57c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    57c2:	4606      	mov	r6, r0
    57c4:	b13a      	cbz	r2, 57d6 <_fclose_r+0x3e>
    57c6:	4628      	mov	r0, r5
    57c8:	69e1      	ldr	r1, [r4, #28]
    57ca:	4790      	blx	r2
    57cc:	ea36 0620 	bics.w	r6, r6, r0, asr #32
    57d0:	bf28      	it	cs
    57d2:	f04f 36ff 	movcs.w	r6, #4294967295
    57d6:	89a0      	ldrh	r0, [r4, #12]
    57d8:	f000 0180 	and.w	r1, r0, #128	; 0x80
    57dc:	b20b      	sxth	r3, r1
    57de:	b11b      	cbz	r3, 57e8 <_fclose_r+0x50>
    57e0:	4628      	mov	r0, r5
    57e2:	6921      	ldr	r1, [r4, #16]
    57e4:	f7fe ffe4 	bl	47b0 <_free_r>
    57e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    57ea:	b141      	cbz	r1, 57fe <_fclose_r+0x66>
    57ec:	f104 0240 	add.w	r2, r4, #64	; 0x40
    57f0:	4291      	cmp	r1, r2
    57f2:	d002      	beq.n	57fa <_fclose_r+0x62>
    57f4:	4628      	mov	r0, r5
    57f6:	f7fe ffdb 	bl	47b0 <_free_r>
    57fa:	2000      	movs	r0, #0
    57fc:	6320      	str	r0, [r4, #48]	; 0x30
    57fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
    5800:	b121      	cbz	r1, 580c <_fclose_r+0x74>
    5802:	4628      	mov	r0, r5
    5804:	f7fe ffd4 	bl	47b0 <_free_r>
    5808:	2100      	movs	r1, #0
    580a:	6461      	str	r1, [r4, #68]	; 0x44
    580c:	2300      	movs	r3, #0
    580e:	81a3      	strh	r3, [r4, #12]
    5810:	f7fe fef5 	bl	45fe <__sfp_lock_release>
    5814:	e000      	b.n	5818 <_fclose_r+0x80>
    5816:	460e      	mov	r6, r1
    5818:	4630      	mov	r0, r6
    581a:	bd70      	pop	{r4, r5, r6, pc}

0000581c <fclose>:
    581c:	4b02      	ldr	r3, [pc, #8]	; (5828 <fclose+0xc>)
    581e:	4601      	mov	r1, r0
    5820:	6818      	ldr	r0, [r3, #0]
    5822:	f7ff bfb9 	b.w	5798 <_fclose_r>
    5826:	bf00      	nop
    5828:	20000050 	.word	0x20000050

0000582c <_fstat_r>:
    582c:	b538      	push	{r3, r4, r5, lr}
    582e:	4c07      	ldr	r4, [pc, #28]	; (584c <_fstat_r+0x20>)
    5830:	2300      	movs	r3, #0
    5832:	4605      	mov	r5, r0
    5834:	4608      	mov	r0, r1
    5836:	4611      	mov	r1, r2
    5838:	6023      	str	r3, [r4, #0]
    583a:	f7fd f863 	bl	2904 <_fstat>
    583e:	1c43      	adds	r3, r0, #1
    5840:	d102      	bne.n	5848 <_fstat_r+0x1c>
    5842:	6821      	ldr	r1, [r4, #0]
    5844:	b101      	cbz	r1, 5848 <_fstat_r+0x1c>
    5846:	6029      	str	r1, [r5, #0]
    5848:	bd38      	pop	{r3, r4, r5, pc}
    584a:	bf00      	nop
    584c:	200009fc 	.word	0x200009fc

00005850 <_isatty_r>:
    5850:	b538      	push	{r3, r4, r5, lr}
    5852:	4c06      	ldr	r4, [pc, #24]	; (586c <_isatty_r+0x1c>)
    5854:	2300      	movs	r3, #0
    5856:	4605      	mov	r5, r0
    5858:	4608      	mov	r0, r1
    585a:	6023      	str	r3, [r4, #0]
    585c:	f7fd f858 	bl	2910 <_isatty>
    5860:	1c43      	adds	r3, r0, #1
    5862:	d102      	bne.n	586a <_isatty_r+0x1a>
    5864:	6821      	ldr	r1, [r4, #0]
    5866:	b101      	cbz	r1, 586a <_isatty_r+0x1a>
    5868:	6029      	str	r1, [r5, #0]
    586a:	bd38      	pop	{r3, r4, r5, pc}
    586c:	200009fc 	.word	0x200009fc

00005870 <_lseek_r>:
    5870:	b538      	push	{r3, r4, r5, lr}
    5872:	4c07      	ldr	r4, [pc, #28]	; (5890 <_lseek_r+0x20>)
    5874:	4605      	mov	r5, r0
    5876:	2000      	movs	r0, #0
    5878:	6020      	str	r0, [r4, #0]
    587a:	4608      	mov	r0, r1
    587c:	4611      	mov	r1, r2
    587e:	461a      	mov	r2, r3
    5880:	f7fd f84a 	bl	2918 <_lseek>
    5884:	1c43      	adds	r3, r0, #1
    5886:	d102      	bne.n	588e <_lseek_r+0x1e>
    5888:	6823      	ldr	r3, [r4, #0]
    588a:	b103      	cbz	r3, 588e <_lseek_r+0x1e>
    588c:	602b      	str	r3, [r5, #0]
    588e:	bd38      	pop	{r3, r4, r5, pc}
    5890:	200009fc 	.word	0x200009fc

00005894 <_read_r>:
    5894:	b538      	push	{r3, r4, r5, lr}
    5896:	4c07      	ldr	r4, [pc, #28]	; (58b4 <_read_r+0x20>)
    5898:	4605      	mov	r5, r0
    589a:	2000      	movs	r0, #0
    589c:	6020      	str	r0, [r4, #0]
    589e:	4608      	mov	r0, r1
    58a0:	4611      	mov	r1, r2
    58a2:	461a      	mov	r2, r3
    58a4:	f7fc f9da 	bl	1c5c <_read>
    58a8:	1c43      	adds	r3, r0, #1
    58aa:	d102      	bne.n	58b2 <_read_r+0x1e>
    58ac:	6823      	ldr	r3, [r4, #0]
    58ae:	b103      	cbz	r3, 58b2 <_read_r+0x1e>
    58b0:	602b      	str	r3, [r5, #0]
    58b2:	bd38      	pop	{r3, r4, r5, pc}
    58b4:	200009fc 	.word	0x200009fc

000058b8 <__aeabi_uldivmod>:
    58b8:	b94b      	cbnz	r3, 58ce <__aeabi_uldivmod+0x16>
    58ba:	b942      	cbnz	r2, 58ce <__aeabi_uldivmod+0x16>
    58bc:	2900      	cmp	r1, #0
    58be:	bf08      	it	eq
    58c0:	2800      	cmpeq	r0, #0
    58c2:	d002      	beq.n	58ca <__aeabi_uldivmod+0x12>
    58c4:	f04f 31ff 	mov.w	r1, #4294967295
    58c8:	4608      	mov	r0, r1
    58ca:	f000 b837 	b.w	593c <__aeabi_idiv0>
    58ce:	b082      	sub	sp, #8
    58d0:	46ec      	mov	ip, sp
    58d2:	e92d 5000 	stmdb	sp!, {ip, lr}
    58d6:	f000 f81b 	bl	5910 <__gnu_uldivmod_helper>
    58da:	f8dd e004 	ldr.w	lr, [sp, #4]
    58de:	b002      	add	sp, #8
    58e0:	bc0c      	pop	{r2, r3}
    58e2:	4770      	bx	lr

000058e4 <__gnu_ldivmod_helper>:
    58e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58e6:	4616      	mov	r6, r2
    58e8:	4604      	mov	r4, r0
    58ea:	460d      	mov	r5, r1
    58ec:	461f      	mov	r7, r3
    58ee:	f000 f827 	bl	5940 <__divdi3>
    58f2:	fb06 f301 	mul.w	r3, r6, r1
    58f6:	fb00 3707 	mla	r7, r0, r7, r3
    58fa:	fba6 2300 	umull	r2, r3, r6, r0
    58fe:	18fb      	adds	r3, r7, r3
    5900:	1aa2      	subs	r2, r4, r2
    5902:	eb65 0303 	sbc.w	r3, r5, r3
    5906:	9c06      	ldr	r4, [sp, #24]
    5908:	e9c4 2300 	strd	r2, r3, [r4]
    590c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    590e:	bf00      	nop

00005910 <__gnu_uldivmod_helper>:
    5910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5912:	4616      	mov	r6, r2
    5914:	4604      	mov	r4, r0
    5916:	460d      	mov	r5, r1
    5918:	461f      	mov	r7, r3
    591a:	f000 f96f 	bl	5bfc <__udivdi3>
    591e:	fb00 f707 	mul.w	r7, r0, r7
    5922:	fba0 2306 	umull	r2, r3, r0, r6
    5926:	fb06 7701 	mla	r7, r6, r1, r7
    592a:	18fb      	adds	r3, r7, r3
    592c:	1aa2      	subs	r2, r4, r2
    592e:	eb65 0303 	sbc.w	r3, r5, r3
    5932:	9c06      	ldr	r4, [sp, #24]
    5934:	e9c4 2300 	strd	r2, r3, [r4]
    5938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    593a:	bf00      	nop

0000593c <__aeabi_idiv0>:
    593c:	4770      	bx	lr
    593e:	bf00      	nop

00005940 <__divdi3>:
    5940:	2900      	cmp	r1, #0
    5942:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5946:	461d      	mov	r5, r3
    5948:	f2c0 809d 	blt.w	5a86 <__divdi3+0x146>
    594c:	2400      	movs	r4, #0
    594e:	2d00      	cmp	r5, #0
    5950:	f2c0 8094 	blt.w	5a7c <__divdi3+0x13c>
    5954:	4680      	mov	r8, r0
    5956:	460f      	mov	r7, r1
    5958:	4694      	mov	ip, r2
    595a:	461e      	mov	r6, r3
    595c:	bbe3      	cbnz	r3, 59d8 <__divdi3+0x98>
    595e:	428a      	cmp	r2, r1
    5960:	d955      	bls.n	5a0e <__divdi3+0xce>
    5962:	fab2 f782 	clz	r7, r2
    5966:	b147      	cbz	r7, 597a <__divdi3+0x3a>
    5968:	f1c7 0520 	rsb	r5, r7, #32
    596c:	fa20 f605 	lsr.w	r6, r0, r5
    5970:	fa01 f107 	lsl.w	r1, r1, r7
    5974:	40ba      	lsls	r2, r7
    5976:	4331      	orrs	r1, r6
    5978:	40b8      	lsls	r0, r7
    597a:	0c17      	lsrs	r7, r2, #16
    597c:	fbb1 f6f7 	udiv	r6, r1, r7
    5980:	0c03      	lsrs	r3, r0, #16
    5982:	fa1f fc82 	uxth.w	ip, r2
    5986:	fb07 1116 	mls	r1, r7, r6, r1
    598a:	fb0c f506 	mul.w	r5, ip, r6
    598e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    5992:	429d      	cmp	r5, r3
    5994:	d908      	bls.n	59a8 <__divdi3+0x68>
    5996:	1e71      	subs	r1, r6, #1
    5998:	189b      	adds	r3, r3, r2
    599a:	f080 8113 	bcs.w	5bc4 <__divdi3+0x284>
    599e:	429d      	cmp	r5, r3
    59a0:	f240 8110 	bls.w	5bc4 <__divdi3+0x284>
    59a4:	3e02      	subs	r6, #2
    59a6:	189b      	adds	r3, r3, r2
    59a8:	1b59      	subs	r1, r3, r5
    59aa:	fbb1 f5f7 	udiv	r5, r1, r7
    59ae:	fb07 1315 	mls	r3, r7, r5, r1
    59b2:	b280      	uxth	r0, r0
    59b4:	fb0c fc05 	mul.w	ip, ip, r5
    59b8:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
    59bc:	458c      	cmp	ip, r1
    59be:	d907      	bls.n	59d0 <__divdi3+0x90>
    59c0:	1e6b      	subs	r3, r5, #1
    59c2:	188a      	adds	r2, r1, r2
    59c4:	f080 8100 	bcs.w	5bc8 <__divdi3+0x288>
    59c8:	4594      	cmp	ip, r2
    59ca:	f240 80fd 	bls.w	5bc8 <__divdi3+0x288>
    59ce:	3d02      	subs	r5, #2
    59d0:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
    59d4:	2500      	movs	r5, #0
    59d6:	e003      	b.n	59e0 <__divdi3+0xa0>
    59d8:	428b      	cmp	r3, r1
    59da:	d90c      	bls.n	59f6 <__divdi3+0xb6>
    59dc:	2500      	movs	r5, #0
    59de:	4629      	mov	r1, r5
    59e0:	460a      	mov	r2, r1
    59e2:	462b      	mov	r3, r5
    59e4:	b114      	cbz	r4, 59ec <__divdi3+0xac>
    59e6:	4252      	negs	r2, r2
    59e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    59ec:	4610      	mov	r0, r2
    59ee:	4619      	mov	r1, r3
    59f0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    59f4:	4770      	bx	lr
    59f6:	fab3 f583 	clz	r5, r3
    59fa:	2d00      	cmp	r5, #0
    59fc:	f040 8087 	bne.w	5b0e <__divdi3+0x1ce>
    5a00:	428b      	cmp	r3, r1
    5a02:	d301      	bcc.n	5a08 <__divdi3+0xc8>
    5a04:	4282      	cmp	r2, r0
    5a06:	d8ea      	bhi.n	59de <__divdi3+0x9e>
    5a08:	2500      	movs	r5, #0
    5a0a:	2101      	movs	r1, #1
    5a0c:	e7e8      	b.n	59e0 <__divdi3+0xa0>
    5a0e:	b912      	cbnz	r2, 5a16 <__divdi3+0xd6>
    5a10:	2601      	movs	r6, #1
    5a12:	fbb6 f2f2 	udiv	r2, r6, r2
    5a16:	fab2 f682 	clz	r6, r2
    5a1a:	2e00      	cmp	r6, #0
    5a1c:	d139      	bne.n	5a92 <__divdi3+0x152>
    5a1e:	1a8e      	subs	r6, r1, r2
    5a20:	0c13      	lsrs	r3, r2, #16
    5a22:	fa1f fc82 	uxth.w	ip, r2
    5a26:	2501      	movs	r5, #1
    5a28:	fbb6 f7f3 	udiv	r7, r6, r3
    5a2c:	fb03 6117 	mls	r1, r3, r7, r6
    5a30:	ea4f 4910 	mov.w	r9, r0, lsr #16
    5a34:	fb0c f807 	mul.w	r8, ip, r7
    5a38:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
    5a3c:	45b0      	cmp	r8, r6
    5a3e:	d906      	bls.n	5a4e <__divdi3+0x10e>
    5a40:	1e79      	subs	r1, r7, #1
    5a42:	18b6      	adds	r6, r6, r2
    5a44:	d202      	bcs.n	5a4c <__divdi3+0x10c>
    5a46:	45b0      	cmp	r8, r6
    5a48:	f200 80d3 	bhi.w	5bf2 <__divdi3+0x2b2>
    5a4c:	460f      	mov	r7, r1
    5a4e:	ebc8 0606 	rsb	r6, r8, r6
    5a52:	fbb6 f1f3 	udiv	r1, r6, r3
    5a56:	fb03 6311 	mls	r3, r3, r1, r6
    5a5a:	b280      	uxth	r0, r0
    5a5c:	fb0c fc01 	mul.w	ip, ip, r1
    5a60:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    5a64:	459c      	cmp	ip, r3
    5a66:	d906      	bls.n	5a76 <__divdi3+0x136>
    5a68:	1e4e      	subs	r6, r1, #1
    5a6a:	189a      	adds	r2, r3, r2
    5a6c:	d202      	bcs.n	5a74 <__divdi3+0x134>
    5a6e:	4594      	cmp	ip, r2
    5a70:	f200 80c2 	bhi.w	5bf8 <__divdi3+0x2b8>
    5a74:	4631      	mov	r1, r6
    5a76:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    5a7a:	e7b1      	b.n	59e0 <__divdi3+0xa0>
    5a7c:	43e4      	mvns	r4, r4
    5a7e:	4252      	negs	r2, r2
    5a80:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5a84:	e766      	b.n	5954 <__divdi3+0x14>
    5a86:	4240      	negs	r0, r0
    5a88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5a8c:	f04f 34ff 	mov.w	r4, #4294967295
    5a90:	e75d      	b.n	594e <__divdi3+0xe>
    5a92:	40b2      	lsls	r2, r6
    5a94:	f1c6 0920 	rsb	r9, r6, #32
    5a98:	fa21 f709 	lsr.w	r7, r1, r9
    5a9c:	fa20 f509 	lsr.w	r5, r0, r9
    5aa0:	0c13      	lsrs	r3, r2, #16
    5aa2:	fa01 f106 	lsl.w	r1, r1, r6
    5aa6:	fbb7 f8f3 	udiv	r8, r7, r3
    5aaa:	ea45 0901 	orr.w	r9, r5, r1
    5aae:	fa1f fc82 	uxth.w	ip, r2
    5ab2:	fb03 7718 	mls	r7, r3, r8, r7
    5ab6:	ea4f 4119 	mov.w	r1, r9, lsr #16
    5aba:	fb0c f508 	mul.w	r5, ip, r8
    5abe:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
    5ac2:	40b0      	lsls	r0, r6
    5ac4:	42bd      	cmp	r5, r7
    5ac6:	d90a      	bls.n	5ade <__divdi3+0x19e>
    5ac8:	18bf      	adds	r7, r7, r2
    5aca:	f108 36ff 	add.w	r6, r8, #4294967295
    5ace:	f080 808e 	bcs.w	5bee <__divdi3+0x2ae>
    5ad2:	42bd      	cmp	r5, r7
    5ad4:	f240 808b 	bls.w	5bee <__divdi3+0x2ae>
    5ad8:	f1a8 0802 	sub.w	r8, r8, #2
    5adc:	18bf      	adds	r7, r7, r2
    5ade:	1b79      	subs	r1, r7, r5
    5ae0:	fbb1 f5f3 	udiv	r5, r1, r3
    5ae4:	fb03 1715 	mls	r7, r3, r5, r1
    5ae8:	fa1f f989 	uxth.w	r9, r9
    5aec:	fb0c f605 	mul.w	r6, ip, r5
    5af0:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
    5af4:	428e      	cmp	r6, r1
    5af6:	d906      	bls.n	5b06 <__divdi3+0x1c6>
    5af8:	1e6f      	subs	r7, r5, #1
    5afa:	1889      	adds	r1, r1, r2
    5afc:	d271      	bcs.n	5be2 <__divdi3+0x2a2>
    5afe:	428e      	cmp	r6, r1
    5b00:	d96f      	bls.n	5be2 <__divdi3+0x2a2>
    5b02:	3d02      	subs	r5, #2
    5b04:	1889      	adds	r1, r1, r2
    5b06:	1b8e      	subs	r6, r1, r6
    5b08:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
    5b0c:	e78c      	b.n	5a28 <__divdi3+0xe8>
    5b0e:	f1c5 0120 	rsb	r1, r5, #32
    5b12:	fa22 f301 	lsr.w	r3, r2, r1
    5b16:	fa06 f605 	lsl.w	r6, r6, r5
    5b1a:	431e      	orrs	r6, r3
    5b1c:	fa27 f201 	lsr.w	r2, r7, r1
    5b20:	ea4f 4916 	mov.w	r9, r6, lsr #16
    5b24:	fa07 f705 	lsl.w	r7, r7, r5
    5b28:	fa20 f101 	lsr.w	r1, r0, r1
    5b2c:	fbb2 f8f9 	udiv	r8, r2, r9
    5b30:	430f      	orrs	r7, r1
    5b32:	0c3b      	lsrs	r3, r7, #16
    5b34:	fa1f fa86 	uxth.w	sl, r6
    5b38:	fb09 2218 	mls	r2, r9, r8, r2
    5b3c:	fb0a fb08 	mul.w	fp, sl, r8
    5b40:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    5b44:	4593      	cmp	fp, r2
    5b46:	fa0c fc05 	lsl.w	ip, ip, r5
    5b4a:	d908      	bls.n	5b5e <__divdi3+0x21e>
    5b4c:	1992      	adds	r2, r2, r6
    5b4e:	f108 31ff 	add.w	r1, r8, #4294967295
    5b52:	d24a      	bcs.n	5bea <__divdi3+0x2aa>
    5b54:	4593      	cmp	fp, r2
    5b56:	d948      	bls.n	5bea <__divdi3+0x2aa>
    5b58:	f1a8 0802 	sub.w	r8, r8, #2
    5b5c:	1992      	adds	r2, r2, r6
    5b5e:	ebcb 0302 	rsb	r3, fp, r2
    5b62:	fbb3 f1f9 	udiv	r1, r3, r9
    5b66:	fb09 3211 	mls	r2, r9, r1, r3
    5b6a:	b2bf      	uxth	r7, r7
    5b6c:	fb0a fa01 	mul.w	sl, sl, r1
    5b70:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
    5b74:	459a      	cmp	sl, r3
    5b76:	d906      	bls.n	5b86 <__divdi3+0x246>
    5b78:	1e4a      	subs	r2, r1, #1
    5b7a:	199b      	adds	r3, r3, r6
    5b7c:	d233      	bcs.n	5be6 <__divdi3+0x2a6>
    5b7e:	459a      	cmp	sl, r3
    5b80:	d931      	bls.n	5be6 <__divdi3+0x2a6>
    5b82:	3902      	subs	r1, #2
    5b84:	199b      	adds	r3, r3, r6
    5b86:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
    5b8a:	0c0f      	lsrs	r7, r1, #16
    5b8c:	fa1f f88c 	uxth.w	r8, ip
    5b90:	fb08 f607 	mul.w	r6, r8, r7
    5b94:	b28a      	uxth	r2, r1
    5b96:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    5b9a:	fb08 f802 	mul.w	r8, r8, r2
    5b9e:	fb0c 6202 	mla	r2, ip, r2, r6
    5ba2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
    5ba6:	fb0c fc07 	mul.w	ip, ip, r7
    5baa:	4296      	cmp	r6, r2
    5bac:	bf88      	it	hi
    5bae:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
    5bb2:	ebca 0303 	rsb	r3, sl, r3
    5bb6:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
    5bba:	4563      	cmp	r3, ip
    5bbc:	d30e      	bcc.n	5bdc <__divdi3+0x29c>
    5bbe:	d005      	beq.n	5bcc <__divdi3+0x28c>
    5bc0:	2500      	movs	r5, #0
    5bc2:	e70d      	b.n	59e0 <__divdi3+0xa0>
    5bc4:	460e      	mov	r6, r1
    5bc6:	e6ef      	b.n	59a8 <__divdi3+0x68>
    5bc8:	461d      	mov	r5, r3
    5bca:	e701      	b.n	59d0 <__divdi3+0x90>
    5bcc:	fa1f f888 	uxth.w	r8, r8
    5bd0:	fa00 f005 	lsl.w	r0, r0, r5
    5bd4:	eb08 4502 	add.w	r5, r8, r2, lsl #16
    5bd8:	42a8      	cmp	r0, r5
    5bda:	d2f1      	bcs.n	5bc0 <__divdi3+0x280>
    5bdc:	3901      	subs	r1, #1
    5bde:	2500      	movs	r5, #0
    5be0:	e6fe      	b.n	59e0 <__divdi3+0xa0>
    5be2:	463d      	mov	r5, r7
    5be4:	e78f      	b.n	5b06 <__divdi3+0x1c6>
    5be6:	4611      	mov	r1, r2
    5be8:	e7cd      	b.n	5b86 <__divdi3+0x246>
    5bea:	4688      	mov	r8, r1
    5bec:	e7b7      	b.n	5b5e <__divdi3+0x21e>
    5bee:	46b0      	mov	r8, r6
    5bf0:	e775      	b.n	5ade <__divdi3+0x19e>
    5bf2:	3f02      	subs	r7, #2
    5bf4:	18b6      	adds	r6, r6, r2
    5bf6:	e72a      	b.n	5a4e <__divdi3+0x10e>
    5bf8:	3902      	subs	r1, #2
    5bfa:	e73c      	b.n	5a76 <__divdi3+0x136>

00005bfc <__udivdi3>:
    5bfc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    5c00:	4614      	mov	r4, r2
    5c02:	4605      	mov	r5, r0
    5c04:	460e      	mov	r6, r1
    5c06:	2b00      	cmp	r3, #0
    5c08:	d13d      	bne.n	5c86 <__udivdi3+0x8a>
    5c0a:	428a      	cmp	r2, r1
    5c0c:	d949      	bls.n	5ca2 <__udivdi3+0xa6>
    5c0e:	fab2 f782 	clz	r7, r2
    5c12:	b147      	cbz	r7, 5c26 <__udivdi3+0x2a>
    5c14:	f1c7 0120 	rsb	r1, r7, #32
    5c18:	fa20 f201 	lsr.w	r2, r0, r1
    5c1c:	fa06 f607 	lsl.w	r6, r6, r7
    5c20:	40bc      	lsls	r4, r7
    5c22:	4316      	orrs	r6, r2
    5c24:	40bd      	lsls	r5, r7
    5c26:	0c22      	lsrs	r2, r4, #16
    5c28:	fbb6 f0f2 	udiv	r0, r6, r2
    5c2c:	0c2f      	lsrs	r7, r5, #16
    5c2e:	b2a1      	uxth	r1, r4
    5c30:	fb02 6610 	mls	r6, r2, r0, r6
    5c34:	fb01 f300 	mul.w	r3, r1, r0
    5c38:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    5c3c:	42b3      	cmp	r3, r6
    5c3e:	d908      	bls.n	5c52 <__udivdi3+0x56>
    5c40:	1e47      	subs	r7, r0, #1
    5c42:	1936      	adds	r6, r6, r4
    5c44:	f080 80f8 	bcs.w	5e38 <__udivdi3+0x23c>
    5c48:	42b3      	cmp	r3, r6
    5c4a:	f240 80f5 	bls.w	5e38 <__udivdi3+0x23c>
    5c4e:	3802      	subs	r0, #2
    5c50:	1936      	adds	r6, r6, r4
    5c52:	1af6      	subs	r6, r6, r3
    5c54:	fbb6 f3f2 	udiv	r3, r6, r2
    5c58:	fb02 6213 	mls	r2, r2, r3, r6
    5c5c:	b2ad      	uxth	r5, r5
    5c5e:	fb01 f103 	mul.w	r1, r1, r3
    5c62:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
    5c66:	4291      	cmp	r1, r2
    5c68:	d907      	bls.n	5c7a <__udivdi3+0x7e>
    5c6a:	1e5e      	subs	r6, r3, #1
    5c6c:	1912      	adds	r2, r2, r4
    5c6e:	f080 80e5 	bcs.w	5e3c <__udivdi3+0x240>
    5c72:	4291      	cmp	r1, r2
    5c74:	f240 80e2 	bls.w	5e3c <__udivdi3+0x240>
    5c78:	3b02      	subs	r3, #2
    5c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    5c7e:	2100      	movs	r1, #0
    5c80:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    5c84:	4770      	bx	lr
    5c86:	428b      	cmp	r3, r1
    5c88:	d843      	bhi.n	5d12 <__udivdi3+0x116>
    5c8a:	fab3 f483 	clz	r4, r3
    5c8e:	2c00      	cmp	r4, #0
    5c90:	d142      	bne.n	5d18 <__udivdi3+0x11c>
    5c92:	428b      	cmp	r3, r1
    5c94:	d302      	bcc.n	5c9c <__udivdi3+0xa0>
    5c96:	4282      	cmp	r2, r0
    5c98:	f200 80df 	bhi.w	5e5a <__udivdi3+0x25e>
    5c9c:	2100      	movs	r1, #0
    5c9e:	2001      	movs	r0, #1
    5ca0:	e7ee      	b.n	5c80 <__udivdi3+0x84>
    5ca2:	b912      	cbnz	r2, 5caa <__udivdi3+0xae>
    5ca4:	2701      	movs	r7, #1
    5ca6:	fbb7 f4f2 	udiv	r4, r7, r2
    5caa:	fab4 f284 	clz	r2, r4
    5cae:	2a00      	cmp	r2, #0
    5cb0:	f040 8088 	bne.w	5dc4 <__udivdi3+0x1c8>
    5cb4:	1b0a      	subs	r2, r1, r4
    5cb6:	0c23      	lsrs	r3, r4, #16
    5cb8:	b2a7      	uxth	r7, r4
    5cba:	2101      	movs	r1, #1
    5cbc:	fbb2 f6f3 	udiv	r6, r2, r3
    5cc0:	fb03 2216 	mls	r2, r3, r6, r2
    5cc4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
    5cc8:	fb07 f006 	mul.w	r0, r7, r6
    5ccc:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
    5cd0:	4290      	cmp	r0, r2
    5cd2:	d907      	bls.n	5ce4 <__udivdi3+0xe8>
    5cd4:	1912      	adds	r2, r2, r4
    5cd6:	f106 3cff 	add.w	ip, r6, #4294967295
    5cda:	d202      	bcs.n	5ce2 <__udivdi3+0xe6>
    5cdc:	4290      	cmp	r0, r2
    5cde:	f200 80ce 	bhi.w	5e7e <__udivdi3+0x282>
    5ce2:	4666      	mov	r6, ip
    5ce4:	1a12      	subs	r2, r2, r0
    5ce6:	fbb2 f0f3 	udiv	r0, r2, r3
    5cea:	fb03 2310 	mls	r3, r3, r0, r2
    5cee:	b2ad      	uxth	r5, r5
    5cf0:	fb07 f700 	mul.w	r7, r7, r0
    5cf4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    5cf8:	429f      	cmp	r7, r3
    5cfa:	d907      	bls.n	5d0c <__udivdi3+0x110>
    5cfc:	1e42      	subs	r2, r0, #1
    5cfe:	191b      	adds	r3, r3, r4
    5d00:	f080 809e 	bcs.w	5e40 <__udivdi3+0x244>
    5d04:	429f      	cmp	r7, r3
    5d06:	f240 809b 	bls.w	5e40 <__udivdi3+0x244>
    5d0a:	3802      	subs	r0, #2
    5d0c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    5d10:	e7b6      	b.n	5c80 <__udivdi3+0x84>
    5d12:	2100      	movs	r1, #0
    5d14:	4608      	mov	r0, r1
    5d16:	e7b3      	b.n	5c80 <__udivdi3+0x84>
    5d18:	f1c4 0620 	rsb	r6, r4, #32
    5d1c:	fa22 f506 	lsr.w	r5, r2, r6
    5d20:	fa03 f304 	lsl.w	r3, r3, r4
    5d24:	432b      	orrs	r3, r5
    5d26:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    5d2a:	fa21 f506 	lsr.w	r5, r1, r6
    5d2e:	fa01 f104 	lsl.w	r1, r1, r4
    5d32:	fa20 f606 	lsr.w	r6, r0, r6
    5d36:	fbb5 f7fc 	udiv	r7, r5, ip
    5d3a:	ea46 0a01 	orr.w	sl, r6, r1
    5d3e:	fa1f f883 	uxth.w	r8, r3
    5d42:	fb0c 5517 	mls	r5, ip, r7, r5
    5d46:	ea4f 411a 	mov.w	r1, sl, lsr #16
    5d4a:	fb08 f907 	mul.w	r9, r8, r7
    5d4e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
    5d52:	45a9      	cmp	r9, r5
    5d54:	fa02 f204 	lsl.w	r2, r2, r4
    5d58:	d903      	bls.n	5d62 <__udivdi3+0x166>
    5d5a:	1e7e      	subs	r6, r7, #1
    5d5c:	18ed      	adds	r5, r5, r3
    5d5e:	d37f      	bcc.n	5e60 <__udivdi3+0x264>
    5d60:	4637      	mov	r7, r6
    5d62:	ebc9 0105 	rsb	r1, r9, r5
    5d66:	fbb1 f6fc 	udiv	r6, r1, ip
    5d6a:	fb0c 1516 	mls	r5, ip, r6, r1
    5d6e:	fa1f fa8a 	uxth.w	sl, sl
    5d72:	fb08 f806 	mul.w	r8, r8, r6
    5d76:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
    5d7a:	4588      	cmp	r8, r1
    5d7c:	d903      	bls.n	5d86 <__udivdi3+0x18a>
    5d7e:	1e75      	subs	r5, r6, #1
    5d80:	18c9      	adds	r1, r1, r3
    5d82:	d373      	bcc.n	5e6c <__udivdi3+0x270>
    5d84:	462e      	mov	r6, r5
    5d86:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
    5d8a:	0c37      	lsrs	r7, r6, #16
    5d8c:	fa1f fc82 	uxth.w	ip, r2
    5d90:	fb0c f507 	mul.w	r5, ip, r7
    5d94:	0c12      	lsrs	r2, r2, #16
    5d96:	b2b3      	uxth	r3, r6
    5d98:	fb0c fc03 	mul.w	ip, ip, r3
    5d9c:	fb02 5303 	mla	r3, r2, r3, r5
    5da0:	eb03 431c 	add.w	r3, r3, ip, lsr #16
    5da4:	fb02 f207 	mul.w	r2, r2, r7
    5da8:	429d      	cmp	r5, r3
    5daa:	bf88      	it	hi
    5dac:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
    5db0:	ebc8 0101 	rsb	r1, r8, r1
    5db4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    5db8:	4291      	cmp	r1, r2
    5dba:	d34b      	bcc.n	5e54 <__udivdi3+0x258>
    5dbc:	d042      	beq.n	5e44 <__udivdi3+0x248>
    5dbe:	4630      	mov	r0, r6
    5dc0:	2100      	movs	r1, #0
    5dc2:	e75d      	b.n	5c80 <__udivdi3+0x84>
    5dc4:	4094      	lsls	r4, r2
    5dc6:	f1c2 0520 	rsb	r5, r2, #32
    5dca:	fa21 f605 	lsr.w	r6, r1, r5
    5dce:	0c23      	lsrs	r3, r4, #16
    5dd0:	fa20 f705 	lsr.w	r7, r0, r5
    5dd4:	fa01 f102 	lsl.w	r1, r1, r2
    5dd8:	fbb6 fcf3 	udiv	ip, r6, r3
    5ddc:	4339      	orrs	r1, r7
    5dde:	0c0d      	lsrs	r5, r1, #16
    5de0:	b2a7      	uxth	r7, r4
    5de2:	fb03 661c 	mls	r6, r3, ip, r6
    5de6:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    5dea:	fb07 f80c 	mul.w	r8, r7, ip
    5dee:	45b0      	cmp	r8, r6
    5df0:	fa00 f502 	lsl.w	r5, r0, r2
    5df4:	d908      	bls.n	5e08 <__udivdi3+0x20c>
    5df6:	1936      	adds	r6, r6, r4
    5df8:	f10c 30ff 	add.w	r0, ip, #4294967295
    5dfc:	d23d      	bcs.n	5e7a <__udivdi3+0x27e>
    5dfe:	45b0      	cmp	r8, r6
    5e00:	d93b      	bls.n	5e7a <__udivdi3+0x27e>
    5e02:	f1ac 0c02 	sub.w	ip, ip, #2
    5e06:	1936      	adds	r6, r6, r4
    5e08:	ebc8 0206 	rsb	r2, r8, r6
    5e0c:	fbb2 f0f3 	udiv	r0, r2, r3
    5e10:	fb03 2610 	mls	r6, r3, r0, r2
    5e14:	b28a      	uxth	r2, r1
    5e16:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
    5e1a:	fb07 f100 	mul.w	r1, r7, r0
    5e1e:	4291      	cmp	r1, r2
    5e20:	d906      	bls.n	5e30 <__udivdi3+0x234>
    5e22:	1e46      	subs	r6, r0, #1
    5e24:	1912      	adds	r2, r2, r4
    5e26:	d226      	bcs.n	5e76 <__udivdi3+0x27a>
    5e28:	4291      	cmp	r1, r2
    5e2a:	d924      	bls.n	5e76 <__udivdi3+0x27a>
    5e2c:	3802      	subs	r0, #2
    5e2e:	1912      	adds	r2, r2, r4
    5e30:	1a52      	subs	r2, r2, r1
    5e32:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
    5e36:	e741      	b.n	5cbc <__udivdi3+0xc0>
    5e38:	4638      	mov	r0, r7
    5e3a:	e70a      	b.n	5c52 <__udivdi3+0x56>
    5e3c:	4633      	mov	r3, r6
    5e3e:	e71c      	b.n	5c7a <__udivdi3+0x7e>
    5e40:	4610      	mov	r0, r2
    5e42:	e763      	b.n	5d0c <__udivdi3+0x110>
    5e44:	fa1f fc8c 	uxth.w	ip, ip
    5e48:	fa00 f004 	lsl.w	r0, r0, r4
    5e4c:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
    5e50:	4298      	cmp	r0, r3
    5e52:	d2b4      	bcs.n	5dbe <__udivdi3+0x1c2>
    5e54:	1e70      	subs	r0, r6, #1
    5e56:	2100      	movs	r1, #0
    5e58:	e712      	b.n	5c80 <__udivdi3+0x84>
    5e5a:	4621      	mov	r1, r4
    5e5c:	4620      	mov	r0, r4
    5e5e:	e70f      	b.n	5c80 <__udivdi3+0x84>
    5e60:	45a9      	cmp	r9, r5
    5e62:	f67f af7d 	bls.w	5d60 <__udivdi3+0x164>
    5e66:	3f02      	subs	r7, #2
    5e68:	18ed      	adds	r5, r5, r3
    5e6a:	e77a      	b.n	5d62 <__udivdi3+0x166>
    5e6c:	4588      	cmp	r8, r1
    5e6e:	d989      	bls.n	5d84 <__udivdi3+0x188>
    5e70:	3e02      	subs	r6, #2
    5e72:	18c9      	adds	r1, r1, r3
    5e74:	e787      	b.n	5d86 <__udivdi3+0x18a>
    5e76:	4630      	mov	r0, r6
    5e78:	e7da      	b.n	5e30 <__udivdi3+0x234>
    5e7a:	4684      	mov	ip, r0
    5e7c:	e7c4      	b.n	5e08 <__udivdi3+0x20c>
    5e7e:	3e02      	subs	r6, #2
    5e80:	1912      	adds	r2, r2, r4
    5e82:	e72f      	b.n	5ce4 <__udivdi3+0xe8>
    5e84:	64253d78 	.word	0x64253d78
    5e88:	3d79202c 	.word	0x3d79202c
    5e8c:	0a206425 	.word	0x0a206425
    5e90:	00000000 	.word	0x00000000
    5e94:	20746553 	.word	0x20746553
    5e98:	206e6970 	.word	0x206e6970
    5e9c:	6c6c6163 	.word	0x6c6c6163
    5ea0:	6b636162 	.word	0x6b636162
    5ea4:	69616620 	.word	0x69616620
    5ea8:	6572756c 	.word	0x6572756c
    5eac:	000a0d21 	.word	0x000a0d21
    5eb0:	0a0d0a0d 	.word	0x0a0d0a0d
    5eb4:	47202d2d 	.word	0x47202d2d
    5eb8:	204f4950 	.word	0x204f4950
    5ebc:	65746e69 	.word	0x65746e69
    5ec0:	70757272 	.word	0x70757272
    5ec4:	6e612074 	.word	0x6e612074
    5ec8:	76652064 	.word	0x76652064
    5ecc:	20746e65 	.word	0x20746e65
    5ed0:	6d617865 	.word	0x6d617865
    5ed4:	20656c70 	.word	0x20656c70
    5ed8:	0a0d2d2d 	.word	0x0a0d2d2d
    5edc:	00000000 	.word	0x00000000
    5ee0:	25202d2d 	.word	0x25202d2d
    5ee4:	000a0d73 	.word	0x000a0d73
    5ee8:	344d4153 	.word	0x344d4153
    5eec:	7058204c 	.word	0x7058204c
    5ef0:	6e69616c 	.word	0x6e69616c
    5ef4:	50206465 	.word	0x50206465
    5ef8:	00006f72 	.word	0x00006f72
    5efc:	43202d2d 	.word	0x43202d2d
    5f00:	69706d6f 	.word	0x69706d6f
    5f04:	3a64656c 	.word	0x3a64656c
    5f08:	20732520 	.word	0x20732520
    5f0c:	2d207325 	.word	0x2d207325
    5f10:	000a0d2d 	.word	0x000a0d2d
    5f14:	20626546 	.word	0x20626546
    5f18:	32203120 	.word	0x32203120
    5f1c:	00343130 	.word	0x00343130
    5f20:	313a3032 	.word	0x313a3032
    5f24:	33333a34 	.word	0x33333a34
    5f28:	00000000 	.word	0x00000000
    5f2c:	73657250 	.word	0x73657250
    5f30:	73252073 	.word	0x73252073
    5f34:	206f7420 	.word	0x206f7420
    5f38:	67697274 	.word	0x67697274
    5f3c:	20726567 	.word	0x20726567
    5f40:	2e44454c 	.word	0x2e44454c
    5f44:	00000a0d 	.word	0x00000a0d
    5f48:	00305753 	.word	0x00305753

00005f4c <_global_impure_ptr>:
    5f4c:	20000058 20200043                                X.. C.

00005f52 <blanks.6678>:
    5f52:	20202020 20202020 20202020 20202020                     

00005f62 <zeroes.6679>:
    5f62:	30303030 30303030 30303030 30303030     0000000000000000
    5f72:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    5f82:	32313000 36353433 61393837 65646362     .0123456789abcde
    5f92:	4f500066 00584953 b5f8002e                       f.POSIX...

00005f9c <_init>:
    5f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f9e:	bf00      	nop
    5fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5fa2:	bc08      	pop	{r3}
    5fa4:	469e      	mov	lr, r3
    5fa6:	4770      	bx	lr

00005fa8 <__init_array_start>:
    5fa8:	0000432d 	.word	0x0000432d

00005fac <__frame_dummy_init_array_entry>:
    5fac:	000001f9                                ....

00005fb0 <_fini>:
    5fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fb2:	bf00      	nop
    5fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5fb6:	bc08      	pop	{r3}
    5fb8:	469e      	mov	lr, r3
    5fba:	4770      	bx	lr

00005fbc <__fini_array_start>:
    5fbc:	000001d1 	.word	0x000001d1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <bpm_ps_no_halt_exec>:
 */
RAMFUNC bool bpm_ps_no_halt_exec(Bpm *bpm, uint32_t pmcon)
{
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
2000000c:	f04f 0300 	mov.w	r3, #0
20000010:	f2c4 030f 	movt	r3, #16399	; 0x400f
20000014:	f04f 021c 	mov.w	r2, #28
20000018:	f6ca 2200 	movt	r2, #43520	; 0xaa00
2000001c:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
2000001e:	61c1      	str	r1, [r0, #28]
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000020:	f04f 0100 	mov.w	r1, #0
20000024:	f2c4 010f 	movt	r1, #16399	; 0x400f
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000028:	f24e 0210 	movw	r2, #57360	; 0xe010
2000002c:	f2ce 0200 	movt	r2, #57344	; 0xe000
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
	bpm->BPM_PMCON = pmcon;
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000030:	6948      	ldr	r0, [r1, #20]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000032:	6813      	ldr	r3, [r2, #0]
20000034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	} while (!b_psok && !b_timeout);
20000038:	f010 0001 	ands.w	r0, r0, #1
2000003c:	d101      	bne.n	20000042 <bpm_ps_no_halt_exec+0x36>
2000003e:	2b00      	cmp	r3, #0
20000040:	d0f6      	beq.n	20000030 <bpm_ps_no_halt_exec+0x24>
	return b_psok;
}
20000042:	4770      	bx	lr

20000044 <g_interrupt_enabled>:
20000044:	0001 0000                                   ....

20000048 <flashcalw_wait_until_ready>:
20000048:	1f01 0000 0000 0000                         ........

20000050 <_impure_ptr>:
20000050:	0058 2000 0000 0000                         X.. ....

20000058 <impure_data>:
20000058:	0000 0000 0344 2000 03ac 2000 0414 2000     ....D.. ... ... 
	...
2000008c:	5f50 0000 0000 0000 0000 0000 0000 0000     P_..............
	...
20000100:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000110:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000480 <lc_ctype_charset>:
20000480:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200004a0 <__mb_cur_max>:
200004a0:	0001 0000                                   ....

200004a4 <lc_message_charset>:
200004a4:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200004c4 <lconv>:
200004c4:	5f9a 0000 5f9b 0000 5f9b 0000 5f9b 0000     ._..._..._..._..
200004d4:	5f9b 0000 5f9b 0000 5f9b 0000 5f9b 0000     ._..._..._..._..
200004e4:	5f9b 0000 5f9b 0000 ffff ffff ffff ffff     ._..._..........
200004f4:	ffff ffff ffff 0000                         ........

200004fc <__malloc_av_>:
	...
20000504:	04fc 2000 04fc 2000 0504 2000 0504 2000     ... ... ... ... 
20000514:	050c 2000 050c 2000 0514 2000 0514 2000     ... ... ... ... 
20000524:	051c 2000 051c 2000 0524 2000 0524 2000     ... ... $.. $.. 
20000534:	052c 2000 052c 2000 0534 2000 0534 2000     ,.. ,.. 4.. 4.. 
20000544:	053c 2000 053c 2000 0544 2000 0544 2000     <.. <.. D.. D.. 
20000554:	054c 2000 054c 2000 0554 2000 0554 2000     L.. L.. T.. T.. 
20000564:	055c 2000 055c 2000 0564 2000 0564 2000     \.. \.. d.. d.. 
20000574:	056c 2000 056c 2000 0574 2000 0574 2000     l.. l.. t.. t.. 
20000584:	057c 2000 057c 2000 0584 2000 0584 2000     |.. |.. ... ... 
20000594:	058c 2000 058c 2000 0594 2000 0594 2000     ... ... ... ... 
200005a4:	059c 2000 059c 2000 05a4 2000 05a4 2000     ... ... ... ... 
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 
200008f4:	08ec 2000 08ec 2000 08f4 2000 08f4 2000     ... ... ... ... 

20000904 <__malloc_sbrk_base>:
20000904:	ffff ffff                                   ....

20000908 <__malloc_trim_threshold>:
20000908:	0000 0002                                   ....

2000090c <__wctomb>:
2000090c:	5711 0000                                   .W..
